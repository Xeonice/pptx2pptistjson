"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/txml";
exports.ids = ["vendor-chunks/txml"];
exports.modules = {

/***/ "(rsc)/./node_modules/txml/dist/txml.mjs":
/*!*****************************************!*\
  !*** ./node_modules/txml/dist/txml.mjs ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   filter: () => (/* binding */ filter),\n/* harmony export */   getElementById: () => (/* binding */ getElementById),\n/* harmony export */   getElementsByClassName: () => (/* binding */ getElementsByClassName),\n/* harmony export */   parse: () => (/* binding */ parse),\n/* harmony export */   simplify: () => (/* binding */ simplify),\n/* harmony export */   simplifyLostLess: () => (/* binding */ simplifyLostLess),\n/* harmony export */   stringify: () => (/* binding */ stringify),\n/* harmony export */   toContentString: () => (/* binding */ toContentString)\n/* harmony export */ });\n// ==ClosureCompiler==\n// @output_file_name default.js\n// @compilation_level SIMPLE_OPTIMIZATIONS\n// ==/ClosureCompiler==\n// module.exports = {\n//     parse: parse,\n//     simplify: simplify,\n//     simplifyLostLess: simplifyLostLess,\n//     filter: filter,\n//     stringify: stringify,\n//     toContentString: toContentString,\n//     getElementById: getElementById,\n//     getElementsByClassName: getElementsByClassName,\n//     transformStream: transformStream,\n// };\n\n/**\n * @author: Tobias Nickel\n * @created: 06.04.2015\n * I needed a small xmlparser chat can be used in a worker.\n */\n\n/**\n * @typedef tNode \n * @property {string} tagName \n * @property {object} attributes\n * @property {(tNode|string)[]} children \n **/\n\n/**\n * @typedef TParseOptions\n * @property {number} [pos]\n * @property {string[]} [noChildNodes]\n * @property {boolean} [setPos]\n * @property {boolean} [keepComments] \n * @property {boolean} [keepWhitespace]\n * @property {boolean} [simplify]\n * @property {(a: tNode, b: tNode) => boolean} [filter]\n */\n\n/**\n * parseXML / html into a DOM Object. with no validation and some failur tolerance\n * @param {string} S your XML to parse\n * @param {TParseOptions} [options]  all other options:\n * @return {(tNode | string)[]}\n */\nfunction parse(S, options) {\n    \"txml\";\n    options = options || {};\n\n    var pos = options.pos || 0;\n    var keepComments = !!options.keepComments;\n    var keepWhitespace = !!options.keepWhitespace;\n\n    var openBracket = \"<\";\n    var openBracketCC = \"<\".charCodeAt(0);\n    var closeBracket = \">\";\n    var closeBracketCC = \">\".charCodeAt(0);\n    var minusCC = \"-\".charCodeAt(0);\n    var slashCC = \"/\".charCodeAt(0);\n    var exclamationCC = '!'.charCodeAt(0);\n    var singleQuoteCC = \"'\".charCodeAt(0);\n    var doubleQuoteCC = '\"'.charCodeAt(0);\n    var openCornerBracketCC = '['.charCodeAt(0);\n    var closeCornerBracketCC = ']'.charCodeAt(0);\n\n\n    /**\n     * parsing a list of entries\n     */\n    function parseChildren(tagName) {\n        var children = [];\n        while (S[pos]) {\n            if (S.charCodeAt(pos) == openBracketCC) {\n                if (S.charCodeAt(pos + 1) === slashCC) {\n                    var closeStart = pos + 2;\n                    pos = S.indexOf(closeBracket, pos);\n\n                    var closeTag = S.substring(closeStart, pos);\n                    if (closeTag.indexOf(tagName) == -1) {\n                        var parsedText = S.substring(0, pos).split('\\n');\n                        throw new Error(\n                            'Unexpected close tag\\nLine: ' + (parsedText.length - 1) +\n                            '\\nColumn: ' + (parsedText[parsedText.length - 1].length + 1) +\n                            '\\nChar: ' + S[pos]\n                        );\n                    }\n\n                    if (pos + 1) pos += 1;\n\n                    return children;\n                } else if (S.charCodeAt(pos + 1) === exclamationCC) {\n                    if (S.charCodeAt(pos + 2) == minusCC) {\n                        //comment support\n                        const startCommentPos = pos;\n                        while (pos !== -1 && !(S.charCodeAt(pos) === closeBracketCC && S.charCodeAt(pos - 1) == minusCC && S.charCodeAt(pos - 2) == minusCC && pos != -1)) {\n                            pos = S.indexOf(closeBracket, pos + 1);\n                        }\n                        if (pos === -1) {\n                            pos = S.length;\n                        }\n                        if (keepComments) {\n                            children.push(S.substring(startCommentPos, pos + 1));\n                        }\n                    } else if (\n                        S.charCodeAt(pos + 2) === openCornerBracketCC &&\n                        S.charCodeAt(pos + 8) === openCornerBracketCC &&\n                        S.substr(pos + 3, 5).toLowerCase() === 'cdata'\n                    ) {\n                        // cdata\n                        var cdataEndIndex = S.indexOf(']]>', pos);\n                        if (cdataEndIndex == -1) {\n                            children.push(S.substr(pos + 9));\n                            pos = S.length;\n                        } else {\n                            children.push(S.substring(pos + 9, cdataEndIndex));\n                            pos = cdataEndIndex + 3;\n                        }\n                        continue;\n                    } else {\n                        // doctypesupport\n                        const startDoctype = pos + 1;\n                        pos += 2;\n                        var encapsuled = false;\n                        while ((S.charCodeAt(pos) !== closeBracketCC || encapsuled === true) && S[pos]) {\n                            if (S.charCodeAt(pos) === openCornerBracketCC) {\n                                encapsuled = true;\n                            } else if (encapsuled === true && S.charCodeAt(pos) === closeCornerBracketCC) {\n                                encapsuled = false;\n                            }\n                            pos++;\n                        }\n                        children.push(S.substring(startDoctype, pos));\n                    }\n                    pos++;\n                    continue;\n                }\n                var node = parseNode();\n                children.push(node);\n                if (node.tagName[0] === '?') {\n                    children.push(...node.children);\n                    node.children = [];\n                }\n            } else {\n                var text = parseText();\n                if (keepWhitespace) {\n                    if (text.length > 0) {\n                        children.push(text);\n                    }\n                } else {\n                    var trimmed = text.trim();\n                    if (trimmed.length > 0) {\n                        children.push(trimmed);\n                    }\n                }\n                pos++;\n            }\n        }\n        return children;\n    }\n\n    /**\n     *    returns the text outside of texts until the first '<'\n     */\n    function parseText() {\n        var start = pos;\n        pos = S.indexOf(openBracket, pos) - 1;\n        if (pos === -2)\n            pos = S.length;\n        return S.slice(start, pos + 1);\n    }\n    /**\n     *    returns text until the first nonAlphabetic letter\n     */\n    var nameSpacer = '\\r\\n\\t>/= ';\n\n    function parseName() {\n        var start = pos;\n        while (nameSpacer.indexOf(S[pos]) === -1 && S[pos]) {\n            pos++;\n        }\n        return S.slice(start, pos);\n    }\n    /**\n     *    is parsing a node, including tagName, Attributes and its children,\n     * to parse children it uses the parseChildren again, that makes the parsing recursive\n     */\n    var NoChildNodes = options.noChildNodes || ['img', 'br', 'input', 'meta', 'link', 'hr'];\n\n    function parseNode() {\n        pos++;\n        const tagName = parseName();\n        const attributes = {};\n        let children = [];\n\n        // parsing attributes\n        while (S.charCodeAt(pos) !== closeBracketCC && S[pos]) {\n            var c = S.charCodeAt(pos);\n            if ((c > 64 && c < 91) || (c > 96 && c < 123)) {\n                //if('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'.indexOf(S[pos])!==-1 ){\n                var name = parseName();\n                // search beginning of the string\n                var code = S.charCodeAt(pos);\n                while (code && code !== singleQuoteCC && code !== doubleQuoteCC && !((code > 64 && code < 91) || (code > 96 && code < 123)) && code !== closeBracketCC) {\n                    pos++;\n                    code = S.charCodeAt(pos);\n                }\n                if (code === singleQuoteCC || code === doubleQuoteCC) {\n                    var value = parseString();\n                    if (pos === -1) {\n                        return {\n                            tagName,\n                            attributes,\n                            children,\n                        };\n                    }\n                } else {\n                    value = null;\n                    pos--;\n                }\n                attributes[name] = value;\n            }\n            pos++;\n        }\n        // optional parsing of children\n        if (S.charCodeAt(pos - 1) !== slashCC) {\n            if (tagName == \"script\") {\n                var start = pos + 1;\n                pos = S.indexOf('</script>', pos);\n                children = [S.slice(start, pos)];\n                pos += 9;\n            } else if (tagName == \"style\") {\n                var start = pos + 1;\n                pos = S.indexOf('</style>', pos);\n                children = [S.slice(start, pos)];\n                pos += 8;\n            } else if (NoChildNodes.indexOf(tagName) === -1) {\n                pos++;\n                children = parseChildren(tagName);\n            } else {\n                pos++;\n            }\n        } else {\n            pos++;\n        }\n        return {\n            tagName,\n            attributes,\n            children,\n        };\n    }\n\n    /**\n     *    is parsing a string, that starts with a char and with the same usually  ' or \"\n     */\n\n    function parseString() {\n        var startChar = S[pos];\n        var startpos = pos + 1;\n        pos = S.indexOf(startChar, startpos);\n        return S.slice(startpos, pos);\n    }\n\n    /**\n     *\n     */\n    function findElements() {\n        var r = new RegExp('\\\\s' + options.attrName + '\\\\s*=[\\'\"]' + options.attrValue + '[\\'\"]').exec(S);\n        if (r) {\n            return r.index;\n        } else {\n            return -1;\n        }\n    }\n\n    var out = null;\n    if (options.attrValue !== undefined) {\n        options.attrName = options.attrName || 'id';\n        var out = [];\n\n        while ((pos = findElements()) !== -1) {\n            pos = S.lastIndexOf('<', pos);\n            if (pos !== -1) {\n                out.push(parseNode());\n            }\n            S = S.substr(pos);\n            pos = 0;\n        }\n    } else if (options.parseNode) {\n        out = parseNode();\n    } else {\n        out = parseChildren('');\n    }\n\n    if (options.filter) {\n        out = filter(out, options.filter);\n    }\n\n    if (options.simplify) {\n        return simplify(Array.isArray(out) ? out : [out]);\n    }\n\n    if (options.setPos) {\n        out.pos = pos;\n    }\n\n    return out;\n}\n\n/**\n * transform the DomObject to an object that is like the object of PHP`s simple_xmp_load_*() methods.\n * this format helps you to write that is more likely to keep your program working, even if there a small changes in the XML schema.\n * be aware, that it is not possible to reproduce the original xml from a simplified version, because the order of elements is not saved.\n * therefore your program will be more flexible and easier to read.\n *\n * @param {tNode[]} children the childrenList\n */\nfunction simplify(children) {\n    var out = {};\n    if (!children.length) {\n        return '';\n    }\n\n    if (children.length === 1 && typeof children[0] == 'string') {\n        return children[0];\n    }\n    // map each object\n    children.forEach(function(child) {\n        if (typeof child !== 'object') {\n            return;\n        }\n        if (!out[child.tagName])\n            out[child.tagName] = [];\n        var kids = simplify(child.children);\n        out[child.tagName].push(kids);\n        if (Object.keys(child.attributes).length && typeof kids !== 'string') {\n            kids._attributes = child.attributes;\n        }\n    });\n\n    for (var i in out) {\n        if (out[i].length == 1) {\n            out[i] = out[i][0];\n        }\n    }\n\n    return out;\n}\n\n/**\n * similar to simplify, but lost less\n *\n * @param {tNode[]} children the childrenList\n */\nfunction simplifyLostLess(children, parentAttributes = {}) {\n    var out = {};\n    if (!children.length) {\n        return out;\n    }\n\n    if (children.length === 1 && typeof children[0] == 'string') {\n        return Object.keys(parentAttributes).length ? {\n            _attributes: parentAttributes,\n            value: children[0]\n        } : children[0];\n    }\n    // map each object\n    children.forEach(function(child) {\n        if (typeof child !== 'object') {\n            return;\n        }\n        if (!out[child.tagName])\n            out[child.tagName] = [];\n        var kids = simplifyLostLess(child.children || [], child.attributes);\n        out[child.tagName].push(kids);\n        if (Object.keys(child.attributes).length) {\n            kids._attributes = child.attributes;\n        }\n    });\n\n    return out;\n}\n/**\n * behaves the same way as Array.filter, if the filter method return true, the element is in the resultList\n * @params children{Array} the children of a node\n * @param f{function} the filter method\n */\nfunction filter(children, f, dept = 0, path = '') {\n    var out = [];\n    children.forEach(function(child, i) {\n        if (typeof(child) === 'object' && f(child, i, dept, path)) out.push(child);\n        if (child.children) {\n            var kids = filter(child.children, f, dept + 1, (path ? path + '.' : '') + i + '.' + child.tagName);\n            out = out.concat(kids);\n        }\n    });\n    return out;\n}\n/**\n * stringify a previously parsed string object.\n * this is useful,\n *  1. to remove whitespace\n * 2. to recreate xml data, with some changed data.\n * @param {tNode} O the object to Stringify\n */\nfunction stringify(O) {\n    var out = '';\n\n    function writeChildren(O) {\n        if (O) {\n            for (var i = 0; i < O.length; i++) {\n                if (typeof O[i] == 'string') {\n                    out += O[i].trim();\n                } else {\n                    writeNode(O[i]);\n                }\n            }\n        }\n    }\n\n    function writeNode(N) {\n        out += \"<\" + N.tagName;\n        for (var i in N.attributes) {\n            if (N.attributes[i] === null) {\n                out += ' ' + i;\n            } else if (N.attributes[i].indexOf('\"') === -1) {\n                out += ' ' + i + '=\"' + N.attributes[i].trim() + '\"';\n            } else {\n                out += ' ' + i + \"='\" + N.attributes[i].trim() + \"'\";\n            }\n        }\n        if (N.tagName[0] === '?') {\n            out += '?>';\n            return;\n        }\n        out += '>';\n        writeChildren(N.children);\n        out += '</' + N.tagName + '>';\n    }\n    writeChildren(O);\n\n    return out;\n}\n\n/**\n * use this method to read the text content, of some node.\n * It is great if you have mixed content like:\n * this text has some <b>big</b> text and a <a href=''>link</a>\n * @return {string}\n */\nfunction toContentString(tDom) {\n    if (Array.isArray(tDom)) {\n        var out = '';\n        tDom.forEach(function(e) {\n            out += ' ' + toContentString(e);\n            out = out.trim();\n        });\n        return out;\n    } else if (typeof tDom === 'object') {\n        return toContentString(tDom.children)\n    } else {\n        return ' ' + tDom;\n    }\n}\nfunction getElementById(S, id, simplified) {\n    var out = parse(S, {\n        attrValue: id\n    });\n    return simplified ? tXml.simplify(out) : out[0];\n}\nfunction getElementsByClassName(S, classname, simplified) {\n    const out = parse(S, {\n        attrName: 'class',\n        attrValue: '[a-zA-Z0-9- ]*' + classname + '[a-zA-Z0-9- ]*'\n    });\n    return simplified ? tXml.simplify(out) : out;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/txml/dist/txml.mjs\n");

/***/ })

};
;
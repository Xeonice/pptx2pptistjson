
> pptx2pptistjson@2.2.0 test
> npx jest --no-coverage --verbose

FAIL tests/__tests__/line-processor-comprehensive.test.ts
  LineProcessor 综合测试
    LineElement 类测试
      基础属性设置
        ✓ 应该正确设置和获取点坐标 (2 ms)
        ✓ 应该正确设置线条宽度 (1 ms)
        ✓ 应该正确设置线条颜色
        ✓ 应该正确设置线条样式
        ✓ 应该正确设置箭头
        ✓ 应该正确设置翻转属性 (6 ms)
      toJSON 方法测试
        ✓ 应该生成正确的JSON格式
        ✓ 应该处理空点数组 (2 ms)
        ✓ 应该处理单个点 (14 ms)
        ✓ 应该处理调试模式 (2 ms)
      默认值测试
        ✓ 应该有正确的默认值 (3 ms)
    LineProcessor 类测试
      canProcess 方法测试
        ✓ 应该处理连接形状 (p:cxnSp) 中的线条 (1 ms)
        ✓ 应该处理连接形状中的直线连接器
        ✓ 应该处理常规形状 (p:sp) 中的线条
        ✓ 应该拒绝非线条形状
        ✓ 应该拒绝没有几何形状的元素 (1 ms)
        ✓ 应该拒绝没有 spPr 的元素 (1 ms)
        ✓ 应该拒绝不支持的连接器类型
      process 方法测试
        ✓ 应该正确处理连接形状 (1 ms)
        ✓ 应该正确处理常规形状
        ✓ 应该正确提取位置信息
        ✕ 应该正确提取尺寸信息 (2 ms)
        ✓ 应该正确处理翻转属性
        ✕ 应该正确提取线条宽度 (1 ms)
        ✕ 应该正确提取线条颜色 (2 ms)
        ✓ 应该正确处理虚线样式
        ✓ 应该正确处理点线样式
        ✕ 应该正确处理箭头 (1 ms)
        ✕ 应该正确计算线条端点 - 默认方向
        ✕ 应该正确计算线条端点 - 水平翻转 (1 ms)
        ✕ 应该正确计算线条端点 - 垂直翻转
        ✕ 应该正确计算线条端点 - 双重翻转 (2 ms)
        ✕ 应该处理主题颜色 (1 ms)
        ✓ 应该处理缺少位置信息的情况 (14 ms)
        ✓ 应该处理缺少尺寸信息的情况
        ✓ 应该处理缺少线条样式的情况 (1 ms)
        ✓ 应该处理调试模式
        ✕ 应该处理无效的颜色值
        ✕ 应该处理无效的线宽值 (1 ms)
      getElementType 方法测试
        ✓ 应该返回正确的元素类型
      extractColor 私有方法测试
        ✕ 应该处理RGB颜色
        ✕ 应该处理主题颜色
        ✕ 应该处理缺少主题的情况
    边界情况和错误处理
      ✓ 应该处理空XML节点 (1 ms)
      ✓ 应该处理无效的ID值
      ✓ 应该处理非常大的数值
      ✓ 应该处理零尺寸的线条
      ✓ 应该处理负数坐标
    性能测试
      ✓ 应该能快速处理大量线条 (12 ms)

  ● LineProcessor 综合测试 › LineProcessor 类测试 › process 方法测试 › 应该正确提取尺寸信息

    expect(received).toEqual(expected) // deep equality

    - Expected  - 2
    + Received  + 2

      Object {
    -   "height": 7.2,
    -   "width": 14.4,
    +   "height": 96,
    +   "width": 192,
      }

      360 |         
      361 |         // 验证尺寸设置
    > 362 |         expect(result.getSize()).toEqual({
          |                                  ^
      363 |           width: 14.4, // 1828800 EMU 转为点
      364 |           height: 7.2, // 914400 EMU 转为点
      365 |         });

      at Object.<anonymous> (tests/__tests__/line-processor-comprehensive.test.ts:362:34)

  ● LineProcessor 综合测试 › LineProcessor 类测试 › process 方法测试 › 应该正确提取线条宽度

    expect(received).toBe(expected) // Object.is equality

    Expected: 2
    Received: 2.67

      384 |         const result = await processor.process(spNode, mockProcessingContext);
      385 |         
    > 386 |         expect(result.toJSON().width).toBe(2);
          |                                       ^
      387 |       });
      388 |
      389 |       it("应该正确提取线条颜色", async () => {

      at Object.<anonymous> (tests/__tests__/line-processor-comprehensive.test.ts:386:39)

  ● LineProcessor 综合测试 › LineProcessor 类测试 › process 方法测试 › 应该正确提取线条颜色

    expect(received).toBe(expected) // Object.is equality

    Expected: "rgba(255, 0, 0, 1)"
    Received: "rgba(255,0,0,1)"

      393 |         const result = await processor.process(spNode, mockProcessingContext);
      394 |         
    > 395 |         expect(result.toJSON().color).toBe("rgba(255, 0, 0, 1)");
          |                                       ^
      396 |       });
      397 |
      398 |       it("应该正确处理虚线样式", async () => {

      at Object.<anonymous> (tests/__tests__/line-processor-comprehensive.test.ts:395:39)

  ● LineProcessor 综合测试 › LineProcessor 类测试 › process 方法测试 › 应该正确处理箭头

    expect(received).toEqual(expected) // deep equality

    - Expected  - 1
    + Received  + 1

      Array [
        "arrow",
    -   "diamond",
    +   "arrow",
      ]

      423 |         const result = await processor.process(spNode, mockProcessingContext);
      424 |         
    > 425 |         expect(result.toJSON().points).toEqual(["arrow", "diamond"]);
          |                                        ^
      426 |       });
      427 |
      428 |       it("应该正确计算线条端点 - 默认方向", async () => {

      at Object.<anonymous> (tests/__tests__/line-processor-comprehensive.test.ts:425:40)

  ● LineProcessor 综合测试 › LineProcessor 类测试 › process 方法测试 › 应该正确计算线条端点 - 默认方向

    expect(received).toEqual(expected) // deep equality

    - Expected  - 2
    + Received  + 2

      Array [
    -   14.4,
    -   7.2,
    +   192,
    +   96,
      ]

      435 |         // 默认从左上到右下
      436 |         expect(json.start).toEqual([0, 0]); // 相对于位置
    > 437 |         expect(json.end).toEqual([14.4, 7.2]); // 相对于位置，使用尺寸
          |                          ^
      438 |       });
      439 |
      440 |       it("应该正确计算线条端点 - 水平翻转", async () => {

      at Object.<anonymous> (tests/__tests__/line-processor-comprehensive.test.ts:437:26)

  ● LineProcessor 综合测试 › LineProcessor 类测试 › process 方法测试 › 应该正确计算线条端点 - 水平翻转

    expect(received).toEqual(expected) // deep equality

    - Expected  - 1
    + Received  + 1

      Array [
    -   14.4,
    +   192,
        0,
      ]

      446 |         
      447 |         // 水平翻转：从右上到左下
    > 448 |         expect(json.start).toEqual([14.4, 0]); // 相对于位置
          |                            ^
      449 |         expect(json.end).toEqual([0, 7.2]); // 相对于位置
      450 |       });
      451 |

      at Object.<anonymous> (tests/__tests__/line-processor-comprehensive.test.ts:448:28)

  ● LineProcessor 综合测试 › LineProcessor 类测试 › process 方法测试 › 应该正确计算线条端点 - 垂直翻转

    expect(received).toEqual(expected) // deep equality

    - Expected  - 1
    + Received  + 1

      Array [
        0,
    -   7.2,
    +   96,
      ]

      458 |         
      459 |         // 垂直翻转：从左下到右上
    > 460 |         expect(json.start).toEqual([0, 7.2]); // 相对于位置
          |                            ^
      461 |         expect(json.end).toEqual([14.4, 0]); // 相对于位置
      462 |       });
      463 |

      at Object.<anonymous> (tests/__tests__/line-processor-comprehensive.test.ts:460:28)

  ● LineProcessor 综合测试 › LineProcessor 类测试 › process 方法测试 › 应该正确计算线条端点 - 双重翻转

    expect(received).toEqual(expected) // deep equality

    - Expected  - 2
    + Received  + 2

      Array [
    -   14.4,
    -   7.2,
    +   192,
    +   96,
      ]

      470 |         
      471 |         // 双重翻转：从右下到左上
    > 472 |         expect(json.start).toEqual([14.4, 7.2]); // 相对于位置
          |                            ^
      473 |         expect(json.end).toEqual([0, 0]); // 相对于位置
      474 |       });
      475 |

      at Object.<anonymous> (tests/__tests__/line-processor-comprehensive.test.ts:472:28)

  ● LineProcessor 综合测试 › LineProcessor 类测试 › process 方法测试 › 应该处理主题颜色

    expect(received).toBe(expected) // Object.is equality

    Expected: "rgba(255, 87, 51, 1)"
    Received: "rgba(0,0,0,1)"

      497 |         const result = await processor.process(spNode, mockProcessingContext);
      498 |         
    > 499 |         expect(result.toJSON().color).toBe("rgba(255, 87, 51, 1)");
          |                                       ^
      500 |       });
      501 |
      502 |       it("应该处理缺少位置信息的情况", async () => {

      at Object.<anonymous> (tests/__tests__/line-processor-comprehensive.test.ts:499:39)

  ● LineProcessor 综合测试 › LineProcessor 类测试 › process 方法测试 › 应该处理无效的颜色值

    expect(received).toBe(expected) // Object.is equality

    Expected: "#000000"
    Received: "rgba(0,0,0,1)"

      559 |         
      560 |         // 应该回退到默认颜色
    > 561 |         expect(result.toJSON().color).toBe("#000000");
          |                                       ^
      562 |       });
      563 |
      564 |       it("应该处理无效的线宽值", async () => {

      at Object.<anonymous> (tests/__tests__/line-processor-comprehensive.test.ts:561:39)

  ● LineProcessor 综合测试 › LineProcessor 类测试 › process 方法测试 › 应该处理无效的线宽值

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: NaN

      569 |         
      570 |         // 应该使用默认线宽
    > 571 |         expect(result.toJSON().width).toBe(1);
          |                                       ^
      572 |       });
      573 |     });
      574 |

      at Object.<anonymous> (tests/__tests__/line-processor-comprehensive.test.ts:571:39)

  ● LineProcessor 综合测试 › LineProcessor 类测试 › extractColor 私有方法测试 › 应该处理RGB颜色

    expect(received).toBe(expected) // Object.is equality

    Expected: "rgba(255, 0, 0, 1)"
    Received: "rgba(255,0,0,1)"

      586 |         const result = await processor.process(spNode, mockProcessingContext);
      587 |         
    > 588 |         expect(result.toJSON().color).toBe("rgba(255, 0, 0, 1)");
          |                                       ^
      589 |       });
      590 |
      591 |       it("应该处理主题颜色", async () => {

      at Object.<anonymous> (tests/__tests__/line-processor-comprehensive.test.ts:588:39)

  ● LineProcessor 综合测试 › LineProcessor 类测试 › extractColor 私有方法测试 › 应该处理主题颜色

    expect(received).toBe(expected) // Object.is equality

    Expected: "rgba(0, 255, 0, 1)"
    Received: "rgba(0,0,0,1)"

      611 |         const result = await processor.process(spNode, mockProcessingContext);
      612 |         
    > 613 |         expect(result.toJSON().color).toBe("rgba(0, 255, 0, 1)");
          |                                       ^
      614 |       });
      615 |
      616 |       it("应该处理缺少主题的情况", async () => {

      at Object.<anonymous> (tests/__tests__/line-processor-comprehensive.test.ts:613:39)

  ● LineProcessor 综合测试 › LineProcessor 类测试 › extractColor 私有方法测试 › 应该处理缺少主题的情况

    expect(received).toBe(expected) // Object.is equality

    Expected: "#000000"
    Received: "rgba(0,0,0,1)"

      627 |         
      628 |         // 应该回退到默认黑色
    > 629 |         expect(result.toJSON().color).toBe("#000000");
          |                                       ^
      630 |       });
      631 |     });
      632 |   });

      at Object.<anonymous> (tests/__tests__/line-processor-comprehensive.test.ts:629:39)

FAIL tests/__tests__/api-route-parse-pptx.test.ts
  API Route - /api/parse-pptx
    基础文件上传功能
      ✓ 应该成功处理有效的PPTX文件 (6 ms)
      ✓ 应该拒绝非PPTX文件 (1 ms)
      ✓ 应该处理缺少文件的情况
    CDN文件下载功能
      ✓ 应该成功从CDN URL下载文件
      ✓ 应该处理CDN下载失败
      ✓ 应该处理CDN文件名提取 (1 ms)
      ✓ 应该拒绝CDN中的非PPTX文件
    背景格式参数处理
      ✕ 应该处理legacy格式参数 (9 ms)
      ✕ 应该处理pptist格式参数 (1 ms)
      ✕ 应该默认使用legacy格式 (1 ms)
    调试模式功能
      ✕ 应该处理调试模式启用 (9 ms)
      ✕ 应该处理无效的调试选项JSON (2 ms)
    CDN存储功能
      ✕ 应该成功上传到CDN (1 ms)
      ✕ 应该处理CDN不可用的情况
      ✕ 应该处理CDN上传失败 (1 ms)
    错误处理
      ✕ 应该处理解析器错误
      ✓ 应该处理FormData解析错误 (1 ms)
    响应格式验证
      ✕ 应该返回正确的响应结构
      ✕ 应该包含调试信息
    参数组合测试
      ✕ 应该处理所有参数的组合
    边界情况测试
      ✕ 应该处理空文件 (1 ms)
      ✕ 应该处理非常大的文件名
    大文件处理
      ✕ 应该成功处理大文件（100MB） (1 ms)
      ✕ 应该处理解析大文件时的内存错误 (2 ms)
      ✕ 应该处理CDN上传大文件 (11 ms)
    并发请求处理
      ✕ 应该正确处理多个并发请求 (13 ms)
      ✕ 应该处理并发CDN请求
      ✕ 应该处理并发请求中的部分失败 (22 ms)
    特殊URL处理
      ✓ 应该处理Vercel Blob URL格式 (2 ms)
      ✓ 应该处理带查询参数的CDN URL (6 ms)
      ✓ 应该处理无扩展名的CDN URL (1 ms)
    内存和性能测试
      ✕ 应该清理解析后的临时数据
      ✕ 应该处理解析超时情况

  ● API Route - /api/parse-pptx › 背景格式参数处理 › 应该处理legacy格式参数

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 400

      272 |
      273 |       const response = await POST(request);
    > 274 |       expect(response.status).toBe(200);
          |                               ^
      275 |
      276 |       expect(pptxParser.parseToJSON).toHaveBeenCalledWith(
      277 |         expect.any(ArrayBuffer),

      at Object.<anonymous> (tests/__tests__/api-route-parse-pptx.test.ts:274:31)

  ● API Route - /api/parse-pptx › 背景格式参数处理 › 应该处理pptist格式参数

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 400

      291 |
      292 |       const response = await POST(request);
    > 293 |       expect(response.status).toBe(200);
          |                               ^
      294 |
      295 |       expect(pptxParser.parseToJSON).toHaveBeenCalledWith(
      296 |         expect.any(ArrayBuffer),

      at Object.<anonymous> (tests/__tests__/api-route-parse-pptx.test.ts:293:31)

  ● API Route - /api/parse-pptx › 背景格式参数处理 › 应该默认使用legacy格式

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 400

      308 |
      309 |       const response = await POST(request);
    > 310 |       expect(response.status).toBe(200);
          |                               ^
      311 |
      312 |       expect(pptxParser.parseToJSON).toHaveBeenCalledWith(
      313 |         expect.any(ArrayBuffer),

      at Object.<anonymous> (tests/__tests__/api-route-parse-pptx.test.ts:310:31)

  ● API Route - /api/parse-pptx › 调试模式功能 › 应该处理调试模式启用

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 400

      340 |
      341 |       const response = await POST(request);
    > 342 |       expect(response.status).toBe(200);
          |                               ^
      343 |
      344 |       expect(pptxParser.parseToJSON).toHaveBeenCalledWith(
      345 |         expect.any(ArrayBuffer),

      at Object.<anonymous> (tests/__tests__/api-route-parse-pptx.test.ts:342:31)

  ● API Route - /api/parse-pptx › 调试模式功能 › 应该处理无效的调试选项JSON

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 400

      364 |
      365 |       const response = await POST(request);
    > 366 |       expect(response.status).toBe(200);
          |                               ^
      367 |
      368 |       expect(pptxParser.parseToJSON).toHaveBeenCalledWith(
      369 |         expect.any(ArrayBuffer),

      at Object.<anonymous> (tests/__tests__/api-route-parse-pptx.test.ts:366:31)

  ● API Route - /api/parse-pptx › CDN存储功能 › 应该成功上传到CDN

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 400

      411 |
      412 |       const response = await POST(request);
    > 413 |       expect(response.status).toBe(200);
          |                               ^
      414 |
      415 |       const responseData = await response.json();
      416 |       expect(responseData.success).toBe(true);

      at Object.<anonymous> (tests/__tests__/api-route-parse-pptx.test.ts:413:31)

  ● API Route - /api/parse-pptx › CDN存储功能 › 应该处理CDN不可用的情况

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 400

      434 |
      435 |       const response = await POST(request);
    > 436 |       expect(response.status).toBe(200);
          |                               ^
      437 |
      438 |       const responseData = await response.json();
      439 |       expect(responseData.success).toBe(true);

      at Object.<anonymous> (tests/__tests__/api-route-parse-pptx.test.ts:436:31)

  ● API Route - /api/parse-pptx › CDN存储功能 › 应该处理CDN上传失败

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 400

      458 |
      459 |       const response = await POST(request);
    > 460 |       expect(response.status).toBe(200);
          |                               ^
      461 |
      462 |       const responseData = await response.json();
      463 |       expect(responseData.success).toBe(true);

      at Object.<anonymous> (tests/__tests__/api-route-parse-pptx.test.ts:460:31)

  ● API Route - /api/parse-pptx › 错误处理 › 应该处理解析器错误

    expect(received).toBe(expected) // Object.is equality

    Expected: 500
    Received: 400

      479 |
      480 |       const response = await POST(request);
    > 481 |       expect(response.status).toBe(500);
          |                               ^
      482 |
      483 |       const responseData = await response.json();
      484 |       expect(responseData.error).toBe("Failed to parse PPTX file");

      at Object.<anonymous> (tests/__tests__/api-route-parse-pptx.test.ts:481:31)

  ● API Route - /api/parse-pptx › 响应格式验证 › 应该返回正确的响应结构

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 400

      524 |
      525 |       const response = await POST(request);
    > 526 |       expect(response.status).toBe(200);
          |                               ^
      527 |
      528 |       const responseData = await response.json();
      529 |       

      at Object.<anonymous> (tests/__tests__/api-route-parse-pptx.test.ts:526:31)

  ● API Route - /api/parse-pptx › 响应格式验证 › 应该包含调试信息

    TypeError: Cannot read properties of undefined (reading 'fileSize')

      552 |       const responseData = await response.json();
      553 |
    > 554 |       expect(responseData.debug.fileSize).toBe(12); // "test content".length
          |                                 ^
      555 |       expect(responseData.debug.resultKeys).toContain("width");
      556 |       expect(responseData.debug.resultKeys).toContain("height");
      557 |       expect(responseData.debug.resultKeys).toContain("slides");

      at Object.<anonymous> (tests/__tests__/api-route-parse-pptx.test.ts:554:33)

  ● API Route - /api/parse-pptx › 参数组合测试 › 应该处理所有参数的组合

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 400

      593 |
      594 |       const response = await POST(request);
    > 595 |       expect(response.status).toBe(200);
          |                               ^
      596 |
      597 |       // 验证所有参数都被正确传递
      598 |       expect(pptxParser.parseToJSON).toHaveBeenCalledWith(

      at Object.<anonymous> (tests/__tests__/api-route-parse-pptx.test.ts:595:31)

  ● API Route - /api/parse-pptx › 边界情况测试 › 应该处理空文件

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 400

      621 |
      622 |       const response = await POST(request);
    > 623 |       expect(response.status).toBe(200);
          |                               ^
      624 |
      625 |       const responseData = await response.json();
      626 |       expect(responseData.debug.fileSize).toBe(0);

      at Object.<anonymous> (tests/__tests__/api-route-parse-pptx.test.ts:623:31)

  ● API Route - /api/parse-pptx › 边界情况测试 › 应该处理非常大的文件名

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 400

      638 |
      639 |       const response = await POST(request);
    > 640 |       expect(response.status).toBe(200);
          |                               ^
      641 |
      642 |       const responseData = await response.json();
      643 |       expect(responseData.filename).toBe(longName);

      at Object.<anonymous> (tests/__tests__/api-route-parse-pptx.test.ts:640:31)

  ● API Route - /api/parse-pptx › 大文件处理 › 应该成功处理大文件（100MB）

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 400

      675 |
      676 |       const response = await POST(request);
    > 677 |       expect(response.status).toBe(200);
          |                               ^
      678 |
      679 |       const responseData = await response.json();
      680 |       expect(responseData.success).toBe(true);

      at Object.<anonymous> (tests/__tests__/api-route-parse-pptx.test.ts:677:31)

  ● API Route - /api/parse-pptx › 大文件处理 › 应该处理解析大文件时的内存错误

    expect(received).toBe(expected) // Object.is equality

    Expected: 500
    Received: 400

      701 |
      702 |       const response = await POST(request);
    > 703 |       expect(response.status).toBe(500);
          |                               ^
      704 |
      705 |       const responseData = await response.json();
      706 |       expect(responseData.error).toBe("Failed to parse PPTX file");

      at Object.<anonymous> (tests/__tests__/api-route-parse-pptx.test.ts:703:31)

  ● API Route - /api/parse-pptx › 大文件处理 › 应该处理CDN上传大文件

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 400

      740 |
      741 |       const response = await POST(request);
    > 742 |       expect(response.status).toBe(200);
          |                               ^
      743 |
      744 |       const responseData = await response.json();
      745 |       expect(responseData.success).toBe(true);

      at Object.<anonymous> (tests/__tests__/api-route-parse-pptx.test.ts:742:31)

  ● API Route - /api/parse-pptx › 并发请求处理 › 应该正确处理多个并发请求

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 400

      778 |       // 验证所有请求都成功
      779 |       responses.forEach((response) => {
    > 780 |         expect(response.status).toBe(200);
          |                                 ^
      781 |       });
      782 |
      783 |       // 验证每个请求返回不同的数据

      at tests/__tests__/api-route-parse-pptx.test.ts:780:33
          at Array.forEach (<anonymous>)
      at Object.<anonymous> (tests/__tests__/api-route-parse-pptx.test.ts:779:17)

  ● API Route - /api/parse-pptx › 并发请求处理 › 应该处理并发CDN请求

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 400

      831 |       // 验证所有请求都成功
      832 |       responses.forEach((response) => {
    > 833 |         expect(response.status).toBe(200);
          |                                 ^
      834 |       });
      835 |
      836 |       // 验证CDN上传被调用了正确的次数

      at tests/__tests__/api-route-parse-pptx.test.ts:833:33
          at Array.forEach (<anonymous>)
      at Object.<anonymous> (tests/__tests__/api-route-parse-pptx.test.ts:832:17)

  ● API Route - /api/parse-pptx › 并发请求处理 › 应该处理并发请求中的部分失败

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 400

      867 |
      868 |       // 验证第一个和第三个请求成功
    > 869 |       expect(responses[0].status).toBe(200);
          |                                   ^
      870 |       expect(responses[2].status).toBe(200);
      871 |
      872 |       // 验证第二个请求失败

      at Object.<anonymous> (tests/__tests__/api-route-parse-pptx.test.ts:869:35)

  ● API Route - /api/parse-pptx › 内存和性能测试 › 应该清理解析后的临时数据

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 400

      970 |
      971 |       const response = await POST(request);
    > 972 |       expect(response.status).toBe(200);
          |                               ^
      973 |
      974 |       // 验证解析器只被调用一次
      975 |       expect(pptxParser.parseToJSON).toHaveBeenCalledTimes(1);

      at Object.<anonymous> (tests/__tests__/api-route-parse-pptx.test.ts:972:31)

  ● API Route - /api/parse-pptx › 内存和性能测试 › 应该处理解析超时情况

    expect(received).toBe(expected) // Object.is equality

    Expected: 500
    Received: 400

       996 |
       997 |       const response = await POST(request);
    >  998 |       expect(response.status).toBe(500);
           |                               ^
       999 |
      1000 |       const responseData = await response.json();
      1001 |       expect(responseData.error).toBe("Failed to parse PPTX file");

      at Object.<anonymous> (tests/__tests__/api-route-parse-pptx.test.ts:998:31)

FAIL tests/__tests__/html-converter-comprehensive.test.ts
  HtmlConverter - Comprehensive Test Suite
    Single Paragraph Conversion
      ✕ should convert simple text content to HTML (4 ms)
      ✓ should handle text with basic styling
      ✓ should handle text with font family (1 ms)
      ✓ should handle strikethrough text
      ✕ should handle multiple text runs in a paragraph
      ✕ should handle options without wrapping div (5 ms)
      ✓ should handle custom div style (1 ms)
      ✕ should handle custom paragraph style
      ✓ should handle text alignment
      ✓ should handle text alignment from options
    Multiple Paragraphs Conversion
      ✕ should convert multiple paragraphs to HTML
      ✕ should handle mixed paragraph styles
      ✓ should handle complex multi-run paragraphs
      ✓ should handle empty paragraphs array
      ✕ should handle options without wrapping div for multiple paragraphs (12 ms)
    Theme Color Handling
      ✓ should detect and add colortype for theme colors (3 ms)
      ✓ should handle explicit theme color types (4 ms)
      ✓ should add data attributes for theme colors (2 ms)
      ✓ should detect dark colors as dk1 (1 ms)
      ✓ should handle accent colors correctly
      ✓ should handle colors with alpha channels
      ✓ should handle non-theme colors without colortype (1 ms)
    HTML Escaping
      ✓ should not escape HTML by default
      ✓ should escape HTML when requested (1 ms)
      ✓ should handle all HTML special characters
      ✕ should handle null and undefined text gracefully
    Style Ordering and Formatting
      ✓ should maintain correct style order
      ✓ should handle combined text decorations (1 ms)
      ✓ should handle empty styles gracefully
      ✓ should handle undefined styles
    Utility Functions
      getDefaultFontName
        ✓ should return first font family found
        ✓ should return default font when no font family found
        ✓ should handle empty content array
      getDefaultColor
        ✓ should return first color found
        ✓ should return default color when no color found
        ✓ should handle empty content array
    Edge Cases and Error Handling
      ✕ should handle content with only empty text
      ✕ should handle content with only whitespace
      ✓ should handle very long text content
      ✓ should handle special characters in text
      ✓ should handle malformed style objects
      ✓ should handle null color values
      ✓ should handle boolean false values for text decoration
    Complex Real-world Scenarios
      ✓ should handle rich text with mixed formatting (1 ms)
      ✓ should handle table-like structured text
      ✓ should handle presentation slide with title and bullet points

  ● HtmlConverter - Comprehensive Test Suite › Single Paragraph Conversion › should convert simple text content to HTML

    expect(received).toBe(expected) // Object.is equality

    Expected: "<div style=\"\"><p style=\"\"><span style=\"\">Hello World</span></p></div>"
    Received: "<div  style=\"\"><p  style=\"\"><span  style=\"\">Hello World</span></p></div>"

      15 |       
      16 |       const html = HtmlConverter.convertSingleParagraphToHtml(content);
    > 17 |       expect(html).toBe('<div style=""><p style=""><span style="">Hello World</span></p></div>');
         |                    ^
      18 |     });
      19 |
      20 |     it('should handle text with basic styling', () => {

      at Object.<anonymous> (tests/__tests__/html-converter-comprehensive.test.ts:17:20)

  ● HtmlConverter - Comprehensive Test Suite › Single Paragraph Conversion › should handle multiple text runs in a paragraph

    expect(received).toContain(expected) // indexOf

    Expected substring: "<span style=\"\">Normal </span>"
    Received string:    "<div  style=\"\"><p  style=\"\"><span  style=\"\">Normal </span><span  style=\"font-weight:bold\">Bold </span><span  style=\"font-style:italic\">Italic</span></p></div>"

      78 |       
      79 |       const html = HtmlConverter.convertSingleParagraphToHtml(content);
    > 80 |       expect(html).toContain('<span style="">Normal </span>');
         |                    ^
      81 |       expect(html).toContain('<span style="font-weight:bold">Bold </span>');
      82 |       expect(html).toContain('<span style="font-style:italic">Italic</span>');
      83 |     });

      at Object.<anonymous> (tests/__tests__/html-converter-comprehensive.test.ts:80:20)

  ● HtmlConverter - Comprehensive Test Suite › Single Paragraph Conversion › should handle options without wrapping div

    expect(received).toBe(expected) // Object.is equality

    Expected: "<p style=\"\"><span style=\"\">No Wrapper</span></p>"
    Received: "<p  style=\"\"><span  style=\"\">No Wrapper</span></p>"

      90 |       const options: HtmlConversionOptions = { wrapInDiv: false };
      91 |       const html = HtmlConverter.convertSingleParagraphToHtml(content, options);
    > 92 |       expect(html).toBe('<p style=""><span style="">No Wrapper</span></p>');
         |                    ^
      93 |     });
      94 |
      95 |     it('should handle custom div style', () => {

      at Object.<anonymous> (tests/__tests__/html-converter-comprehensive.test.ts:92:20)

  ● HtmlConverter - Comprehensive Test Suite › Single Paragraph Conversion › should handle custom paragraph style

    expect(received).toContain(expected) // indexOf

    Expected substring: "<p style=\"line-height: 1.5\">"
    Received string:    "<div  style=\"\"><p  style=\"line-height: 1.5\"><span  style=\"\">Custom Paragraph</span></p></div>"

      110 |       const options: HtmlConversionOptions = { paragraphStyle: 'line-height: 1.5' };
      111 |       const html = HtmlConverter.convertSingleParagraphToHtml(content, options);
    > 112 |       expect(html).toContain('<p style="line-height: 1.5">');
          |                    ^
      113 |     });
      114 |
      115 |     it('should handle text alignment', () => {

      at Object.<anonymous> (tests/__tests__/html-converter-comprehensive.test.ts:112:20)

  ● HtmlConverter - Comprehensive Test Suite › Multiple Paragraphs Conversion › should convert multiple paragraphs to HTML

    expect(received).toContain(expected) // indexOf

    Expected substring: "<p style=\"\"><span style=\"\">First paragraph</span></p>"
    Received string:    "<div  style=\"\"><p  style=\"\"><span  style=\"\">First paragraph</span></p><p  style=\"\"><span  style=\"\">Second paragraph</span></p><p  style=\"\"><span  style=\"\">Third paragraph</span></p></div>"

      142 |       
      143 |       const html = HtmlConverter.convertParagraphsToHtml(paragraphs);
    > 144 |       expect(html).toContain('<p style=""><span style="">First paragraph</span></p>');
          |                    ^
      145 |       expect(html).toContain('<p style=""><span style="">Second paragraph</span></p>');
      146 |       expect(html).toContain('<p style=""><span style="">Third paragraph</span></p>');
      147 |     });

      at Object.<anonymous> (tests/__tests__/html-converter-comprehensive.test.ts:144:20)

  ● HtmlConverter - Comprehensive Test Suite › Multiple Paragraphs Conversion › should handle mixed paragraph styles

    expect(received).toContain(expected) // indexOf

    Expected substring: "<span style=\"\">Normal</span>"
    Received string:    "<div  style=\"\"><p  style=\"\"><span  style=\"\">Normal</span></p><p  style=\"\"><span  style=\"font-weight:bold\">Bold</span></p><p  style=\"\"><span  style=\"font-style:italic\">Italic</span></p></div>"

      155 |       
      156 |       const html = HtmlConverter.convertParagraphsToHtml(paragraphs);
    > 157 |       expect(html).toContain('<span style="">Normal</span>');
          |                    ^
      158 |       expect(html).toContain('<span style="font-weight:bold">Bold</span>');
      159 |       expect(html).toContain('<span style="font-style:italic">Italic</span>');
      160 |     });

      at Object.<anonymous> (tests/__tests__/html-converter-comprehensive.test.ts:157:20)

  ● HtmlConverter - Comprehensive Test Suite › Multiple Paragraphs Conversion › should handle options without wrapping div for multiple paragraphs

    expect(received).toBe(expected) // Object.is equality

    Expected: "<p style=\"\"><span style=\"\">Para 1</span></p><p style=\"\"><span style=\"\">Para 2</span></p>"
    Received: "<p  style=\"\"><span  style=\"\">Para 1</span></p><p  style=\"\"><span  style=\"\">Para 2</span></p>"

      194 |       const options: HtmlConversionOptions = { wrapInDiv: false };
      195 |       const html = HtmlConverter.convertParagraphsToHtml(paragraphs, options);
    > 196 |       expect(html).toBe('<p style=""><span style="">Para 1</span></p><p style=""><span style="">Para 2</span></p>');
          |                    ^
      197 |     });
      198 |   });
      199 |

      at Object.<anonymous> (tests/__tests__/html-converter-comprehensive.test.ts:196:20)

  ● HtmlConverter - Comprehensive Test Suite › HTML Escaping › should handle null and undefined text gracefully

    expect(received).toContain(expected) // indexOf

    Expected substring: "<span style=\"\"></span>"
    Received string:    "<div  style=\"\"><p  style=\"\"><span  style=\"\"></span></p></div>"

      308 |       const options: HtmlConversionOptions = { escapeHtml: true };
      309 |       const html = HtmlConverter.convertSingleParagraphToHtml(content, options);
    > 310 |       expect(html).toContain('<span style=""></span>');
          |                    ^
      311 |     });
      312 |   });
      313 |

      at Object.<anonymous> (tests/__tests__/html-converter-comprehensive.test.ts:310:20)

  ● HtmlConverter - Comprehensive Test Suite › Edge Cases and Error Handling › should handle content with only empty text

    expect(received).toBe(expected) // Object.is equality

    Expected: "<div style=\"\"><p style=\"\"><span style=\"\"></span></p></div>"
    Received: "<div  style=\"\"><p  style=\"\"><span  style=\"\"></span></p></div>"

      448 |       
      449 |       const html = HtmlConverter.convertSingleParagraphToHtml(content);
    > 450 |       expect(html).toBe('<div style=""><p style=""><span style=""></span></p></div>');
          |                    ^
      451 |     });
      452 |
      453 |     it('should handle content with only whitespace', () => {

      at Object.<anonymous> (tests/__tests__/html-converter-comprehensive.test.ts:450:20)

  ● HtmlConverter - Comprehensive Test Suite › Edge Cases and Error Handling › should handle content with only whitespace

    expect(received).toContain(expected) // indexOf

    Expected substring: "<span style=\"\">   </span>"
    Received string:    "<div  style=\"\"><p  style=\"\"><span  style=\"\">   </span></p></div>"

      457 |       
      458 |       const html = HtmlConverter.convertSingleParagraphToHtml(content);
    > 459 |       expect(html).toContain('<span style="">   </span>');
          |                    ^
      460 |     });
      461 |
      462 |     it('should handle very long text content', () => {

      at Object.<anonymous> (tests/__tests__/html-converter-comprehensive.test.ts:459:20)

  console.error
    Warning: Received `true` for a non-boolean attribute `jsx`.
    
    If you want to write it to the DOM, pass a string instead: jsx="true" or jsx={value.toString()}.
        at style
        at div
        at MonacoJsonLoader (/Users/tanghehui/ExploreProject/pptxtojson/components/MonacoJsonLoader.tsx:25:3)

      74 |   describe('Basic Rendering', () => {
      75 |     it('renders without source', () => {
    > 76 |       render(<MonacoJsonLoader />);
         |             ^
      77 |       
      78 |       expect(screen.getByText('📋 Copy')).toBeInTheDocument();
      79 |       expect(screen.getByText('💾 Download')).toBeInTheDocument();

      at printWarning (node_modules/react-dom/cjs/react-dom.development.js:86:30)
      at error (node_modules/react-dom/cjs/react-dom.development.js:60:7)
      at validateProperty$1 (node_modules/react-dom/cjs/react-dom.development.js:3765:9)
      at warnUnknownProperties (node_modules/react-dom/cjs/react-dom.development.js:3803:21)
      at validateProperties$2 (node_modules/react-dom/cjs/react-dom.development.js:3827:3)
      at validatePropertiesInDevelopment (node_modules/react-dom/cjs/react-dom.development.js:9541:5)
      at setInitialProperties (node_modules/react-dom/cjs/react-dom.development.js:9830:5)
      at finalizeInitialChildren (node_modules/react-dom/cjs/react-dom.development.js:10950:3)
      at completeWork (node_modules/react-dom/cjs/react-dom.development.js:22232:17)
      at completeUnitOfWork (node_modules/react-dom/cjs/react-dom.development.js:26632:16)
      at performUnitOfWork (node_modules/react-dom/cjs/react-dom.development.js:26607:5)
      at workLoopSync (node_modules/react-dom/cjs/react-dom.development.js:26505:5)
      at renderRootSync (node_modules/react-dom/cjs/react-dom.development.js:26473:7)
      at performConcurrentWorkOnRoot (node_modules/react-dom/cjs/react-dom.development.js:25777:74)
      at flushActQueue (node_modules/react/cjs/react.development.js:2667:24)
      at act (node_modules/react/cjs/react.development.js:2582:11)
      at node_modules/@testing-library/react/dist/act-compat.js:47:25
      at renderRoot (node_modules/@testing-library/react/dist/pure.js:190:26)
      at render (node_modules/@testing-library/react/dist/pure.js:292:10)
      at Object.<anonymous> (tests/__tests__/monaco-json-loader.test.tsx:76:13)

FAIL tests/__tests__/text-validator-comprehensive.test.ts
  TextValidator - Comprehensive Test Suite
    hasValidText Function
      Valid Text Cases
        ✓ should return true for simple text (1 ms)
        ✓ should return true for text with special characters
        ✓ should return true for text with numbers and symbols
        ✓ should return true for text with leading/trailing whitespace but meaningful content
        ✓ should return true for HTML with text content (1 ms)
        ✓ should return true for complex HTML structures with content
        ✓ should return true for HTML with mixed content
      Invalid Text Cases
        ✓ should return false for undefined and null
        ✓ should return false for empty strings (6 ms)
        ✓ should return false for empty HTML tags
        ✓ should return false for HTML with only whitespace content
        ✓ should return false for nested empty HTML (1 ms)
        ✓ should return false for self-closing tags without content
        ✓ should return false for HTML with only structural elements
      Edge Cases
        ✓ should handle malformed HTML
        ✓ should handle HTML with attributes but no content
        ✓ should handle mixed valid and invalid content
        ✓ should handle very long strings
        ✓ should handle unicode and special characters (1 ms)
    extractTextFromHtml Function
      Basic HTML Extraction
        ✓ should extract text from simple HTML tags (27 ms)
        ✓ should extract text from nested HTML
        ✓ should handle multiple paragraphs and elements
        ✓ should handle list elements (1 ms)
        ✓ should handle table elements
      HTML Entity Decoding
        ✓ should decode common HTML entities
        ✓ should decode multiple entities in text (1 ms)
        ✓ should decode entities within HTML tags
        ✓ should handle mixed entities and regular text
        ✓ should handle non-breaking spaces
        ✓ should handle malformed entities gracefully
      Whitespace and Formatting
        ✓ should trim leading and trailing whitespace
        ✓ should preserve internal whitespace
        ✓ should handle whitespace between elements
      Complex HTML Structures
        ✓ should extract text from complex nested structures (1 ms)
        ✓ should handle HTML with attributes
        ✓ should handle self-closing tags
        ✓ should handle comments and CDATA (2 ms)
      Edge Cases and Error Handling
        ✓ should handle empty and whitespace strings
        ✕ should handle malformed HTML (1 ms)
        ✓ should handle HTML with no text content
        ✓ should handle very long HTML strings
        ✓ should handle HTML with special characters
        ✓ should handle HTML with script and style tags
      Real-world HTML Examples
        ✓ should handle PowerPoint-generated HTML
        ✓ should handle email-style HTML (1 ms)
        ✓ should handle form HTML
        ✓ should handle table data
    Integration Scenarios
      ✓ should work together for text validation workflow
      ✓ should handle PowerPoint conversion workflow

  ● TextValidator - Comprehensive Test Suite › extractTextFromHtml Function › Edge Cases and Error Handling › should handle malformed HTML

    expect(received).toBe(expected) // Object.is equality

    Expected: "brackets"
    Received: "> brackets"

      299 |         expect(extractTextFromHtml('Text <unopened tag')).toBe('Text <unopened tag');
      300 |         expect(extractTextFromHtml('<>Empty brackets</>')).toBe('Empty brackets');
    > 301 |         expect(extractTextFromHtml('<<double>> brackets')).toBe('brackets');
          |                                                            ^
      302 |       });
      303 |
      304 |       it('should handle HTML with no text content', () => {

      at Object.<anonymous> (tests/__tests__/text-validator-comprehensive.test.ts:301:60)

FAIL tests/__tests__/api-route-parse-pptx-comprehensive.test.ts
  API Route Comprehensive Tests - /api/parse-pptx
    大文件处理测试
      ✕ 应该处理大文件（10MB）的上传 (2 ms)
      ✕ 应该处理内存不足错误 (1 ms)
    并发请求处理测试
      ✕ 应该正确处理多个并发请求 (7 ms)
      ✕ 应该处理并发请求中的部分失败
    CDN存储并发测试
      ✕ 应该处理并发CDN上传 (1 ms)
    边界情况和性能测试
      ✕ 应该处理空文件
      ✕ 应该处理非常长的文件名 (13 ms)
      ✕ 应该处理解析超时 (8 ms)
    特殊URL处理测试
      ✓ 应该处理Vercel Blob URL (3 ms)
      ✓ 应该处理带查询参数的URL
    调试和日志测试
      ✕ 应该在调试模式下提供详细信息 (1 ms)
    背景格式测试
      ✕ 应该正确传递legacy背景格式 (1 ms)
      ✕ 应该正确传递pptist背景格式

  ● API Route Comprehensive Tests - /api/parse-pptx › 大文件处理测试 › 应该处理大文件（10MB）的上传

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 400

      94 |       const responseData = await response.json();
      95 |
    > 96 |       expect(response.status).toBe(200);
         |                               ^
      97 |       expect(responseData.success).toBe(true);
      98 |       expect(responseData.debug.fileSize).toBe(10 * 1024 * 1024);
      99 |     });

      at Object.<anonymous> (tests/__tests__/api-route-parse-pptx-comprehensive.test.ts:96:31)

  ● API Route Comprehensive Tests - /api/parse-pptx › 大文件处理测试 › 应该处理内存不足错误

    expect(received).toBe(expected) // Object.is equality

    Expected: 500
    Received: 400

      111 |       const responseData = await response.json();
      112 |
    > 113 |       expect(response.status).toBe(500);
          |                               ^
      114 |       expect(responseData.error).toBe("Failed to parse PPTX file");
      115 |       expect(responseData.details).toContain("not enough memory");
      116 |     });

      at Object.<anonymous> (tests/__tests__/api-route-parse-pptx-comprehensive.test.ts:113:31)

  ● API Route Comprehensive Tests - /api/parse-pptx › 并发请求处理测试 › 应该正确处理多个并发请求

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 400

      141 |       // 验证所有请求都成功
      142 |       requests.forEach((response) => {
    > 143 |         expect(response.status).toBe(200);
          |                                 ^
      144 |       });
      145 |
      146 |       // 验证解析器被调用了正确的次数

      at tests/__tests__/api-route-parse-pptx-comprehensive.test.ts:143:33
          at Array.forEach (<anonymous>)
      at Object.<anonymous> (tests/__tests__/api-route-parse-pptx-comprehensive.test.ts:142:16)

  ● API Route Comprehensive Tests - /api/parse-pptx › 并发请求处理测试 › 应该处理并发请求中的部分失败

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 400

      165 |
      166 |       // 验证第一个和第三个请求成功
    > 167 |       expect(requests[0].status).toBe(200);
          |                                  ^
      168 |       expect(requests[2].status).toBe(200);
      169 |
      170 |       // 验证第二个请求失败

      at Object.<anonymous> (tests/__tests__/api-route-parse-pptx-comprehensive.test.ts:167:34)

  ● API Route Comprehensive Tests - /api/parse-pptx › CDN存储并发测试 › 应该处理并发CDN上传

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 400

      210 |       // 验证所有请求都成功
      211 |       requests.forEach((response) => {
    > 212 |         expect(response.status).toBe(200);
          |                                 ^
      213 |       });
      214 |
      215 |       // 验证CDN上传被调用了正确的次数

      at tests/__tests__/api-route-parse-pptx-comprehensive.test.ts:212:33
          at Array.forEach (<anonymous>)
      at Object.<anonymous> (tests/__tests__/api-route-parse-pptx-comprehensive.test.ts:211:16)

  ● API Route Comprehensive Tests - /api/parse-pptx › 边界情况和性能测试 › 应该处理空文件

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 400

      230 |       const responseData = await response.json();
      231 |
    > 232 |       expect(response.status).toBe(200);
          |                               ^
      233 |       expect(responseData.debug.fileSize).toBe(0);
      234 |     });
      235 |

      at Object.<anonymous> (tests/__tests__/api-route-parse-pptx-comprehensive.test.ts:232:31)

  ● API Route Comprehensive Tests - /api/parse-pptx › 边界情况和性能测试 › 应该处理非常长的文件名

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 400

      246 |       const responseData = await response.json();
      247 |
    > 248 |       expect(response.status).toBe(200);
          |                               ^
      249 |       expect(responseData.filename).toBe(longName);
      250 |     });
      251 |

      at Object.<anonymous> (tests/__tests__/api-route-parse-pptx-comprehensive.test.ts:248:31)

  ● API Route Comprehensive Tests - /api/parse-pptx › 边界情况和性能测试 › 应该处理解析超时

    expect(received).toBe(expected) // Object.is equality

    Expected: 500
    Received: 400

      266 |       const responseData = await response.json();
      267 |
    > 268 |       expect(response.status).toBe(500);
          |                               ^
      269 |       expect(responseData.error).toBe("Failed to parse PPTX file");
      270 |       expect(responseData.details).toContain("timeout");
      271 |     });

      at Object.<anonymous> (tests/__tests__/api-route-parse-pptx-comprehensive.test.ts:268:31)

  ● API Route Comprehensive Tests - /api/parse-pptx › 调试和日志测试 › 应该在调试模式下提供详细信息

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 400

      338 |       const responseData = await response.json();
      339 |
    > 340 |       expect(response.status).toBe(200);
          |                               ^
      341 |       expect(responseData.debug.debugMode).toBe(true);
      342 |       expect(pptxParser.parseToJSON).toHaveBeenCalledWith(
      343 |         expect.any(ArrayBuffer),

      at Object.<anonymous> (tests/__tests__/api-route-parse-pptx-comprehensive.test.ts:340:31)

  ● API Route Comprehensive Tests - /api/parse-pptx › 背景格式测试 › 应该正确传递legacy背景格式

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: Any<ArrayBuffer>, ObjectContaining {"backgroundFormat": "legacy"}

    Number of calls: 0

      367 |       await POST(request);
      368 |
    > 369 |       expect(pptxParser.parseToJSON).toHaveBeenCalledWith(
          |                                      ^
      370 |         expect.any(ArrayBuffer),
      371 |         expect.objectContaining({
      372 |           backgroundFormat: "legacy",

      at Object.<anonymous> (tests/__tests__/api-route-parse-pptx-comprehensive.test.ts:369:38)

  ● API Route Comprehensive Tests - /api/parse-pptx › 背景格式测试 › 应该正确传递pptist背景格式

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: Any<ArrayBuffer>, ObjectContaining {"backgroundFormat": "pptist"}

    Number of calls: 0

      384 |       await POST(request);
      385 |
    > 386 |       expect(pptxParser.parseToJSON).toHaveBeenCalledWith(
          |                                      ^
      387 |         expect.any(ArrayBuffer),
      388 |         expect.objectContaining({
      389 |           backgroundFormat: "pptist",

      at Object.<anonymous> (tests/__tests__/api-route-parse-pptx-comprehensive.test.ts:386:38)

FAIL tests/__tests__/unit-converter-comprehensive.test.ts
  UnitConverter - Comprehensive Test Suite
    EMU to Points Conversions
      emuToPoints (with rounding)
        ✓ should convert EMU to points with default 2 decimal precision
        ✓ should handle custom precision levels (1 ms)
        ✓ should handle zero and negative values
        ✓ should handle very large values
        ✓ should handle very small values
        ✓ should handle NaN and Infinity
      emuToPointsPrecise (no rounding)
        ✓ should convert EMU to points with full precision (1 ms)
        ✓ should maintain precision for fractional EMU values
        ✓ should handle edge cases (30 ms)
      emuToPointsRounded (integer output)
        ✓ should round to nearest integer for pixel-perfect positioning
        ✕ should handle rounding edge cases (1 ms)
        ✓ should handle negative values with proper rounding
    Points to EMU Conversion
      ✓ should convert points back to EMU
      ✓ should handle fractional points
      ✓ should handle edge cases (1 ms)
      ✓ should have reasonable round-trip accuracy
    Position Tolerance Checking
      ✓ should check if values are within default tolerance
      ✓ should check with custom tolerance
      ✓ should handle zero and negative values
      ✓ should handle edge cases (1 ms)
    Position Normalization
      ✓ should normalize position values with default precision
      ✓ should normalize with custom precision
      ✓ should handle negative values
      ✓ should handle edge cases
    Angle Conversions
      ✓ should have accurate round-trip conversion for angles (4 ms)
      angleToDegreesFromEmu
        ✓ should convert PowerPoint angle units to degrees
        ✓ should handle fractional degrees
        ✓ should handle negative angles (1 ms)
        ✓ should handle angles beyond 360 degrees
      degreesToAngleEmu
        ✓ should convert degrees to PowerPoint angle units
        ✓ should handle fractional degrees
        ✓ should handle negative degrees
    Performance and Precision
      ✓ should maintain consistent precision across multiple operations (1 ms)
      ✓ should handle precision edge cases correctly

  ● UnitConverter - Comprehensive Test Suite › EMU to Points Conversions › emuToPointsRounded (integer output) › should handle rounding edge cases

    expect(received).toBe(expected) // Object.is equality

    Expected: 3
    Received: 2

      87 |         // Test cases that should round properly
      88 |         expect(UnitConverter.emuToPointsRounded(9525)).toBe(1); // Should round to 1
    > 89 |         expect(UnitConverter.emuToPointsRounded(19050)).toBe(3); // Should round to 3
         |                                                         ^
      90 |       });
      91 |
      92 |       it('should handle negative values with proper rounding', () => {

      at Object.<anonymous> (tests/__tests__/unit-converter-comprehensive.test.ts:89:57)

FAIL tests/__tests__/font-size-calculator-comprehensive.test.ts
  FontSizeCalculator - Comprehensive Test Suite
    convertPowerPointToWebSize
      Standard Conversions
        ✕ should convert typical PowerPoint font sizes correctly (6 ms)
        ✕ should handle string inputs correctly (1 ms)
        ✕ should handle decimal inputs (1 ms)
        ✓ should maintain precision with Decimal.js calculations
      Edge Cases
        ✓ should handle very small font sizes (1 ms)
        ✓ should handle very large font sizes
        ✕ should handle zero and negative values
        ✕ should handle scientific notation
        ✓ should handle very precise decimal inputs
      Rounding Behavior
        ✕ should round to 2 decimal places using ROUND_HALF_UP
        ✕ should handle exact half values consistently
        ✓ should produce consistent results for repeated calculations
      Error Handling
        ✓ should throw for invalid string inputs (17 ms)
        ✓ should throw for null and undefined inputs (2 ms)
        ✕ should handle special numeric values
    batchConvert
      ✕ should convert arrays of font sizes correctly (1 ms)
      ✕ should handle mixed string and number inputs (18 ms)
      ✓ should handle empty arrays
      ✕ should handle large arrays efficiently (7 ms)
      ✓ should propagate errors for invalid inputs in batch
    isValidSize
      Valid Inputs
        ✓ should return true for valid numeric inputs
        ✓ should return true for valid string inputs (1 ms)
        ✓ should return true for decimal values
      Invalid Inputs
        ✓ should return false for zero and negative values
        ✓ should return false for invalid string inputs
        ✓ should return false for null and undefined
        ✓ should return false for special numeric values
        ✓ should return false for objects and arrays
      Edge Cases
        ✓ should handle very small positive values
        ✓ should handle very large values
        ✓ should handle boolean values
    getScalingFactor
      ✓ should return the correct scaling factor (1 ms)
      ✓ should be consistent across multiple calls
    Mathematical Accuracy
      ✓ should maintain accuracy across the conversion formula
      ✓ should handle the complete range of typical PowerPoint sizes (29 ms)
      ✓ should produce results consistent with manual calculation
    Real-world Usage Scenarios
      ✕ should handle typical PowerPoint document processing
      ✓ should handle slide master and layout processing (1 ms)
      ✓ should handle mixed valid and invalid sizes in real documents
    Performance and Memory
      ✕ should handle large batch conversions efficiently (42 ms)
      ✓ should not leak memory with repeated operations (62 ms)

  ● FontSizeCalculator - Comprehensive Test Suite › convertPowerPointToWebSize › Standard Conversions › should convert typical PowerPoint font sizes correctly

    expect(received).toBeCloseTo(expected, precision)

    Expected: 24
    Received: 23.99

    Expected precision:    2
    Expected difference: < 0.005
    Received difference:   0.010000000000001563

      25 |         testCases.forEach(({ input, expected }) => {
      26 |           const result = FontSizeCalculator.convertPowerPointToWebSize(input);
    > 27 |           expect(result).toBeCloseTo(expected, 2);
         |                          ^
      28 |         });
      29 |       });
      30 |

      at tests/__tests__/font-size-calculator-comprehensive.test.ts:27:26
          at Array.forEach (<anonymous>)
      at Object.<anonymous> (tests/__tests__/font-size-calculator-comprehensive.test.ts:25:19)

  ● FontSizeCalculator - Comprehensive Test Suite › convertPowerPointToWebSize › Standard Conversions › should handle string inputs correctly

    expect(received).toBeCloseTo(expected, precision)

    Expected: 24
    Received: 23.99

    Expected precision:    2
    Expected difference: < 0.005
    Received difference:   0.010000000000001563

      31 |       it('should handle string inputs correctly', () => {
      32 |         expect(FontSizeCalculator.convertPowerPointToWebSize('1200')).toBeCloseTo(16.00, 2);
    > 33 |         expect(FontSizeCalculator.convertPowerPointToWebSize('1800')).toBeCloseTo(24.00, 2);
         |                                                                       ^
      34 |         expect(FontSizeCalculator.convertPowerPointToWebSize('2400')).toBeCloseTo(32.00, 2);
      35 |       });
      36 |

      at Object.<anonymous> (tests/__tests__/font-size-calculator-comprehensive.test.ts:33:71)

  ● FontSizeCalculator - Comprehensive Test Suite › convertPowerPointToWebSize › Standard Conversions › should handle decimal inputs

    expect(received).toBeCloseTo(expected, precision)

    Expected: 19.33
    Received: 19.34

    Expected precision:    2
    Expected difference: < 0.005
    Received difference:   0.010000000000001563

      37 |       it('should handle decimal inputs', () => {
      38 |         expect(FontSizeCalculator.convertPowerPointToWebSize(1250)).toBeCloseTo(16.66, 2);
    > 39 |         expect(FontSizeCalculator.convertPowerPointToWebSize('1450.5')).toBeCloseTo(19.33, 2);
         |                                                                         ^
      40 |         expect(FontSizeCalculator.convertPowerPointToWebSize(1333.33)).toBeCloseTo(17.77, 2);
      41 |       });
      42 |

      at Object.<anonymous> (tests/__tests__/font-size-calculator-comprehensive.test.ts:39:73)

  ● FontSizeCalculator - Comprehensive Test Suite › convertPowerPointToWebSize › Edge Cases › should handle zero and negative values

    expect(received).toBeCloseTo(expected, precision)

    Expected: -24
    Received: -23.99

    Expected precision:    2
    Expected difference: < 0.005
    Received difference:   0.010000000000001563

      75 |         expect(FontSizeCalculator.convertPowerPointToWebSize(0)).toBe(0);
      76 |         expect(FontSizeCalculator.convertPowerPointToWebSize(-1200)).toBeCloseTo(-16.00, 2);
    > 77 |         expect(FontSizeCalculator.convertPowerPointToWebSize('-1800')).toBeCloseTo(-24.00, 2);
         |                                                                        ^
      78 |       });
      79 |
      80 |       it('should handle scientific notation', () => {

      at Object.<anonymous> (tests/__tests__/font-size-calculator-comprehensive.test.ts:77:72)

  ● FontSizeCalculator - Comprehensive Test Suite › convertPowerPointToWebSize › Edge Cases › should handle scientific notation

    expect(received).toBeCloseTo(expected, precision)

    Expected: 24
    Received: 23.99

    Expected precision:    2
    Expected difference: < 0.005
    Received difference:   0.010000000000001563

      80 |       it('should handle scientific notation', () => {
      81 |         expect(FontSizeCalculator.convertPowerPointToWebSize('1.2e3')).toBeCloseTo(16.00, 2);
    > 82 |         expect(FontSizeCalculator.convertPowerPointToWebSize('1.8e3')).toBeCloseTo(24.00, 2);
         |                                                                        ^
      83 |         expect(FontSizeCalculator.convertPowerPointToWebSize(1.5e4)).toBeCloseTo(199.95, 2);
      84 |       });
      85 |

      at Object.<anonymous> (tests/__tests__/font-size-calculator-comprehensive.test.ts:82:72)

  ● FontSizeCalculator - Comprehensive Test Suite › convertPowerPointToWebSize › Rounding Behavior › should round to 2 decimal places using ROUND_HALF_UP

    expect(received).toBe(expected) // Object.is equality

    Expected: 16.07
    Received: 16.06

      103 |         roundingCases.forEach(({ input, expected }) => {
      104 |           const result = FontSizeCalculator.convertPowerPointToWebSize(input);
    > 105 |           expect(result).toBe(expected);
          |                          ^
      106 |         });
      107 |       });
      108 |

      at tests/__tests__/font-size-calculator-comprehensive.test.ts:105:26
          at Array.forEach (<anonymous>)
      at Object.<anonymous> (tests/__tests__/font-size-calculator-comprehensive.test.ts:103:23)

  ● FontSizeCalculator - Comprehensive Test Suite › convertPowerPointToWebSize › Rounding Behavior › should handle exact half values consistently

    expect(received).toBeCloseTo(expected, precision)

    Expected: 25
    Received: 24.99

    Expected precision:    2
    Expected difference: < 0.005
    Received difference:   0.010000000000001563

      116 |         halfValueCases.forEach(({ input, expected }) => {
      117 |           const result = FontSizeCalculator.convertPowerPointToWebSize(input);
    > 118 |           expect(result).toBeCloseTo(expected, 2);
          |                          ^
      119 |         });
      120 |       });
      121 |

      at tests/__tests__/font-size-calculator-comprehensive.test.ts:118:26
          at Array.forEach (<anonymous>)
      at Object.<anonymous> (tests/__tests__/font-size-calculator-comprehensive.test.ts:116:24)

  ● FontSizeCalculator - Comprehensive Test Suite › convertPowerPointToWebSize › Error Handling › should handle special numeric values

    expect(received).toThrow()

    Received function did not throw

      145 |
      146 |       it('should handle special numeric values', () => {
    > 147 |         expect(() => FontSizeCalculator.convertPowerPointToWebSize(NaN)).toThrow();
          |                                                                          ^
      148 |         expect(() => FontSizeCalculator.convertPowerPointToWebSize(Infinity)).toThrow();
      149 |         expect(() => FontSizeCalculator.convertPowerPointToWebSize(-Infinity)).toThrow();
      150 |       });

      at Object.<anonymous> (tests/__tests__/font-size-calculator-comprehensive.test.ts:147:74)

  ● FontSizeCalculator - Comprehensive Test Suite › batchConvert › should convert arrays of font sizes correctly

    expect(received).toBeCloseTo(expected, precision)

    Expected: 24
    Received: 23.99

    Expected precision:    2
    Expected difference: < 0.005
    Received difference:   0.010000000000001563

      161 |       expect(results[1]).toBeCloseTo(18.66, 2);
      162 |       expect(results[2]).toBeCloseTo(21.33, 2);
    > 163 |       expect(results[3]).toBeCloseTo(24.00, 2);
          |                          ^
      164 |     });
      165 |
      166 |     it('should handle mixed string and number inputs', () => {

      at Object.<anonymous> (tests/__tests__/font-size-calculator-comprehensive.test.ts:163:26)

  ● FontSizeCalculator - Comprehensive Test Suite › batchConvert › should handle mixed string and number inputs

    expect(received).toBeCloseTo(expected, precision)

    Expected: 24
    Received: 23.99

    Expected precision:    2
    Expected difference: < 0.005
    Received difference:   0.010000000000001563

      172 |       expect(results[1]).toBeCloseTo(18.66, 2);
      173 |       expect(results[2]).toBeCloseTo(21.33, 2);
    > 174 |       expect(results[3]).toBeCloseTo(24.00, 2);
          |                          ^
      175 |     });
      176 |
      177 |     it('should handle empty arrays', () => {

      at Object.<anonymous> (tests/__tests__/font-size-calculator-comprehensive.test.ts:174:26)

  ● FontSizeCalculator - Comprehensive Test Suite › batchConvert › should handle large arrays efficiently

    expect(received).toBeCloseTo(expected, precision)

    Expected: 29.33
    Received: 29.31

    Expected precision:    2
    Expected difference: < 0.005
    Received difference:   0.019999999999999574

      189 |       expect(endTime - startTime).toBeLessThan(100); // Should be fast
      190 |       expect(results[0]).toBeCloseTo(16.00, 2);
    > 191 |       expect(results[999]).toBeCloseTo(29.33, 2);
          |                            ^
      192 |     });
      193 |
      194 |     it('should propagate errors for invalid inputs in batch', () => {

      at Object.<anonymous> (tests/__tests__/font-size-calculator-comprehensive.test.ts:191:28)

  ● FontSizeCalculator - Comprehensive Test Suite › Real-world Usage Scenarios › should handle typical PowerPoint document processing

    expect(received).toBeCloseTo(expected, precision)

    Expected: 32
    Received: 31.99

    Expected precision:    2
    Expected difference: < 0.005
    Received difference:   0.010000000000001563

      354 |       expect(convertedSizes[0]).toBeCloseTo(16.00, 2);  // 12pt -> 16px
      355 |       expect(convertedSizes[1]).toBeCloseTo(18.66, 2);  // 14pt -> 18.66px
    > 356 |       expect(convertedSizes[4]).toBeCloseTo(32.00, 2);  // 24pt -> 32px
          |                                 ^
      357 |       expect(convertedSizes[6]).toBeCloseTo(48.00, 2);  // 36pt -> 48px
      358 |       
      359 |       // All should be valid sizes

      at Object.<anonymous> (tests/__tests__/font-size-calculator-comprehensive.test.ts:356:33)

  ● FontSizeCalculator - Comprehensive Test Suite › Performance and Memory › should handle large batch conversions efficiently

    expect(received).toBeCloseTo(expected, precision)

    Expected: 80
    Received: 79.97

    Expected precision:    2
    Expected difference: < 0.005
    Received difference:   0.030000000000001137

      416 |       // Verify some results
      417 |       expect(results[0]).toBeCloseTo(13.33, 2);      // 1000 -> 13.33
    > 418 |       expect(results[4999]).toBeCloseTo(80.00, 2);   // 5999 -> 80.00
          |                             ^
      419 |       expect(results[9999]).toBeCloseTo(146.66, 2);  // 10999 -> 146.66
      420 |     });
      421 |

      at Object.<anonymous> (tests/__tests__/font-size-calculator-comprehensive.test.ts:418:29)

  console.log
    Loading JSON from URL: https://example.com/test.json

      at loadJson (components/MonacoJsonLoader.tsx:47:19)

  console.log
    Attempt 1/3 to fetch JSON from CDN

      at fetchWithTimeout (components/MonacoJsonLoader.tsx:53:25)

  console.log
    Loading JSON file: 0.00MB

      at loadJson (components/MonacoJsonLoader.tsx:107:19)

FAIL tests/__tests__/color-utils-comprehensive.test.ts
  ColorUtils - Comprehensive Test Suite
    toRgba - Color Format Normalization
      Hex Color Conversion
        ✓ should convert 6-digit hex colors to rgba (1 ms)
        ✓ should convert 3-digit hex colors to rgba
        ✓ should convert 8-digit hex colors with alpha to rgba
        ✕ should handle hex colors without # prefix
        ✕ should handle invalid hex colors (1 ms)
        ✓ should handle lowercase hex colors
      RGB Color Conversion
        ✓ should convert rgb colors to rgba
        ✓ should handle rgb colors with spaces
        ✕ should handle malformed rgb with alpha (1 ms)
        ✕ should handle invalid rgb colors
      RGBA Color Normalization
        ✓ should normalize valid rgba colors
        ✓ should handle rgba with spaces
        ✓ should handle rgba with float RGB values (1 ms)
        ✓ should handle malformed rgba without alpha (13 ms)
        ✓ should handle case-insensitive rgba
        ✓ should format alpha values correctly
      Special Color Values
        ✓ should handle transparent and none values (1 ms)
        ✓ should handle undefined, null, and empty values
        ✓ should handle invalid color formats
    Color Integer Conversion
      ✓ should convert color integers to rgba (13 ms)
      ✓ should handle alpha values for integer colors (1 ms)
      ✓ should handle edge cases for integer colors
    HSL Color Conversion
      ✕ should maintain round-trip accuracy between RGB and HSL
      rgbToHsl
        ✓ should convert RGB to HSL correctly
        ✓ should handle grayscale colors (4 ms)
        ✓ should handle mixed colors (2 ms)
      hslToRgb
        ✓ should convert HSL to RGB correctly (1 ms)
        ✓ should handle grayscale colors
        ✕ should handle mixed colors (1 ms)
    Color Transformations
      applyLuminanceMod
        ✓ should apply luminance modification correctly
        ✓ should handle boundary values
        ✓ should preserve alpha channel
      applyLuminanceOff
        ✓ should apply luminance offset correctly
        ✓ should clamp values to valid range
      applyShade
        ✓ should apply shade transformation (darker) (1 ms)
        ✓ should handle boundary values
        ✓ should clamp factor to valid range
      applyTint
        ✓ should apply tint transformation (lighter)
        ✓ should handle boundary values
        ✓ should clamp factor to valid range
      applySatMod
        ✓ should apply saturation modification
        ✓ should handle boundary values
      applyHueMod
        ✓ should apply hue modification
        ✓ should handle wrap-around hue values
      applyAlpha
        ✓ should apply alpha transparency
        ✓ should clamp alpha to valid range
    Preset Colors
      ✓ should get standard preset colors
      ✓ should handle case-sensitive preset color names (1 ms)
      ✕ should get extended preset colors
      ✓ should handle both gray and grey variants
      ✓ should return null for invalid preset colors
    Utility Functions
      toHex
        ✓ should convert values to hex format
        ✓ should handle out-of-range values
        ✓ should handle fractional values
    Error Handling and Edge Cases
      ✓ should handle null and undefined colors gracefully
      ✓ should handle empty and whitespace-only strings
      ✓ should handle malformed color strings
      ✕ should handle invalid transformations gracefully

  ● ColorUtils - Comprehensive Test Suite › toRgba - Color Format Normalization › Hex Color Conversion › should handle hex colors without # prefix

    expect(received).toBe(expected) // Object.is equality

    Expected: "rgba(255,0,0,1)"
    Received: "rgba(0,0,0,1)"

      33 |
      34 |       it('should handle hex colors without # prefix', () => {
    > 35 |         expect(ColorUtils.toRgba('FF0000')).toBe('rgba(255,0,0,1)');
         |                                             ^
      36 |         expect(ColorUtils.toRgba('00FF00')).toBe('rgba(0,255,0,1)');
      37 |         expect(ColorUtils.toRgba('F00')).toBe('rgba(255,0,0,1)');
      38 |       });

      at Object.<anonymous> (tests/__tests__/color-utils-comprehensive.test.ts:35:45)

  ● ColorUtils - Comprehensive Test Suite › toRgba - Color Format Normalization › Hex Color Conversion › should handle invalid hex colors

    expect(received).toBe(expected) // Object.is equality

    Expected: "rgba(0,0,0,1)"
    Received: "rgba(18,52,5,1)"

      40 |       it('should handle invalid hex colors', () => {
      41 |         expect(ColorUtils.toRgba('#GGGGGG')).toBe('rgba(0,0,0,1)');
    > 42 |         expect(ColorUtils.toRgba('#12345')).toBe('rgba(0,0,0,1)');
         |                                             ^
      43 |         expect(ColorUtils.toRgba('#XXXXXXXXX')).toBe('rgba(0,0,0,1)');
      44 |       });
      45 |

      at Object.<anonymous> (tests/__tests__/color-utils-comprehensive.test.ts:42:45)

  ● ColorUtils - Comprehensive Test Suite › toRgba - Color Format Normalization › RGB Color Conversion › should handle malformed rgb with alpha

    expect(received).toBe(expected) // Object.is equality

    Expected: "rgba(255,0,0,0.5)"
    Received: "rgba(0,0,0,1)"

      66 |
      67 |       it('should handle malformed rgb with alpha', () => {
    > 68 |         expect(ColorUtils.toRgba('rgb(255,0,0,0.5)')).toBe('rgba(255,0,0,0.5)');
         |                                                       ^
      69 |         expect(ColorUtils.toRgba('rgb(255,0,0,1)')).toBe('rgba(255,0,0,1)');
      70 |         expect(ColorUtils.toRgba('rgb(255,0,0,0)')).toBe('rgba(255,0,0,0)');
      71 |       });

      at Object.<anonymous> (tests/__tests__/color-utils-comprehensive.test.ts:68:55)

  ● ColorUtils - Comprehensive Test Suite › toRgba - Color Format Normalization › RGB Color Conversion › should handle invalid rgb colors

    expect(received).toBe(expected) // Object.is equality

    Expected: "rgba(-1,0,0,1)"
    Received: "rgba(0,0,0,1)"

      73 |       it('should handle invalid rgb colors', () => {
      74 |         expect(ColorUtils.toRgba('rgb(256,0,0)')).toBe('rgba(256,0,0,1)');
    > 75 |         expect(ColorUtils.toRgba('rgb(-1,0,0)')).toBe('rgba(-1,0,0,1)');
         |                                                  ^
      76 |         expect(ColorUtils.toRgba('rgb(a,b,c)')).toBe('rgba(0,0,0,1)');
      77 |       });
      78 |     });

      at Object.<anonymous> (tests/__tests__/color-utils-comprehensive.test.ts:75:50)

  ● ColorUtils - Comprehensive Test Suite › HSL Color Conversion › hslToRgb › should handle mixed colors

    expect(received).toBeCloseTo(expected, precision)

    Expected: 128
    Received: 127

    Expected precision:    0
    Expected difference: < 0.5
    Received difference:   1

      195 |       it('should handle mixed colors', () => {
      196 |         const rgb = ColorUtils.hslToRgb(0.75, 0.5, 0.5);
    > 197 |         expect(rgb.r).toBeCloseTo(128, 0);
          |                       ^
      198 |         expect(rgb.g).toBeCloseTo(64, 0);
      199 |         expect(rgb.b).toBeCloseTo(192, 0);
      200 |       });

      at Object.<anonymous> (tests/__tests__/color-utils-comprehensive.test.ts:197:23)

  ● ColorUtils - Comprehensive Test Suite › HSL Color Conversion › should maintain round-trip accuracy between RGB and HSL

    expect(received).toBeCloseTo(expected, precision)

    Expected: 127.5
    Received: 128

    Expected precision:    0
    Expected difference: < 0.5
    Received difference:   0.5

      211 |         const hsl = ColorUtils.rgbToHsl(r, g, b);
      212 |         const rgb = ColorUtils.hslToRgb(hsl.h, hsl.s, hsl.l);
    > 213 |         expect(rgb.r).toBeCloseTo(r * 255, 0);
          |                       ^
      214 |         expect(rgb.g).toBeCloseTo(g * 255, 0);
      215 |         expect(rgb.b).toBeCloseTo(b * 255, 0);
      216 |       });

      at tests/__tests__/color-utils-comprehensive.test.ts:213:23
          at Array.forEach (<anonymous>)
      at Object.<anonymous> (tests/__tests__/color-utils-comprehensive.test.ts:210:18)

  ● ColorUtils - Comprehensive Test Suite › Preset Colors › should get extended preset colors

    expect(received).toBe(expected) // Object.is equality

    Expected: "#C71585"
    Received: null

      403 |       expect(ColorUtils.getPresetColor('aliceBlue')).toBe('#F0F8FF');
      404 |       expect(ColorUtils.getPresetColor('antiqueWhite')).toBe('#FAEBD7');
    > 405 |       expect(ColorUtils.getPresetColor('mediumVioletRed')).toBe('#C71585');
          |                                                            ^
      406 |       expect(ColorUtils.getPresetColor('darkSlateGray')).toBe('#2F4F4F');
      407 |     });
      408 |

      at Object.<anonymous> (tests/__tests__/color-utils-comprehensive.test.ts:405:60)

  ● ColorUtils - Comprehensive Test Suite › Error Handling and Edge Cases › should handle invalid transformations gracefully

    expect(received).toBe(expected) // Object.is equality

    Expected: "invalid"
    Received: "rgba(0,0,0,1)"

      464 |
      465 |     it('should handle invalid transformations gracefully', () => {
    > 466 |       expect(ColorUtils.applyShade('invalid', 0.5)).toBe('invalid');
          |                                                     ^
      467 |       expect(ColorUtils.applyTint('invalid', 0.5)).toBe('invalid');
      468 |       expect(ColorUtils.applyAlpha('invalid', 0.5)).toBe('invalid');
      469 |     });

      at Object.<anonymous> (tests/__tests__/color-utils-comprehensive.test.ts:466:53)

  console.log
    Loading JSON from URL: https://example.com/test.json

      at loadJson (components/MonacoJsonLoader.tsx:47:19)

  console.log
    Attempt 1/3 to fetch JSON from CDN

      at fetchWithTimeout (components/MonacoJsonLoader.tsx:53:25)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    Loading JSON from URL: https://example.com/test.json

      at loadJson (components/MonacoJsonLoader.tsx:47:19)

  console.log
    Attempt 1/3 to fetch JSON from CDN

      at fetchWithTimeout (components/MonacoJsonLoader.tsx:53:25)

  console.warn
    Fetch attempt 1 failed: Error: Network error
        at Object.<anonymous> (/Users/tanghehui/ExploreProject/pptxtojson/tests/__tests__/monaco-json-loader.test.tsx:166:35)
        at Promise.finally.completed (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1559:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1499:10)
        at _callCircusTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1009:40)
        at _runTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:949:3)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:839:13)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
        at run (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:757:3)
        at runAndTransformResultsToJestFormat (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1920:21)
        at jestAdapter (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/runner.js:101:19)
        at runTestInternal (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:272:16)
        at runTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:340:7)
        at Object.worker (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:494:12)

      73 |                 return response;
      74 |               } catch (error) {
    > 75 |                 console.warn(`Fetch attempt ${attempt} failed:`, error);
         |                         ^
      76 |                 
      77 |                 if (attempt === retries) {
      78 |                   // 为超时错误提供更详细的信息

      at fetchWithTimeout (components/MonacoJsonLoader.tsx:75:25)
      at loadJson (components/MonacoJsonLoader.tsx:100:28)

  console.log
    Retrying in 1000ms...

      at fetchWithTimeout (components/MonacoJsonLoader.tsx:93:25)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.error
    Warning: Received `true` for a non-boolean attribute `jsx`.
    
    If you want to write it to the DOM, pass a string instead: jsx="true" or jsx={value.toString()}.
        at style
        at div
        at MonacoJsonLoader (/Users/tanghehui/ExploreProject/pptxtojson/components/MonacoJsonLoader.tsx:25:3)

      37 |       };
      38 |
    > 39 |       render(<MonacoJsonLoader source={source} />);
         |             ^
      40 |
      41 |       // Should show loading state
      42 |       expect(screen.getByText(/Downloading/)).toBeInTheDocument();

      at printWarning (node_modules/react-dom/cjs/react-dom.development.js:86:30)
      at error (node_modules/react-dom/cjs/react-dom.development.js:60:7)
      at validateProperty$1 (node_modules/react-dom/cjs/react-dom.development.js:3765:9)
      at warnUnknownProperties (node_modules/react-dom/cjs/react-dom.development.js:3803:21)
      at validateProperties$2 (node_modules/react-dom/cjs/react-dom.development.js:3827:3)
      at validatePropertiesInDevelopment (node_modules/react-dom/cjs/react-dom.development.js:9541:5)
      at setInitialProperties (node_modules/react-dom/cjs/react-dom.development.js:9830:5)
      at finalizeInitialChildren (node_modules/react-dom/cjs/react-dom.development.js:10950:3)
      at completeWork (node_modules/react-dom/cjs/react-dom.development.js:22232:17)
      at completeUnitOfWork (node_modules/react-dom/cjs/react-dom.development.js:26632:16)
      at performUnitOfWork (node_modules/react-dom/cjs/react-dom.development.js:26607:5)
      at workLoopSync (node_modules/react-dom/cjs/react-dom.development.js:26505:5)
      at renderRootSync (node_modules/react-dom/cjs/react-dom.development.js:26473:7)
      at performConcurrentWorkOnRoot (node_modules/react-dom/cjs/react-dom.development.js:25777:74)
      at flushActQueue (node_modules/react/cjs/react.development.js:2667:24)
      at act (node_modules/react/cjs/react.development.js:2582:11)
      at node_modules/@testing-library/react/dist/act-compat.js:47:25
      at renderRoot (node_modules/@testing-library/react/dist/pure.js:190:26)
      at render (node_modules/@testing-library/react/dist/pure.js:292:10)
      at Object.<anonymous> (tests/__tests__/monaco-json-loader-large-files.test.tsx:39:13)

  console.log
    Loading JSON from URL: https://example.com/large-file.json

      at loadJson (components/MonacoJsonLoader.tsx:47:19)

  console.log
    Attempt 1/3 to fetch JSON from CDN

      at fetchWithTimeout (components/MonacoJsonLoader.tsx:53:25)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    Loading JSON file: 15.00MB

      at loadJson (components/MonacoJsonLoader.tsx:107:19)

  console.log
    🔄 Using optimized loading for large file...

      at loadJson (components/MonacoJsonLoader.tsx:112:21)

  console.log
    ✅ Large file loaded successfully (minimized format)

      at loadJson (components/MonacoJsonLoader.tsx:143:21)

  console.log
    📊 Performance note: File size is 15.00MB. For better performance with large files, consider:
                - Using JSONLoader in view-only mode
                - Breaking large files into smaller chunks
                - Using streaming JSON processing

      at loadJson (components/MonacoJsonLoader.tsx:155:21)

  console.log
    性能测试结果: 145ms, 内存增长: 1MB

      at Object.<anonymous> (tests/__tests__/performance-reliability-comprehensive.test.ts:131:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    大型演示文稿测试: 100个元素, 8ms, 内存: 0MB

      at Object.<anonymous> (tests/__tests__/performance-reliability-comprehensive.test.ts:198:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.error
    Warning: Received `true` for a non-boolean attribute `jsx`.
    
    If you want to write it to the DOM, pass a string instead: jsx="true" or jsx={value.toString()}.
        at style
        at FileUploader (/Users/tanghehui/ExploreProject/pptxtojson/components/FileUploader.tsx:10:32)

      19 |   describe('Basic Rendering', () => {
      20 |     it('renders upload button with correct text when not loading', () => {
    > 21 |       render(<FileUploader onFileUpload={mockOnFileUpload} loading={false} />);
         |             ^
      22 |       
      23 |       const button = screen.getByRole('button');
      24 |       expect(button).toBeInTheDocument();

      at printWarning (node_modules/react-dom/cjs/react-dom.development.js:86:30)
      at error (node_modules/react-dom/cjs/react-dom.development.js:60:7)
      at validateProperty$1 (node_modules/react-dom/cjs/react-dom.development.js:3765:9)
      at warnUnknownProperties (node_modules/react-dom/cjs/react-dom.development.js:3803:21)
      at validateProperties$2 (node_modules/react-dom/cjs/react-dom.development.js:3827:3)
      at validatePropertiesInDevelopment (node_modules/react-dom/cjs/react-dom.development.js:9541:5)
      at setInitialProperties (node_modules/react-dom/cjs/react-dom.development.js:9830:5)
      at finalizeInitialChildren (node_modules/react-dom/cjs/react-dom.development.js:10950:3)
      at completeWork (node_modules/react-dom/cjs/react-dom.development.js:22232:17)
      at completeUnitOfWork (node_modules/react-dom/cjs/react-dom.development.js:26632:16)
      at performUnitOfWork (node_modules/react-dom/cjs/react-dom.development.js:26607:5)
      at workLoopSync (node_modules/react-dom/cjs/react-dom.development.js:26505:5)
      at renderRootSync (node_modules/react-dom/cjs/react-dom.development.js:26473:7)
      at performConcurrentWorkOnRoot (node_modules/react-dom/cjs/react-dom.development.js:25777:74)
      at flushActQueue (node_modules/react/cjs/react.development.js:2667:24)
      at act (node_modules/react/cjs/react.development.js:2582:11)
      at node_modules/@testing-library/react/dist/act-compat.js:47:25
      at renderRoot (node_modules/@testing-library/react/dist/pure.js:190:26)
      at render (node_modules/@testing-library/react/dist/pure.js:292:10)
      at Object.<anonymous> (tests/__tests__/file-uploader.test.tsx:21:13)

  console.log
    Loading JSON from URL: https://example.com/very-large.json

      at loadJson (components/MonacoJsonLoader.tsx:47:19)

  console.log
    Attempt 1/3 to fetch JSON from CDN

      at fetchWithTimeout (components/MonacoJsonLoader.tsx:53:25)

  console.log
    Loading JSON file: 20.00MB

      at loadJson (components/MonacoJsonLoader.tsx:107:19)

  console.log
    🔄 Using optimized loading for large file...

      at loadJson (components/MonacoJsonLoader.tsx:112:21)

  console.log
    ✅ Large file loaded successfully (minimized format)

      at loadJson (components/MonacoJsonLoader.tsx:143:21)

  console.log
    📊 Performance note: File size is 20.00MB. For better performance with large files, consider:
                - Using JSONLoader in view-only mode
                - Breaking large files into smaller chunks
                - Using streaming JSON processing

      at loadJson (components/MonacoJsonLoader.tsx:155:21)

  console.log
    Loading JSON from URL: https://example.com/slow-file.json

      at loadJson (components/MonacoJsonLoader.tsx:47:19)

  console.log
    Attempt 1/3 to fetch JSON from CDN

      at fetchWithTimeout (components/MonacoJsonLoader.tsx:53:25)

  console.error
    Warning: Received `true` for a non-boolean attribute `global`.
    
    If you want to write it to the DOM, pass a string instead: global="true" or global={value.toString()}.
        at style
        at FileUploader (/Users/tanghehui/ExploreProject/pptxtojson/components/FileUploader.tsx:10:32)

      19 |   describe('Basic Rendering', () => {
      20 |     it('renders upload button with correct text when not loading', () => {
    > 21 |       render(<FileUploader onFileUpload={mockOnFileUpload} loading={false} />);
         |             ^
      22 |       
      23 |       const button = screen.getByRole('button');
      24 |       expect(button).toBeInTheDocument();

      at printWarning (node_modules/react-dom/cjs/react-dom.development.js:86:30)
      at error (node_modules/react-dom/cjs/react-dom.development.js:60:7)
      at validateProperty$1 (node_modules/react-dom/cjs/react-dom.development.js:3765:9)
      at warnUnknownProperties (node_modules/react-dom/cjs/react-dom.development.js:3803:21)
      at validateProperties$2 (node_modules/react-dom/cjs/react-dom.development.js:3827:3)
      at validatePropertiesInDevelopment (node_modules/react-dom/cjs/react-dom.development.js:9541:5)
      at setInitialProperties (node_modules/react-dom/cjs/react-dom.development.js:9830:5)
      at finalizeInitialChildren (node_modules/react-dom/cjs/react-dom.development.js:10950:3)
      at completeWork (node_modules/react-dom/cjs/react-dom.development.js:22232:17)
      at completeUnitOfWork (node_modules/react-dom/cjs/react-dom.development.js:26632:16)
      at performUnitOfWork (node_modules/react-dom/cjs/react-dom.development.js:26607:5)
      at workLoopSync (node_modules/react-dom/cjs/react-dom.development.js:26505:5)
      at renderRootSync (node_modules/react-dom/cjs/react-dom.development.js:26473:7)
      at performConcurrentWorkOnRoot (node_modules/react-dom/cjs/react-dom.development.js:25777:74)
      at flushActQueue (node_modules/react/cjs/react.development.js:2667:24)
      at act (node_modules/react/cjs/react.development.js:2582:11)
      at node_modules/@testing-library/react/dist/act-compat.js:47:25
      at renderRoot (node_modules/@testing-library/react/dist/pure.js:190:26)
      at render (node_modules/@testing-library/react/dist/pure.js:292:10)
      at Object.<anonymous> (tests/__tests__/file-uploader.test.tsx:21:13)

  console.log
    并发效率测试: 5个任务, 122ms, 内存: -4MB

      at Object.<anonymous> (tests/__tests__/performance-reliability-comprehensive.test.ts:246:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.warn
    Fetch attempt 1 failed: Error [AbortError]: Request timeout
        at /Users/tanghehui/ExploreProject/pptxtojson/tests/__tests__/monaco-json-loader-large-files.test.tsx:126:27
        at Timeout.task [as _onTimeout] (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jsdom/lib/jsdom/browser/Window.js:579:19)
        at listOnTimeout (node:internal/timers:573:17)
        at processTimers (node:internal/timers:514:7)

      73 |                 return response;
      74 |               } catch (error) {
    > 75 |                 console.warn(`Fetch attempt ${attempt} failed:`, error);
         |                         ^
      76 |                 
      77 |                 if (attempt === retries) {
      78 |                   // 为超时错误提供更详细的信息

      at fetchWithTimeout (components/MonacoJsonLoader.tsx:75:25)
      at loadJson (components/MonacoJsonLoader.tsx:100:28)

  console.log
    Retrying in 1000ms...

      at fetchWithTimeout (components/MonacoJsonLoader.tsx:93:25)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.error
    ❌ PPTXImageProcessor error: Error: Input buffer contains unsupported image format
        at Sharp.metadata (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/sharp/lib/input.js:549:17)
        at PPTXImageProcessor.applyStretchOffset (/Users/tanghehui/ExploreProject/pptxtojson/app/lib/services/images/PPTXImageProcessor.ts:138:36)
        at Object.<anonymous> (/Users/tanghehui/ExploreProject/pptxtojson/tests/__tests__/pptx-image-processor-comprehensive.test.ts:278:30)
        at Promise.finally.completed (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1559:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1499:10)
        at _callCircusTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1009:40)
        at _runTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:949:3)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:839:13)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
        at run (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:757:3)
        at runAndTransformResultsToJestFormat (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1920:21)
        at jestAdapter (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/runner.js:101:19)
        at runTestInternal (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:272:16)
        at runTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:340:7)
        at Object.worker (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:494:12)

      262 |       };
      263 |     } catch (error) {
    > 264 |       console.error("❌ PPTXImageProcessor error:", error);
          |               ^
      265 |       throw new Error(
      266 |         `Image processing failed: ${
      267 |           error instanceof Error ? error.message : "Unknown error"

      at PPTXImageProcessor.applyStretchOffset (app/lib/services/images/PPTXImageProcessor.ts:264:15)
      at Object.<anonymous> (tests/__tests__/pptx-image-processor-comprehensive.test.ts:278:7)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

PASS tests/__tests__/pptx-image-processor-comprehensive.test.ts
  PPTXImageProcessor 综合测试
    复杂拉伸场景测试
      ✓ 应该处理极端拉伸比例（超过200%缩放） (52 ms)
      ✓ 应该处理微小拉伸值（0.001级别精度） (16 ms)
      ✓ 应该处理混合srcRect裁剪+fillRect拉伸的复合变换 (13 ms)
      ✓ 应该处理不规则长宽比转换（16:9 → 1:1） (44 ms)
    性能和内存测试
      ✓ 应该处理大尺寸图片（4K+）而不出现内存泄漏 (183 ms)
      ✓ 应该在并发处理多张图片时保持稳定性 (20 ms)
      ✓ 应该正确释放Sharp实例资源 (88 ms)
    边界和异常处理
      ✓ 应该处理图片处理过程中的Sharp异常 (15 ms)
      ✓ 应该处理配置参数边界值 (8 ms)
      ✓ 应该处理极端的fillRect值组合 (6 ms)
    createConfigFromStretchInfo 静态方法测试
      ✓ 应该正确创建复杂的配置对象 (2 ms)
      ✓ 应该处理不完整的stretchInfo (1 ms)

PASS tests/__tests__/file-uploader.test.tsx
  FileUploader Component
    Basic Rendering
      ✓ renders upload button with correct text when not loading (182 ms)
      ✓ renders loading state correctly (8 ms)
      ✓ displays file size limit message (3 ms)
    File Input Behavior
      ✓ has hidden file input with correct accept attribute (11 ms)
      ✓ triggers file input click when button is clicked (66 ms)
      ✓ does not trigger file input when loading (15 ms)
    File Upload Handling
      ✓ calls onFileUpload when a file is selected (11 ms)
      ✓ does not call onFileUpload when no file is selected (5 ms)
      ✓ handles multiple file selection (takes first file) (4 ms)
      ✓ clears file input value before new selection (20 ms)
    Styling and Visual States
      ✓ applies correct button styles when not loading (3 ms)
      ✓ applies correct button styles when loading (9 ms)
      ✓ shows spinner animation when loading (4 ms)
      ✓ centers content properly (4 ms)
    Accessibility
      ✓ button is keyboard accessible (33 ms)
      ✓ disabled state prevents keyboard activation (40 ms)
      ✓ file input is properly hidden from screen readers (4 ms)
    Edge Cases
      ✓ handles rapid button clicks gracefully (35 ms)
      ✓ handles file with invalid type gracefully (6 ms)
      ✓ handles null files array (4 ms)
    Component Lifecycle
      ✓ maintains ref across re-renders (7 ms)
      ✓ updates loading state dynamically (6 ms)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    🔧 PPTXImageProcessor: Processing image 1600x1067

      at PPTXImageProcessor.applyStretchOffset (app/lib/services/images/PPTXImageProcessor.ts:148:17)

  console.log
    📐 Container size: 1349.9629058834726x759.2916345610157

      at PPTXImageProcessor.applyStretchOffset (app/lib/services/images/PPTXImageProcessor.ts:151:17)

  console.log
    📍 FillRect offsets: { left: -0.04881, top: 0.06029, right: 0.30709, bottom: 0.06029 }

      at PPTXImageProcessor.applyStretchOffset (app/lib/services/images/PPTXImageProcessor.ts:152:17)

  console.log
    ✅ PPTX uploaded to CDN: https://test-cdn.vercel-storage.com/test-123.pptx

      at handleFileChange (components/CdnFileUploader.tsx:84:19)

  console.log
    ✅ PPTX uploaded to CDN: https://test-cdn.vercel-storage.com/test-123.pptx

      at handleFileChange (components/CdnFileUploader.tsx:84:19)

  console.error
    Error uploading PPTX to CDN: Error: CDN upload failed
        at Object.<anonymous> (/Users/tanghehui/ExploreProject/pptxtojson/tests/__tests__/cdn-file-uploader.test.tsx:225:32)
        at Promise.finally.completed (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1559:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1499:10)
        at _callCircusTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1009:40)
        at _runTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:949:3)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:839:13)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
        at run (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:757:3)
        at runAndTransformResultsToJestFormat (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1920:21)
        at jestAdapter (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/runner.js:101:19)
        at runTestInternal (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:272:16)
        at runTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:340:7)
        at Object.worker (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:494:12)

      109 |           }
      110 |         } catch (error) {
    > 111 |           console.error("Error uploading PPTX to CDN:", error);
          |                   ^
      112 |           alert(`Failed to upload PPTX to CDN: ${error instanceof Error ? error.message : String(error)}`);
      113 |         } finally {
      114 |           setUploadingToCdn(false);

      at handleFileChange (components/CdnFileUploader.tsx:111:19)

  console.log
    💾 Debug image saved: debug-images/image-1-original-2025-07-04T00-05-22-181Z.png

      at PPTXImageProcessor.saveDebugImage (app/lib/services/images/PPTXImageProcessor.ts:659:15)

  console.log
    📄 Metadata saved: debug-images/image-1-original-2025-07-04T00-05-22-181Z.json

      at PPTXImageProcessor.saveDebugImage (app/lib/services/images/PPTXImageProcessor.ts:662:15)

  console.log
    🎯 Target rect: { x: 0, y: 0, width: 1349.9629058834726, height: 759.2916345610157 }

      at PPTXImageProcessor.applyStretchOffset (app/lib/services/images/PPTXImageProcessor.ts:205:17)

PASS tests/__tests__/cdn-file-uploader.test.tsx
  CdnFileUploader Component
    Component Rendering
      ✓ renders with default state (89 ms)
      ✓ renders with loading state (16 ms)
      ✓ shows custom filename input when useCdn is enabled (18 ms)
    Switch Component Integration
      ✓ toggles PPTX CDN upload switch (16 ms)
      ✓ toggles JSON CDN upload switch (8 ms)
      ✓ disables switches when loading (6 ms)
    File Upload Workflows
      ✓ handles direct file upload without CDN (6 ms)
      ✓ handles CDN-first upload workflow (24 ms)
      ✓ generates unique filenames for CDN uploads (13 ms)
      ✓ handles CDN upload errors gracefully (23 ms)
    Results Display
      ✓ displays CDN upload success result (14 ms)
      ✓ displays direct response result (3 ms)
      ✓ displays CDN error warning (5 ms)
    User Interactions
      ✓ handles custom filename input (10 ms)
      ✓ copies CDN URL to clipboard (65 ms)
      ✓ opens CDN URL in new tab (11 ms)
    Accessibility
      ✓ provides proper ARIA labels for switches (3 ms)
      ✓ maintains focus management during interactions (8 ms)

  console.log
    🔄 Applying fillRect transform on 1600x1067 image

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:310:15)

  console.log
    📐 Container: 1349.9629058834726x759.2916345610157

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:313:15)

  console.log
    📍 FillRect: L-4.881% T6.029% R30.709% B6.029%

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:314:15)

  console.log
    📏 Display area: 1001.3x667.7

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:339:15)

  console.log
    📍 Position offset: L-66px T46px

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:344:15)

  console.log
    🔄 Resized image to display area: 1001x668

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:380:15)

  console.log
    🔧 Rounded values: offset(-66, 46), display(1001x668)

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:401:15)

  console.log
    🔧 Handling negative offsets: L-66px T46px

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:423:17)

  console.log
    Loading JSON from URL: https://example.com/large-file.json

      at loadJson (components/MonacoJsonLoader.tsx:47:19)

  console.log
    Attempt 1/3 to fetch JSON from CDN

      at fetchWithTimeout (components/MonacoJsonLoader.tsx:53:25)

  console.log
    Loading JSON file: 15.00MB

      at loadJson (components/MonacoJsonLoader.tsx:107:19)

  console.log
    🔄 Using optimized loading for large file...

      at loadJson (components/MonacoJsonLoader.tsx:112:21)

  console.log
    Attempt 2/3 to fetch JSON from CDN

      at fetchWithTimeout (components/MonacoJsonLoader.tsx:53:25)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    Loading JSON file: 15.00MB

      at loadJson (components/MonacoJsonLoader.tsx:107:19)

  console.log
    🔄 Using optimized loading for large file...

      at loadJson (components/MonacoJsonLoader.tsx:112:21)

  console.log
    ✅ Large file loaded successfully (minimized format)

      at loadJson (components/MonacoJsonLoader.tsx:143:21)

  console.log
    📊 Performance note: File size is 15.00MB. For better performance with large files, consider:
                - Using JSONLoader in view-only mode
                - Breaking large files into smaller chunks
                - Using streaming JSON processing

      at loadJson (components/MonacoJsonLoader.tsx:155:21)

  console.log
    ✅ Large file loaded successfully (minimized format)

      at loadJson (components/MonacoJsonLoader.tsx:143:21)

  console.log
    📊 Performance note: File size is 15.00MB. For better performance with large files, consider:
                - Using JSONLoader in view-only mode
                - Breaking large files into smaller chunks
                - Using streaming JSON processing

      at loadJson (components/MonacoJsonLoader.tsx:155:21)

  console.log
    [Slide 1] Processing p:sp - Name: "Text 0", ID: 3, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 1] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 1] Processing p:sp - Name: "Text 1", ID: 4, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 1] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 1] Processing p:sp - Name: "Text 2", ID: 5, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 1] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 1] Processing p:sp - Name: "Shape 3", ID: 6, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 1] Processed as shape

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 1] Processing p:sp - Name: "Shape 4", ID: 7, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 1] Processed as shape

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 1] Processing p:sp - Name: "Shape 5", ID: 8, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 1] Processed as shape

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 1] Processing p:pic - Name: "Image 0", ID: 9, HasBlipFill: true

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.warn
    FillRect would cause division by zero in ImageElement Gngc80ceGI: {
      left: 0.29807407407407405,
      top: 0.3317991769547326,
      right: 0.7019259259259258,
      bottom: 0.6682008230452674,
      widthDenominator: 1.1102230246251565e-16,
      heightDenominator: 0
    }

      126 |       
      127 |       if (widthDenominator <= 0.001 || heightDenominator <= 0.001) {
    > 128 |         console.warn(`FillRect would cause division by zero in ImageElement ${this.id}:`, {
          |                 ^
      129 |           left, top, right, bottom,
      130 |           widthDenominator, heightDenominator
      131 |         });

      at ImageElement.getStretchInfo (app/lib/models/domain/elements/ImageElement.ts:128:17)
      at ImageProcessingService.processImageElementWithEmbedId (app/lib/services/images/ImageProcessingService.ts:82:40)
      at ImageProcessor.process (app/lib/services/element/processors/ImageProcessor.ts:266:11)
      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:243:26)
      at SlideParser.parseElements (app/lib/services/parsing/SlideParser.ts:196:28)
      at SlideParser.parse (app/lib/services/parsing/SlideParser.ts:76:24)
      at PresentationParser.parse (app/lib/services/parsing/PresentationParser.ts:70:25)
      at InternalPPTXParser.parse (app/lib/parser/InternalPPTXParser.ts:124:35)
      at InternalPPTXParser.parseToJSON (app/lib/parser/InternalPPTXParser.ts:158:20)
      at parse (app/lib/pptxtojson.ts:11:18)
      at Object.<anonymous> (tests/output-comparison.test.ts:21:22)

  console.log
    [Slide 1] Processed as image

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 2] Processing p:sp - Name: "Text 0", ID: 3, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 2] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 2] Processing p:sp - Name: "Text 1", ID: 4, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 2] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 2] Processing p:sp - Name: "Text 2", ID: 5, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 2] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 2] Processing p:sp - Name: "Text 3", ID: 6, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 2] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 2] Processing p:sp - Name: "Text 4", ID: 7, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 2] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 2] Processing p:sp - Name: "Text 5", ID: 8, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 2] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 2] Processing p:sp - Name: "Text 6", ID: 9, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 2] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 2] Processing p:sp - Name: "Text 7", ID: 10, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 2] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 2] Processing p:sp - Name: "Text 8", ID: 11, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 2] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 2] Processing p:sp - Name: "Text 9", ID: 12, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 2] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 2] Processing p:sp - Name: "Text 10", ID: 13, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 2] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 2] Processing p:sp - Name: "Text 11", ID: 14, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 2] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 2] Processing p:sp - Name: "Text 12", ID: 15, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 2] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 2] Processing p:sp - Name: "Text 13", ID: 16, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 2] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 3] Processing p:sp - Name: "Text 0", ID: 2, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 3] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 3] Processing p:sp - Name: "Text 1", ID: 3, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 3] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    期望输出结构: { slides: 3, theme: true, title: true }

      at Object.<anonymous> (tests/output-comparison.test.ts:23:15)

  console.log
    实际输出结构: { slides: 3, theme: true, slideSize: false, metadata: false }

      at Object.<anonymous> (tests/output-comparison.test.ts:29:15)

  console.log
    
    === 元素尺寸比较详情 ===

      at Object.<anonymous> (tests/output-comparison.test.ts:50:15)

  console.log
    
    幻灯片 1:

      at tests/output-comparison.test.ts:58:19
          at Array.forEach (<anonymous>)

  console.log
      元素数量 - 期望: 7, 实际: 7

      at tests/output-comparison.test.ts:64:19
          at Array.forEach (<anonymous>)

  console.log
      元素 1 (text):

      at tests/output-comparison.test.ts:77:21
          at Array.forEach (<anonymous>)

  console.log
        位置 - 期望: (69.34518477439033, 161.45814757440397), 实际: (66.57, 155)

      at tests/output-comparison.test.ts:78:21
          at Array.forEach (<anonymous>)

  console.log
        尺寸 - 期望: 551.7620816615959 x 182, 实际: 529.69 x 174.72

      at tests/output-comparison.test.ts:81:21
          at Array.forEach (<anonymous>)

  console.log
        差异 - 宽度: 22.072081661595803px, 高度: 7.280000000000001px

      at tests/output-comparison.test.ts:93:21
          at Array.forEach (<anonymous>)

  console.log
        ❌ 尺寸差异超出容差范围 (±5px)

      at tests/output-comparison.test.ts:100:23
          at Array.forEach (<anonymous>)

  console.log
      元素 2 (text):

      at tests/output-comparison.test.ts:77:21
          at Array.forEach (<anonymous>)

  console.log
        位置 - 期望: (69.34518477439033, 351.68421628670393), 实际: (66.57, 337.62)

      at tests/output-comparison.test.ts:78:21
          at Array.forEach (<anonymous>)

  console.log
        尺寸 - 期望: 379.1841004184101 x 53, 实际: 364.02 x 50.88

      at tests/output-comparison.test.ts:81:21
          at Array.forEach (<anonymous>)

  console.log
        差异 - 宽度: 15.1641004184101px, 高度: 2.1199999999999974px

      at tests/output-comparison.test.ts:93:21
          at Array.forEach (<anonymous>)

  console.log
        ❌ 尺寸差异超出容差范围 (±5px)

      at tests/output-comparison.test.ts:100:23
          at Array.forEach (<anonymous>)

  console.log
      元素 3 (text):

      at tests/output-comparison.test.ts:77:21
          at Array.forEach (<anonymous>)

  console.log
        位置 - 期望: (69.34518477439033, 398.56480025383394), 实际: (66.57, 382.62)

      at tests/output-comparison.test.ts:78:21
          at Array.forEach (<anonymous>)

  console.log
        尺寸 - 期望: 266.0220168414701 x 50, 实际: 255.38 x 48

      at tests/output-comparison.test.ts:81:21
          at Array.forEach (<anonymous>)

  console.log
        差异 - 宽度: 10.642016841470081px, 高度: 2px

      at tests/output-comparison.test.ts:93:21
          at Array.forEach (<anonymous>)

  console.log
        ❌ 尺寸差异超出容差范围 (±5px)

      at tests/output-comparison.test.ts:100:23
          at Array.forEach (<anonymous>)

  console.log
      元素 4 (shape):

      at tests/output-comparison.test.ts:77:21
          at Array.forEach (<anonymous>)

  console.log
        位置 - 期望: (82.11631209789874, 121.40953099047117), 实际: (78.83170406595276, 116.55317293918898)

      at tests/output-comparison.test.ts:78:21
          at Array.forEach (<anonymous>)

  console.log
        尺寸 - 期望: 20 x 20, 实际: 19.199999520000002 x 19.199999520000002

      at tests/output-comparison.test.ts:81:21
          at Array.forEach (<anonymous>)

  console.log
        差异 - 宽度: 0.8000004799999978px, 高度: 0.8000004799999978px

      at tests/output-comparison.test.ts:93:21
          at Array.forEach (<anonymous>)

  console.log
        ✅ 尺寸在可接受范围内

      at tests/output-comparison.test.ts:102:23
          at Array.forEach (<anonymous>)

  console.log
      元素 5 (shape):

      at tests/output-comparison.test.ts:77:21
          at Array.forEach (<anonymous>)

  console.log
        位置 - 期望: (120.77310027868378, 121.40953099047117), 实际: (115.94214933241733, 116.55317293918898)

      at tests/output-comparison.test.ts:78:21
          at Array.forEach (<anonymous>)

  console.log
        尺寸 - 期望: 20 x 20, 实际: 19.199999520000002 x 19.199999520000002

      at tests/output-comparison.test.ts:81:21
          at Array.forEach (<anonymous>)

  console.log
        差异 - 宽度: 0.8000004799999978px, 高度: 0.8000004799999978px

      at tests/output-comparison.test.ts:93:21
          at Array.forEach (<anonymous>)

  console.log
        ✅ 尺寸在可接受范围内

      at tests/output-comparison.test.ts:102:23
          at Array.forEach (<anonymous>)

  console.log
      元素 6 (shape):

      at tests/output-comparison.test.ts:77:21
          at Array.forEach (<anonymous>)

  console.log
        位置 - 期望: (159.4298884594688, 121.40953099047117), 实际: (153.0526995857559, 116.55317293918898)

      at tests/output-comparison.test.ts:78:21
          at Array.forEach (<anonymous>)

  console.log
        尺寸 - 期望: 20 x 20, 实际: 19.199999520000002 x 19.199999520000002

      at tests/output-comparison.test.ts:81:21
          at Array.forEach (<anonymous>)

  console.log
        差异 - 宽度: 0.8000004799999978px, 高度: 0.8000004799999978px

      at tests/output-comparison.test.ts:93:21
          at Array.forEach (<anonymous>)

  console.log
        ✅ 尺寸在可接受范围内

      at tests/output-comparison.test.ts:102:23
          at Array.forEach (<anonymous>)

  console.log
      元素 7 (image):

      at tests/output-comparison.test.ts:77:21
          at Array.forEach (<anonymous>)

  console.log
        位置 - 期望: (419.16567695962, 262.46271984964926), 实际: (402.4, 251.96)

      at tests/output-comparison.test.ts:78:21
          at Array.forEach (<anonymous>)

  console.log
        尺寸 - 期望: 231.44299287410928 x 231.44299287410928, 实际: 222.1852962826378 x 222.1852962826378

      at tests/output-comparison.test.ts:81:21
          at Array.forEach (<anonymous>)

  console.log
        差异 - 宽度: 9.257696591471472px, 高度: 9.257696591471472px

      at tests/output-comparison.test.ts:93:21
          at Array.forEach (<anonymous>)

  console.log
        ❌ 尺寸差异超出容差范围 (±5px)

      at tests/output-comparison.test.ts:100:23
          at Array.forEach (<anonymous>)

  console.log
    
    幻灯片 2:

      at tests/output-comparison.test.ts:58:19
          at Array.forEach (<anonymous>)

  console.log
      元素数量 - 期望: 14, 实际: 14

      at tests/output-comparison.test.ts:64:19
          at Array.forEach (<anonymous>)

  console.log
      元素 1 (text):

      at tests/output-comparison.test.ts:77:21
          at Array.forEach (<anonymous>)

  console.log
        位置 - 期望: (264.15094339622647, 46.42254343030217), 实际: (253.58, 44.57)

      at tests/output-comparison.test.ts:78:21
          at Array.forEach (<anonymous>)

  console.log
        尺寸 - 期望: 471.6981132075471 x 119, 实际: 452.83 x 114.24

      at tests/output-comparison.test.ts:81:21
          at Array.forEach (<anonymous>)

  console.log
        差异 - 宽度: 18.86811320754714px, 高度: 4.760000000000005px

      at tests/output-comparison.test.ts:93:21
          at Array.forEach (<anonymous>)

  console.log
        ❌ 尺寸差异超出容差范围 (±5px)

      at tests/output-comparison.test.ts:100:23
          at Array.forEach (<anonymous>)

  console.log
      元素 2 (text):

      at tests/output-comparison.test.ts:77:21
          at Array.forEach (<anonymous>)

  console.log
        位置 - 期望: (408.35777126099714, 74.92385576626017), 实际: (392.02, 71.93)

      at tests/output-comparison.test.ts:78:21
          at Array.forEach (<anonymous>)

  console.log
        尺寸 - 期望: 183.28445747800583 x 80, 实际: 175.95 x 76.8

      at tests/output-comparison.test.ts:81:21
          at Array.forEach (<anonymous>)

  console.log
        差异 - 宽度: 7.334457478005845px, 高度: 3.200000000000003px

      at tests/output-comparison.test.ts:93:21
          at Array.forEach (<anonymous>)

  console.log
        ❌ 尺寸差异超出容差范围 (±5px)

      at tests/output-comparison.test.ts:100:23
          at Array.forEach (<anonymous>)

  console.log
      元素 3 (text):

      at tests/output-comparison.test.ts:77:21
          at Array.forEach (<anonymous>)

  console.log
        位置 - 期望: (166.25130482955814, 197.97843137254893), 实际: (159.6, 190.06)

      at tests/output-comparison.test.ts:78:21
          at Array.forEach (<anonymous>)

  console.log
        尺寸 - 期望: 354 x 56, 实际: 339.84 x 53.76

      at tests/output-comparison.test.ts:81:21
          at Array.forEach (<anonymous>)

  console.log
        差异 - 宽度: 14.160000000000025px, 高度: 2.240000000000002px

      at tests/output-comparison.test.ts:93:21
          at Array.forEach (<anonymous>)

  console.log
        ❌ 尺寸差异超出容差范围 (±5px)

      at tests/output-comparison.test.ts:100:23
          at Array.forEach (<anonymous>)

  console.log
      元素 4 (text):

      at tests/output-comparison.test.ts:77:21
          at Array.forEach (<anonymous>)

  console.log
        位置 - 期望: (105.73535063775813, 192.73321763008892), 实际: (101.51, 185.02)

      at tests/output-comparison.test.ts:78:21
          at Array.forEach (<anonymous>)

  console.log
        尺寸 - 期望: 78 x 68, 实际: 74.88 x 65.28

      at tests/output-comparison.test.ts:81:21
          at Array.forEach (<anonymous>)

  console.log
        差异 - 宽度: 3.1200000000000045px, 高度: 2.719999999999999px

      at tests/output-comparison.test.ts:93:21
          at Array.forEach (<anonymous>)

  console.log
        ✅ 尺寸在可接受范围内

      at tests/output-comparison.test.ts:102:23
          at Array.forEach (<anonymous>)

  console.log
      元素 5 (text):

      at tests/output-comparison.test.ts:77:21
          at Array.forEach (<anonymous>)

  console.log
        位置 - 期望: (583.4391493876715, 197.97843137254893), 实际: (560.1, 190.06)

      at tests/output-comparison.test.ts:78:21
          at Array.forEach (<anonymous>)

  console.log
        尺寸 - 期望: 353.9867292795341 x 56, 实际: 339.83 x 53.76

      at tests/output-comparison.test.ts:81:21
          at Array.forEach (<anonymous>)

  console.log
        差异 - 宽度: 14.15672927953409px, 高度: 2.240000000000002px

      at tests/output-comparison.test.ts:93:21
          at Array.forEach (<anonymous>)

  console.log
        ❌ 尺寸差异超出容差范围 (±5px)

      at tests/output-comparison.test.ts:100:23
          at Array.forEach (<anonymous>)

  console.log
      元素 6 (text):

      at tests/output-comparison.test.ts:77:21
          at Array.forEach (<anonymous>)

  console.log
        位置 - 期望: (522.9231951958715, 192.73321763008892), 实际: (502.01, 185.02)

      at tests/output-comparison.test.ts:78:21
          at Array.forEach (<anonymous>)

  console.log
        尺寸 - 期望: 78 x 68, 实际: 74.88 x 65.28

      at tests/output-comparison.test.ts:81:21
          at Array.forEach (<anonymous>)

  console.log
        差异 - 宽度: 3.1200000000000045px, 高度: 2.719999999999999px

      at tests/output-comparison.test.ts:93:21
          at Array.forEach (<anonymous>)

  console.log
        ✅ 尺寸在可接受范围内

      at tests/output-comparison.test.ts:102:23
          at Array.forEach (<anonymous>)

  console.log
      元素 7 (text):

      at tests/output-comparison.test.ts:77:21
          at Array.forEach (<anonymous>)

  console.log
        位置 - 期望: (166.26795391977294, 266.7117647058823), 实际: (159.62, 256.04)

      at tests/output-comparison.test.ts:78:21
          at Array.forEach (<anonymous>)

  console.log
        尺寸 - 期望: 354 x 56, 实际: 339.84 x 53.76

      at tests/output-comparison.test.ts:81:21
          at Array.forEach (<anonymous>)

  console.log
        差异 - 宽度: 14.160000000000025px, 高度: 2.240000000000002px

      at tests/output-comparison.test.ts:93:21
          at Array.forEach (<anonymous>)

  console.log
        ❌ 尺寸差异超出容差范围 (±5px)

      at tests/output-comparison.test.ts:100:23
          at Array.forEach (<anonymous>)

  console.log
      元素 8 (text):

      at tests/output-comparison.test.ts:77:21
          at Array.forEach (<anonymous>)

  console.log
        位置 - 期望: (105.75199972797293, 261.46655096342226), 实际: (101.52, 251.01)

      at tests/output-comparison.test.ts:78:21
          at Array.forEach (<anonymous>)

  console.log
        尺寸 - 期望: 78 x 68, 实际: 74.88 x 65.28

      at tests/output-comparison.test.ts:81:21
          at Array.forEach (<anonymous>)

  console.log
        差异 - 宽度: 3.1200000000000045px, 高度: 2.719999999999999px

      at tests/output-comparison.test.ts:93:21
          at Array.forEach (<anonymous>)

  console.log
        ✅ 尺寸在可接受范围内

      at tests/output-comparison.test.ts:102:23
          at Array.forEach (<anonymous>)

  console.log
      元素 9 (text):

      at tests/output-comparison.test.ts:77:21
          at Array.forEach (<anonymous>)

  console.log
        位置 - 期望: (583.4258786672056, 266.7117647058823), 实际: (560.09, 256.04)

      at tests/output-comparison.test.ts:78:21
          at Array.forEach (<anonymous>)

  console.log
        尺寸 - 期望: 354 x 56, 实际: 339.84 x 53.76

      at tests/output-comparison.test.ts:81:21
          at Array.forEach (<anonymous>)

  console.log
        差异 - 宽度: 14.160000000000025px, 高度: 2.240000000000002px

      at tests/output-comparison.test.ts:93:21
          at Array.forEach (<anonymous>)

  console.log
        ❌ 尺寸差异超出容差范围 (±5px)

      at tests/output-comparison.test.ts:100:23
          at Array.forEach (<anonymous>)

  console.log
      元素 10 (text):

      at tests/output-comparison.test.ts:77:21
          at Array.forEach (<anonymous>)

  console.log
        位置 - 期望: (522.9099244754055, 261.46655096342226), 实际: (501.99, 251.01)

      at tests/output-comparison.test.ts:78:21
          at Array.forEach (<anonymous>)

  console.log
        尺寸 - 期望: 78 x 68, 实际: 74.88 x 65.28

      at tests/output-comparison.test.ts:81:21
          at Array.forEach (<anonymous>)

  console.log
        差异 - 宽度: 3.1200000000000045px, 高度: 2.719999999999999px

      at tests/output-comparison.test.ts:93:21
          at Array.forEach (<anonymous>)

  console.log
        ✅ 尺寸在可接受范围内

      at tests/output-comparison.test.ts:102:23
          at Array.forEach (<anonymous>)

  console.log
      元素 11 (text):

      at tests/output-comparison.test.ts:77:21
          at Array.forEach (<anonymous>)

  console.log
        位置 - 期望: (166.26000048173208, 335.44509803921585), 实际: (159.61, 322.03)

      at tests/output-comparison.test.ts:78:21
          at Array.forEach (<anonymous>)

  console.log
        尺寸 - 期望: 354 x 56, 实际: 339.84 x 53.76

      at tests/output-comparison.test.ts:81:21
          at Array.forEach (<anonymous>)

  console.log
        差异 - 宽度: 14.160000000000025px, 高度: 2.240000000000002px

      at tests/output-comparison.test.ts:93:21
          at Array.forEach (<anonymous>)

  console.log
        ❌ 尺寸差异超出容差范围 (±5px)

      at tests/output-comparison.test.ts:100:23
          at Array.forEach (<anonymous>)

  console.log
      元素 12 (text):

      at tests/output-comparison.test.ts:77:21
          at Array.forEach (<anonymous>)

  console.log
        位置 - 期望: (105.74404628993207, 330.19988429675584), 实际: (101.51, 316.99)

      at tests/output-comparison.test.ts:78:21
          at Array.forEach (<anonymous>)

  console.log
        尺寸 - 期望: 78 x 68, 实际: 74.88 x 65.28

      at tests/output-comparison.test.ts:81:21
          at Array.forEach (<anonymous>)

  console.log
        差异 - 宽度: 3.1200000000000045px, 高度: 2.719999999999999px

      at tests/output-comparison.test.ts:93:21
          at Array.forEach (<anonymous>)

  console.log
        ✅ 尺寸在可接受范围内

      at tests/output-comparison.test.ts:102:23
          at Array.forEach (<anonymous>)

  console.log
      元素 13 (text):

      at tests/output-comparison.test.ts:77:21
          at Array.forEach (<anonymous>)

  console.log
        位置 - 期望: (583.4258786672056, 335.44509803921585), 实际: (560.09, 322.03)

      at tests/output-comparison.test.ts:78:21
          at Array.forEach (<anonymous>)

  console.log
        尺寸 - 期望: 354 x 56, 实际: 339.84 x 53.76

      at tests/output-comparison.test.ts:81:21
          at Array.forEach (<anonymous>)

  console.log
        差异 - 宽度: 14.160000000000025px, 高度: 2.240000000000002px

      at tests/output-comparison.test.ts:93:21
          at Array.forEach (<anonymous>)

  console.log
        ❌ 尺寸差异超出容差范围 (±5px)

      at tests/output-comparison.test.ts:100:23
          at Array.forEach (<anonymous>)

  console.log
      元素 14 (text):

      at tests/output-comparison.test.ts:77:21
          at Array.forEach (<anonymous>)

  console.log
        位置 - 期望: (522.9099244754055, 330.19988429675584), 实际: (501.99, 316.99)

      at tests/output-comparison.test.ts:78:21
          at Array.forEach (<anonymous>)

  console.log
        尺寸 - 期望: 78 x 68, 实际: 74.88 x 65.28

      at tests/output-comparison.test.ts:81:21
          at Array.forEach (<anonymous>)

  console.log
        差异 - 宽度: 3.1200000000000045px, 高度: 2.719999999999999px

      at tests/output-comparison.test.ts:93:21
          at Array.forEach (<anonymous>)

  console.log
    ✂️ Cropped image: 935x668 from (66,0)

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:470:19)

  console.log
    🔲 Composited at: L0px T46px

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:473:19)

  console.log
        ✅ 尺寸在可接受范围内

      at tests/output-comparison.test.ts:102:23
          at Array.forEach (<anonymous>)

  console.log
    
    幻灯片 3:

      at tests/output-comparison.test.ts:58:19
          at Array.forEach (<anonymous>)

  console.log
    📋 Final image size: 1350x759

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:554:15)

  console.log
      元素数量 - 期望: 2, 实际: 2

      at tests/output-comparison.test.ts:64:19
          at Array.forEach (<anonymous>)

  console.log
      元素 1 (text):

      at tests/output-comparison.test.ts:77:21
          at Array.forEach (<anonymous>)

  console.log
        位置 - 期望: (83.99018920344875, 146.26312335958005), 实际: (80.63, 140.41)

      at tests/output-comparison.test.ts:78:21
          at Array.forEach (<anonymous>)

  console.log
    ✅ Processing complete: 1349.9629058834726x759.2916345610157

      at PPTXImageProcessor.applyStretchOffset (app/lib/services/images/PPTXImageProcessor.ts:235:17)

  console.log
        尺寸 - 期望: 81.06930335998075 x 60, 实际: 77.83 x 57.6

      at tests/output-comparison.test.ts:81:21
          at Array.forEach (<anonymous>)

  console.log
        差异 - 宽度: 3.2393033599807524px, 高度: 2.3999999999999986px

      at tests/output-comparison.test.ts:93:21
          at Array.forEach (<anonymous>)

  console.log
    📋 Applied effects: [
      'fillRect stretch: {"left":-0.04881,"top":0.06029,"right":0.30709,"bottom":0.06029}',
      'transparent padding: Applied fillRect transform'
    ]

      at PPTXImageProcessor.applyStretchOffset (app/lib/services/images/PPTXImageProcessor.ts:238:17)

  console.log
        ✅ 尺寸在可接受范围内

      at tests/output-comparison.test.ts:102:23
          at Array.forEach (<anonymous>)

  console.log
      元素 2 (text):

      at tests/output-comparison.test.ts:77:21
          at Array.forEach (<anonymous>)

  console.log
    💾 Debug image saved: debug-images/image-2-processed-2025-07-04T00-05-22-743Z.png

      at PPTXImageProcessor.saveDebugImage (app/lib/services/images/PPTXImageProcessor.ts:659:15)

  console.log
    📄 Metadata saved: debug-images/image-2-processed-2025-07-04T00-05-22-743Z.json

      at PPTXImageProcessor.saveDebugImage (app/lib/services/images/PPTXImageProcessor.ts:662:15)

  console.log
        位置 - 期望: (87.99018920344875, 223.75218722659667), 实际: (84.47, 214.8)

      at tests/output-comparison.test.ts:78:21
          at Array.forEach (<anonymous>)

  console.log
        尺寸 - 期望: 552.9306934242244 x 80, 实际: 530.81 x 76.8

      at tests/output-comparison.test.ts:81:21
          at Array.forEach (<anonymous>)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
        差异 - 宽度: 22.12069342422444px, 高度: 3.200000000000003px

      at tests/output-comparison.test.ts:93:21
          at Array.forEach (<anonymous>)

  console.log
        ❌ 尺寸差异超出容差范围 (±5px)

      at tests/output-comparison.test.ts:100:23
          at Array.forEach (<anonymous>)

  console.log
    🔧 PPTXImageProcessor: Processing image 100x100

      at PPTXImageProcessor.applyStretchOffset (app/lib/services/images/PPTXImageProcessor.ts:148:17)

  console.log
    📐 Container size: 200x150

      at PPTXImageProcessor.applyStretchOffset (app/lib/services/images/PPTXImageProcessor.ts:151:17)

  console.log
    
    === 总结 ===

      at Object.<anonymous> (tests/output-comparison.test.ts:108:15)

  console.log
    总匹配元素: 23

      at Object.<anonymous> (tests/output-comparison.test.ts:109:15)

  console.log
    📍 FillRect offsets: { left: -0.1, top: -0.2, right: 0.1, bottom: 0.1 }

      at PPTXImageProcessor.applyStretchOffset (app/lib/services/images/PPTXImageProcessor.ts:152:17)

  console.log
    尺寸不匹配: 13

      at Object.<anonymous> (tests/output-comparison.test.ts:110:15)

  console.log
    💾 Debug image saved: debug-images/image-1-original-2025-07-04T00-05-22-767Z.png

      at PPTXImageProcessor.saveDebugImage (app/lib/services/images/PPTXImageProcessor.ts:659:15)

  console.log
    📄 Metadata saved: debug-images/image-1-original-2025-07-04T00-05-22-767Z.json

      at PPTXImageProcessor.saveDebugImage (app/lib/services/images/PPTXImageProcessor.ts:662:15)

  console.log
    匹配率: 43.5%

      at Object.<anonymous> (tests/output-comparison.test.ts:111:15)

  console.log
    🎯 Target rect: { x: 0, y: 0, width: 200, height: 150 }

      at PPTXImageProcessor.applyStretchOffset (app/lib/services/images/PPTXImageProcessor.ts:205:17)

  console.log
    🔄 Applying fillRect transform on 100x100 image

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:310:15)

  console.log
    📐 Container: 200x150

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:313:15)

  console.log
    📍 FillRect: L-10.000% T-20.000% R10.000% B10.000%

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:314:15)

  console.log
    📏 Display area: 200.0x165.0

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:339:15)

  console.log
    📍 Position offset: L-20px T-30px

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:344:15)

  console.log
    🔄 Resized image to display area: 200x165

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:380:15)

  console.log
    🔧 Rounded values: offset(-20, -30), display(200x165)

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:401:15)

  console.log
    幻灯片 1: 期望 7 个元素, 实际 7 个

      at tests/output-comparison.test.ts:146:17
          at Array.forEach (<anonymous>)

  console.log
    🔧 Handling negative offsets: L-20px T-30px

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:423:17)

  console.log
    幻灯片 2: 期望 14 个元素, 实际 14 个

      at tests/output-comparison.test.ts:146:17
          at Array.forEach (<anonymous>)

  console.log
    幻灯片 3: 期望 2 个元素, 实际 2 个

      at tests/output-comparison.test.ts:146:17
          at Array.forEach (<anonymous>)

  console.log
    ✂️ Cropped image: 180x135 from (20,30)

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:470:19)

  console.log
    🔲 Composited at: L0px T0px

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:473:19)

  console.log
    颜色 dk1: 期望 rgba(0,7,15,1), 实际 #000000

      at tests/output-comparison.test.ts:177:21
          at Array.forEach (<anonymous>)

  console.log
    📋 Final image size: 200x150

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:554:15)

  console.log
    颜色 lt1: 期望 #FFFFFF, 实际 #FFFFFF

      at tests/output-comparison.test.ts:177:21
          at Array.forEach (<anonymous>)

  console.log
    ✅ Processing complete: 200x150

      at PPTXImageProcessor.applyStretchOffset (app/lib/services/images/PPTXImageProcessor.ts:235:17)

  console.log
    📋 Applied effects: [
      'fillRect stretch: {"left":-0.1,"top":-0.2,"right":0.1,"bottom":0.1}',
      'transparent padding: Applied fillRect transform'
    ]

      at PPTXImageProcessor.applyStretchOffset (app/lib/services/images/PPTXImageProcessor.ts:238:17)

  console.log
    颜色 accent1: 期望 rgba(0,7,15,1), 实际 #4472C4

      at tests/output-comparison.test.ts:177:21
          at Array.forEach (<anonymous>)

  console.log
    颜色 accent2: 期望 #16a2ffff, 实际 #ED7D31

      at tests/output-comparison.test.ts:177:21
          at Array.forEach (<anonymous>)

  console.log
    实际第一张幻灯片的文本元素内容：

      at Object.<anonymous> (tests/output-comparison.test.ts:208:17)

  console.log
    💾 Debug image saved: debug-images/image-2-processed-2025-07-04T00-05-22-779Z.png

      at PPTXImageProcessor.saveDebugImage (app/lib/services/images/PPTXImageProcessor.ts:659:15)

  console.log
    📄 Metadata saved: debug-images/image-2-processed-2025-07-04T00-05-22-779Z.json

      at PPTXImageProcessor.saveDebugImage (app/lib/services/images/PPTXImageProcessor.ts:662:15)

  console.log
    首页标题元素: 期望 0, 实际 0

      at Object.<anonymous> (tests/output-comparison.test.ts:215:17)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    🔧 PPTXImageProcessor: Processing image 100x100

      at PPTXImageProcessor.applyStretchOffset (app/lib/services/images/PPTXImageProcessor.ts:148:17)

  console.log
    📐 Container size: 200x150

      at PPTXImageProcessor.applyStretchOffset (app/lib/services/images/PPTXImageProcessor.ts:151:17)

  console.log
    📍 FillRect offsets: { left: -0.1, top: -0.1, right: -0.1, bottom: -0.1 }

      at PPTXImageProcessor.applyStretchOffset (app/lib/services/images/PPTXImageProcessor.ts:152:17)

  console.warn
    ❗ 跳过标题元素检查，因为实际输出中没有解析到文本内容

      221 |           expect(actualTitleElements.length).toBeGreaterThan(0);
      222 |         } else {
    > 223 |           console.warn('❗ 跳过标题元素检查，因为实际输出中没有解析到文本内容');
          |                   ^
      224 |         }
      225 |
      226 |         if (

      at Object.<anonymous> (tests/output-comparison.test.ts:223:19)

  console.log
    目录编号: 期望 0, 实际 0

      at Object.<anonymous> (tests/output-comparison.test.ts:266:17)

  console.log
    💾 Debug image saved: debug-images/image-1-original-2025-07-04T00-05-22-788Z.png

      at PPTXImageProcessor.saveDebugImage (app/lib/services/images/PPTXImageProcessor.ts:659:15)

  console.log
    目录项目: 期望 0, 实际 0

      at Object.<anonymous> (tests/output-comparison.test.ts:290:17)

  console.log
    📄 Metadata saved: debug-images/image-1-original-2025-07-04T00-05-22-788Z.json

      at PPTXImageProcessor.saveDebugImage (app/lib/services/images/PPTXImageProcessor.ts:662:15)

  console.warn
    ⚠️ No TOC items found. This might be due to text parsing issues or different slide content.

      294 |         // 如果目录页没有文本内容，可能是因为文本解析问题，给出警告而不是失败
      295 |         if (actualTocItems.length === 0) {
    > 296 |           console.warn('⚠️ No TOC items found. This might be due to text parsing issues or different slide content.');
          |                   ^
      297 |           // 检查是否至少有元素存在
      298 |           expect(actualTocSlide.elements.length).toBeGreaterThan(0);
      299 |         } else {

      at Object.<anonymous> (tests/output-comparison.test.ts:296:19)

  console.log
    🎯 Target rect: { x: 0, y: 0, width: 200, height: 150 }

      at PPTXImageProcessor.applyStretchOffset (app/lib/services/images/PPTXImageProcessor.ts:205:17)

  console.log
    形状: 期望 3, 实际 3

      at Object.<anonymous> (tests/output-comparison.test.ts:322:17)

  console.log
    🔄 Applying fillRect transform on 100x100 image

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:310:15)

  console.log
    图像: 期望 1, 实际 1

      at Object.<anonymous> (tests/output-comparison.test.ts:364:15)

  console.log
    📐 Container: 200x150

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:313:15)

  console.log
    📍 FillRect: L-10.000% T-10.000% R-10.000% B-10.000%

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:314:15)

  console.log
    📏 Display area: 240.0x180.0

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:339:15)

  console.log
    📍 Position offset: L-20px T-15px

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:344:15)

  console.log
    🔄 Resized image to display area: 240x180

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:380:15)

  console.log
    🔧 Rounded values: offset(-20, -15), display(240x180)

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:401:15)

  console.log
    🔧 Handling negative offsets: L-20px T-15px

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:423:17)

  console.log
    ✂️ Cropped image: 200x150 from (20,15)

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:470:19)

  console.log
    🔲 Composited at: L0px T0px

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:473:19)

  console.log
    📋 Final image size: 200x150

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:554:15)

  console.log
    ✅ Processing complete: 200x150

      at PPTXImageProcessor.applyStretchOffset (app/lib/services/images/PPTXImageProcessor.ts:235:17)

  console.log
    📋 Applied effects: [
      'fillRect stretch: {"left":-0.1,"top":-0.1,"right":-0.1,"bottom":-0.1}',
      'transparent padding: Applied fillRect transform'
    ]

      at PPTXImageProcessor.applyStretchOffset (app/lib/services/images/PPTXImageProcessor.ts:238:17)

  console.log
    💾 Debug image saved: debug-images/image-2-processed-2025-07-04T00-05-22-805Z.png

      at PPTXImageProcessor.saveDebugImage (app/lib/services/images/PPTXImageProcessor.ts:659:15)

  console.log
    📄 Metadata saved: debug-images/image-2-processed-2025-07-04T00-05-22-805Z.json

      at PPTXImageProcessor.saveDebugImage (app/lib/services/images/PPTXImageProcessor.ts:662:15)

PASS tests/__tests__/negative-offset-handling.test.ts
  负值偏移处理测试
    ✓ 应该正确处理实际案例中的负值偏移 (634 ms)
    ✓ 应该正确处理左上角都是负值的情况 (21 ms)
    ✓ 应该正确处理所有边都是负值的情况 (23 ms)

  console.log
    总元素数: 期望 23, 实际 23

      at Object.<anonymous> (tests/output-comparison.test.ts:501:15)

  console.log
    中文文本元素: 0 / 0

      at Object.<anonymous> (tests/output-comparison.test.ts:525:15)

  console.warn
    ⚠️ No text elements found. This might be due to text parsing issues.

      529 |       // 如果没有找到文本元素，可能是文本解析问题
      530 |       if (textElements.length === 0) {
    > 531 |         console.warn('⚠️ No text elements found. This might be due to text parsing issues.');
          |                 ^
      532 |         // 检查是否至少有其他类型的元素
      533 |         const allElements = actualOutput.slides.flatMap((slide: any) => slide.elements);
      534 |         expect(allElements.length).toBeGreaterThan(0);

      at Object.<anonymous> (tests/output-comparison.test.ts:531:17)

PASS tests/output-comparison.test.ts
  输出与期望结果比较
    精确数据匹配
      ✓ 应该确保所有元素的 width 和 height 与期望输出完全匹配 (171 ms)
      ✓ 应该匹配精确的幻灯片数量 (1 ms)
      ✓ 应该具有匹配元素数量的幻灯片 (4 ms)
      ✓ 应该匹配主题色彩结构 (7 ms)
      ✓ 应该正确解析首页幻灯片标题 (6 ms)
      ✓ 应该解析目录页所有文本元素 (3 ms)
      ✓ 应该检测形状元素（首页圆形） (1 ms)
      ✓ 应该检测图像元素
      ✓ 应该保留幻灯片背景信息 (3 ms)
    数据质量验证
      ✓ 应该具有合理的位置数值 (20 ms)
      ✓ 应该具有一致的字体和颜色信息
      ✓ 应该维护元素唯一性
    性能与完整性
      ✓ 应该完整解析内容而无重大数据丢失 (10 ms)
      ✓ 应该正确处理中文文本 (1 ms)

  console.log
    Attempt 2/3 to fetch JSON from CDN

      at fetchWithTimeout (components/MonacoJsonLoader.tsx:53:25)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.warn
    Fetch attempt 2 failed: Error [AbortError]: Request timeout
        at /Users/tanghehui/ExploreProject/pptxtojson/tests/__tests__/monaco-json-loader-large-files.test.tsx:126:27
        at Timeout.task [as _onTimeout] (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jsdom/lib/jsdom/browser/Window.js:579:19)
        at listOnTimeout (node:internal/timers:573:17)
        at processTimers (node:internal/timers:514:7)

      73 |                 return response;
      74 |               } catch (error) {
    > 75 |                 console.warn(`Fetch attempt ${attempt} failed:`, error);
         |                         ^
      76 |                 
      77 |                 if (attempt === retries) {
      78 |                   // 为超时错误提供更详细的信息

      at fetchWithTimeout (components/MonacoJsonLoader.tsx:75:25)
      at loadJson (components/MonacoJsonLoader.tsx:100:28)

  console.log
    Retrying in 2000ms...

      at fetchWithTimeout (components/MonacoJsonLoader.tsx:93:25)

  console.log
    [Slide 1] Processing p:sp - Name: "Text 0", ID: 3, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 1] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 1] Processing p:sp - Name: "Text 1", ID: 4, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 1] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 1] Processing p:sp - Name: "Text 2", ID: 5, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 1] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 1] Processing p:sp - Name: "Shape 3", ID: 6, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 1] Processed as shape

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 1] Processing p:sp - Name: "Shape 4", ID: 7, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 1] Processed as shape

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 1] Processing p:sp - Name: "Shape 5", ID: 8, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 1] Processed as shape

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 1] Processing p:pic - Name: "Image 0", ID: 9, HasBlipFill: true

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.warn
    FillRect would cause division by zero in ImageElement NEAVyJ1bX3: {
      left: 0.29807407407407405,
      top: 0.3317991769547326,
      right: 0.7019259259259258,
      bottom: 0.6682008230452674,
      widthDenominator: 1.1102230246251565e-16,
      heightDenominator: 0
    }

      126 |       
      127 |       if (widthDenominator <= 0.001 || heightDenominator <= 0.001) {
    > 128 |         console.warn(`FillRect would cause division by zero in ImageElement ${this.id}:`, {
          |                 ^
      129 |           left, top, right, bottom,
      130 |           widthDenominator, heightDenominator
      131 |         });

      at ImageElement.getStretchInfo (app/lib/models/domain/elements/ImageElement.ts:128:17)
      at ImageProcessingService.processImageElementWithEmbedId (app/lib/services/images/ImageProcessingService.ts:82:40)
      at ImageProcessor.process (app/lib/services/element/processors/ImageProcessor.ts:266:11)
      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:243:26)
      at SlideParser.parseElements (app/lib/services/parsing/SlideParser.ts:196:28)
      at SlideParser.parse (app/lib/services/parsing/SlideParser.ts:76:24)
      at PresentationParser.parse (app/lib/services/parsing/PresentationParser.ts:70:25)
      at InternalPPTXParser.parse (app/lib/parser/InternalPPTXParser.ts:124:35)
      at InternalPPTXParser.parseToJSON (app/lib/parser/InternalPPTXParser.ts:158:20)
      at parse (app/lib/pptxtojson.ts:11:18)
      at Object.<anonymous> (tests/element-types.test.ts:21:22)

  console.log
    [Slide 1] Processed as image

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 2] Processing p:sp - Name: "Text 0", ID: 3, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 2] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 2] Processing p:sp - Name: "Text 1", ID: 4, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 2] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 2] Processing p:sp - Name: "Text 2", ID: 5, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 2] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 2] Processing p:sp - Name: "Text 3", ID: 6, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 2] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 2] Processing p:sp - Name: "Text 4", ID: 7, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 2] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 2] Processing p:sp - Name: "Text 5", ID: 8, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 2] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 2] Processing p:sp - Name: "Text 6", ID: 9, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 2] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 2] Processing p:sp - Name: "Text 7", ID: 10, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 2] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 2] Processing p:sp - Name: "Text 8", ID: 11, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 2] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 2] Processing p:sp - Name: "Text 9", ID: 12, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 2] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 2] Processing p:sp - Name: "Text 10", ID: 13, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 2] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 2] Processing p:sp - Name: "Text 11", ID: 14, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 2] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 2] Processing p:sp - Name: "Text 12", ID: 15, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 2] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 2] Processing p:sp - Name: "Text 13", ID: 16, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 2] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 3] Processing p:sp - Name: "Text 0", ID: 2, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 3] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 3] Processing p:sp - Name: "Text 1", ID: 3, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 3] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    Total elements: 23, Elements with text: 0

      at Object.<anonymous> (tests/element-types.test.ts:42:15)

  console.log
    Element 0: type=text, hasText=false, textContent=none...

      at tests/element-types.test.ts:46:17
          at Array.forEach (<anonymous>)

  console.log
    Element 1: type=text, hasText=false, textContent=none...

      at tests/element-types.test.ts:46:17
          at Array.forEach (<anonymous>)

  console.log
    Element 2: type=text, hasText=false, textContent=none...

      at tests/element-types.test.ts:46:17
          at Array.forEach (<anonymous>)

  console.warn
    ⚠️ No text content found in elements. This might indicate a text parsing issue.

      49 |       // 如果没有文本元素但有其他元素，只给出警告
      50 |       if (actualElementsWithText.length === 0 && allElements.length > 0) {
    > 51 |         console.warn('⚠️ No text content found in elements. This might indicate a text parsing issue.');
         |                 ^
      52 |         return; // 跳过后续检查
      53 |       }
      54 |       

      at Object.<anonymous> (tests/element-types.test.ts:51:17)

PASS tests/element-types.test.ts
  PPTX 元素类型验证
    文本元素
      ✓ 应该正确解析文本内容 (11 ms)
      ✓ 应该具有正确的文本格式属性 (6 ms)
      ✓ 应该保留文本定位 (8 ms)
    形状元素
      ✓ 应该正确解析形状几何 (1 ms)
      ✓ 应该具有形状填充属性
      ✓ 应该维护形状定位和尺寸 (1 ms)
    图像元素
      ✓ 应该正确解析图像源
      ✓ 应该维护图像纵横比
      ✓ 如果存在应该处理图像裁剪
    背景元素
      ✓ 应该解析幻灯片背景
    元素关系
      ✓ 应该保留元素层级顺序
      ✓ 应该正确处理分组元素

  console.log
    长期运行测试: 100个文件, 1342ms, 内存增长: 6MB

      at Object.<anonymous> (tests/__tests__/performance-reliability-comprehensive.test.ts:293:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

FAIL tests/__tests__/services/ErrorHandling.test.ts
  Error Handling Service Unit Tests
    PPTXParseError Base Class
      ✓ should create PPTXParseError with basic properties (1 ms)
      ✓ should create PPTXParseError with context
      ✓ should have correct stack trace (10 ms)
      ✓ should handle null/undefined context
      ✓ should handle empty string message and code
    XMLParseError
      ✓ should create XMLParseError with correct properties
      ✓ should create XMLParseError with context
      ✓ should handle complex XML parsing scenarios (2 ms)
    FileOperationError
      ✓ should create FileOperationError with correct properties (10 ms)
      ✓ should create FileOperationError with file context
      ✓ should handle various file operation scenarios (1 ms)
    ElementProcessingError
      ✓ should create ElementProcessingError with correct properties
      ✓ should create ElementProcessingError with additional context
      ✓ should handle different element types (1 ms)
      ✓ should handle complex element processing scenarios
    ValidationError
      ✓ should create ValidationError with correct properties
      ✓ should create ValidationError with additional context (1 ms)
      ✓ should handle different validation scenarios
    Error Hierarchy and Inheritance
      ✓ should maintain proper inheritance chain
      ✓ should have unique error codes (1 ms)
    Error Serialization and Logging
      ✓ should serialize error information for logging
      ✓ should handle circular references in context
      ✓ should handle large context objects (1 ms)
    Error Handling in Try-Catch Blocks
      ✓ should be properly caught and handled
      ✓ should distinguish between different error types
      ✓ should handle error chaining
    Error Message Formatting
      ✓ should support message templates
      ✓ should handle multilingual error messages
    Performance and Memory
      ✓ should not leak memory when creating many errors (134 ms)
      ✕ should create errors efficiently (114 ms)

  ● Error Handling Service Unit Tests › Performance and Memory › should create errors efficiently

    expect(received).toBeLessThan(expected)

    Expected: < 100
    Received:   113.07983299999978

      537 |       const duration = endTime - startTime;
      538 |       
    > 539 |       expect(duration).toBeLessThan(100); // Should complete in less than 100ms
          |                        ^
      540 |     });
      541 |   });
      542 | });

      at Object.<anonymous> (tests/__tests__/services/ErrorHandling.test.ts:539:24)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

PASS tests/__tests__/switch-component-integration.test.tsx
  Switch Component Integration
    Basic Functionality
      ✓ renders unchecked by default (21 ms)
      ✓ renders checked when checked prop is true (5 ms)
      ✓ calls onCheckedChange when clicked (5 ms)
      ✓ toggles state correctly (14 ms)
    Disabled State
      ✓ renders as disabled when disabled prop is true (2 ms)
      ✓ does not call onCheckedChange when disabled and clicked (4 ms)
      ✓ shows disabled cursor when disabled (6 ms)
    Accessibility Features
      ✓ has proper ARIA attributes (6 ms)
      ✓ supports keyboard navigation (7 ms)
      ✓ supports Enter key activation (2 ms)
      ✓ has focus-visible styles (2 ms)
      ✓ maintains focus state correctly (1 ms)
    Visual States
      ✓ has correct visual thumb position when unchecked (1 ms)
      ✓ has correct visual thumb position when checked (4 ms)
      ✓ applies custom className correctly (2 ms)
      ✓ has proper color states for checked/unchecked (4 ms)
    Component Composition
      ✓ can be used in forms (12 ms)
      ✓ integrates well with other form controls (8 ms)
    Performance
      ✓ does not re-render unnecessarily (1 ms)
      ✓ handles rapid state changes correctly (7 ms)
    Error Boundaries
      ✓ handles missing onCheckedChange gracefully (5 ms)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.error
    ❌ PPTXImageProcessor error: Error: Input buffer contains unsupported image format
        at Sharp.metadata (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/sharp/lib/input.js:549:17)
        at PPTXImageProcessor.applyStretchOffset (/Users/tanghehui/ExploreProject/pptxtojson/app/lib/services/images/PPTXImageProcessor.ts:138:36)
        at Object.<anonymous> (/Users/tanghehui/ExploreProject/pptxtojson/tests/__tests__/error-handling-boundary-conditions.test.ts:48:30)
        at Promise.finally.completed (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1559:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1499:10)
        at _callCircusTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1009:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:949:3)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:839:13)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
        at run (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:757:3)
        at runAndTransformResultsToJestFormat (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1920:21)
        at jestAdapter (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/runner.js:101:19)
        at runTestInternal (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:272:16)
        at runTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:340:7)
        at Object.worker (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:494:12)

      262 |       };
      263 |     } catch (error) {
    > 264 |       console.error("❌ PPTXImageProcessor error:", error);
          |               ^
      265 |       throw new Error(
      266 |         `Image processing failed: ${
      267 |           error instanceof Error ? error.message : "Unknown error"

      at PPTXImageProcessor.applyStretchOffset (app/lib/services/images/PPTXImageProcessor.ts:264:15)
      at Object.<anonymous> (tests/__tests__/error-handling-boundary-conditions.test.ts:48:7)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    🔧 PPTXImageProcessor: Processing image 1x1

      at console.<anonymous> (node_modules/jest-mock/build/index.js:631:25)

  console.log
    📐 Container size: 400x300

      at console.<anonymous> (node_modules/jest-mock/build/index.js:631:25)

  console.log
    📍 FillRect offsets: { left: -0.04881, top: 0.06029, right: 0.30709, bottom: 0.06029 }

      at console.<anonymous> (node_modules/jest-mock/build/index.js:631:25)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    💾 Debug image saved: debug-images/image-1-original-2025-07-04T00-05-23-342Z.png

      at console.<anonymous> (node_modules/jest-mock/build/index.js:631:25)

  console.log
    📄 Metadata saved: debug-images/image-1-original-2025-07-04T00-05-23-342Z.json

      at console.<anonymous> (node_modules/jest-mock/build/index.js:631:25)

  console.log
    🎯 Target rect: { x: 0, y: 0, width: 400, height: 300 }

      at console.<anonymous> (node_modules/jest-mock/build/index.js:631:25)

  console.log
    🔄 Applying fillRect transform on 1x1 image

      at console.<anonymous> (node_modules/jest-mock/build/index.js:631:25)

  console.log
    📐 Container: 400x300

      at console.<anonymous> (node_modules/jest-mock/build/index.js:631:25)

  console.log
    📍 FillRect: L-4.881% T6.029% R30.709% B6.029%

      at console.<anonymous> (node_modules/jest-mock/build/index.js:631:25)

  console.error
    ❌ PPTXImageProcessor error: Error: Input buffer contains unsupported image format
        at Sharp.metadata (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/sharp/lib/input.js:549:17)
        at PPTXImageProcessor.applyStretchOffset (/Users/tanghehui/ExploreProject/pptxtojson/app/lib/services/images/PPTXImageProcessor.ts:138:36)
        at Object.<anonymous> (/Users/tanghehui/ExploreProject/pptxtojson/tests/__tests__/error-handling-boundary-conditions.test.ts:128:30)
        at Promise.finally.completed (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1559:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1499:10)
        at _callCircusTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1009:40)
        at _runTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:949:3)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:839:13)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
        at run (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:757:3)
        at runAndTransformResultsToJestFormat (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1920:21)
        at jestAdapter (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/runner.js:101:19)
        at runTestInternal (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:272:16)
        at runTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:340:7)
        at Object.worker (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:494:12)

      262 |       };
      263 |     } catch (error) {
    > 264 |       console.error("❌ PPTXImageProcessor error:", error);
          |               ^
      265 |       throw new Error(
      266 |         `Image processing failed: ${
      267 |           error instanceof Error ? error.message : "Unknown error"

      at PPTXImageProcessor.applyStretchOffset (app/lib/services/images/PPTXImageProcessor.ts:264:15)
      at Object.<anonymous> (tests/__tests__/error-handling-boundary-conditions.test.ts:128:7)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    📏 Display area: 296.7x263.8

      at console.<anonymous> (node_modules/jest-mock/build/index.js:631:25)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    📍 Position offset: L-20px T18px

      at console.<anonymous> (node_modules/jest-mock/build/index.js:631:25)

  console.error
    ❌ PPTXImageProcessor error: Error: Input buffer contains unsupported image format
        at Sharp.metadata (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/sharp/lib/input.js:549:17)
        at PPTXImageProcessor.applyStretchOffset (/Users/tanghehui/ExploreProject/pptxtojson/app/lib/services/images/PPTXImageProcessor.ts:138:36)
        at Object.<anonymous> (/Users/tanghehui/ExploreProject/pptxtojson/tests/__tests__/error-handling-boundary-conditions.test.ts:208:25)
        at Promise.finally.completed (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1559:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1499:10)
        at _callCircusTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1009:40)
        at _runTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:949:3)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:839:13)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
        at run (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:757:3)
        at runAndTransformResultsToJestFormat (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1920:21)
        at jestAdapter (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/runner.js:101:19)
        at runTestInternal (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:272:16)
        at runTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:340:7)
        at Object.worker (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:494:12)

      262 |       };
      263 |     } catch (error) {
    > 264 |       console.error("❌ PPTXImageProcessor error:", error);
          |               ^
      265 |       throw new Error(
      266 |         `Image processing failed: ${
      267 |           error instanceof Error ? error.message : "Unknown error"

      at PPTXImageProcessor.applyStretchOffset (app/lib/services/images/PPTXImageProcessor.ts:264:15)
      at Object.<anonymous> (tests/__tests__/error-handling-boundary-conditions.test.ts:208:9)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    🔄 Resized image to display area: 297x264

      at console.<anonymous> (node_modules/jest-mock/build/index.js:631:25)

  console.log
    🔧 Rounded values: offset(-20, 18), display(297x264)

      at console.<anonymous> (node_modules/jest-mock/build/index.js:631:25)

  console.log
    🔧 Handling negative offsets: L-20px T18px

      at console.<anonymous> (node_modules/jest-mock/build/index.js:631:25)

  console.log
    ✂️ Cropped image: 277x264 from (20,0)

      at console.<anonymous> (node_modules/jest-mock/build/index.js:631:25)

  console.log
    🔲 Composited at: L0px T18px

      at console.<anonymous> (node_modules/jest-mock/build/index.js:631:25)

  console.log
    📋 Final image size: 400x300

      at console.<anonymous> (node_modules/jest-mock/build/index.js:631:25)

  console.log
    ✅ Processing complete: 400x300

      at console.<anonymous> (node_modules/jest-mock/build/index.js:631:25)

  console.log
    📋 Applied effects: [
      'fillRect stretch: {"left":-0.04881,"top":0.06029,"right":0.30709,"bottom":0.06029}',
      'transparent padding: Applied fillRect transform'
    ]

      at console.<anonymous> (node_modules/jest-mock/build/index.js:631:25)

  console.log
    💾 Debug image saved: debug-images/image-2-processed-2025-07-04T00-05-23-394Z.png

      at console.<anonymous> (node_modules/jest-mock/build/index.js:631:25)

  console.log
    📄 Metadata saved: debug-images/image-2-processed-2025-07-04T00-05-23-394Z.json

      at console.<anonymous> (node_modules/jest-mock/build/index.js:631:25)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.error
    ❌ PPTXImageProcessor error: Error: Expected valid width, height and channels to create a new input image
        at Sharp._createInputDescriptor (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/sharp/lib/input.js:296:15)
        at new Sharp (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/sharp/lib/constructor.js:391:29)
        at PPTXImageProcessor.Sharp (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/sharp/lib/constructor.js:203:12)
        at PPTXImageProcessor.applyFillRectTransform (/Users/tanghehui/ExploreProject/pptxtojson/app/lib/services/images/PPTXImageProcessor.ts:358:21)
        at PPTXImageProcessor.applyStretchOffset (/Users/tanghehui/ExploreProject/pptxtojson/app/lib/services/images/PPTXImageProcessor.ts:209:31)
        at Object.<anonymous> (/Users/tanghehui/ExploreProject/pptxtojson/tests/__tests__/pptx-image-processor-negative-offset.test.ts:286:7)

      262 |       };
      263 |     } catch (error) {
    > 264 |       console.error("❌ PPTXImageProcessor error:", error);
          |               ^
      265 |       throw new Error(
      266 |         `Image processing failed: ${
      267 |           error instanceof Error ? error.message : "Unknown error"

      at PPTXImageProcessor.applyStretchOffset (app/lib/services/images/PPTXImageProcessor.ts:264:15)
      at Object.<anonymous> (tests/__tests__/pptx-image-processor-negative-offset.test.ts:286:7)

PASS tests/__tests__/error-handling-boundary-conditions.test.ts
  错误处理和边界条件测试
    异常场景测试
      ✓ 应该处理损坏的图片文件而不崩溃 (12 ms)
      ✓ 应该处理极端的fillRect值（如超过±1.0） (24 ms)
      ✓ 应该在系统内存不足时优雅降级 (6 ms)
      ✓ 应该处理Sharp库版本兼容性问题
    配置验证测试
      ✓ 应该验证所有配置参数的有效范围
      ✓ 应该提供清晰的错误消息指导配置修正 (3 ms)
      ✓ 应该验证ImageElement的构造参数
    资源管理和内存泄漏测试
      ✓ 应该正确释放Sharp实例避免内存泄漏 (51 ms)
      ✓ 应该正确清理临时文件和调试资源 (3 ms)
    并发和竞态条件测试
      ✓ 应该正确处理并发图片处理请求 (29 ms)
      ✓ 应该避免资源共享导致的竞态条件 (1 ms)
    数据验证和类型安全
      ✓ 应该验证输入数据的类型和格式 (1 ms)
      ✓ 应该验证fillRect值的数据类型 (4 ms)
      ✓ 应该处理JSON序列化和反序列化边界情况 (1 ms)

  console.error
    ❌ PPTXImageProcessor error: Error: Input buffer contains unsupported image format
        at Sharp.metadata (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/sharp/lib/input.js:549:17)
        at PPTXImageProcessor.applyStretchOffset (/Users/tanghehui/ExploreProject/pptxtojson/app/lib/services/images/PPTXImageProcessor.ts:138:36)
        at Object.<anonymous> (/Users/tanghehui/ExploreProject/pptxtojson/tests/__tests__/pptx-image-processor-negative-offset.test.ts:310:30)
        at Promise.finally.completed (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1559:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1499:10)
        at _callCircusTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1009:40)
        at _runTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:949:3)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:839:13)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
        at run (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:757:3)
        at runAndTransformResultsToJestFormat (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1920:21)
        at jestAdapter (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/runner.js:101:19)
        at runTestInternal (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:272:16)
        at runTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:340:7)
        at Object.worker (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:494:12)

      262 |       };
      263 |     } catch (error) {
    > 264 |       console.error("❌ PPTXImageProcessor error:", error);
          |               ^
      265 |       throw new Error(
      266 |         `Image processing failed: ${
      267 |           error instanceof Error ? error.message : "Unknown error"

      at PPTXImageProcessor.applyStretchOffset (app/lib/services/images/PPTXImageProcessor.ts:264:15)
      at Object.<anonymous> (tests/__tests__/pptx-image-processor-negative-offset.test.ts:310:7)

PASS tests/__tests__/pptx-image-processor-negative-offset.test.ts
  PPTXImageProcessor - Negative Offset Handling
    applyStretchOffset with negative offsets
      ✓ should handle negative left offset without Sharp errors (52 ms)
      ✓ should handle negative offsets on all sides (31 ms)
      ✓ should handle mixed positive and negative offsets (44 ms)
      ✓ should create debug images when enableDebug is true (71 ms)
      ✓ should handle extreme negative offsets that result in invalid display area (9 ms)
      ✓ should calculate correct display dimensions with negative offsets (19 ms)
      ✓ should handle negative fillRect offsets without srcRect (10 ms)
    createConfigFromStretchInfo
      ✓ should create config with negative offset values
    Edge cases and error handling
      ✓ should handle zero-size container gracefully (10 ms)
      ✓ should handle invalid image buffer (2 ms)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    🔧 PPTXImageProcessor: Processing image 100x100

      at PPTXImageProcessor.applyStretchOffset (app/lib/services/images/PPTXImageProcessor.ts:148:17)

  console.log
    📐 Container size: 200x150

      at PPTXImageProcessor.applyStretchOffset (app/lib/services/images/PPTXImageProcessor.ts:151:17)

  console.log
    📍 FillRect offsets: { left: 0, top: 0, right: 0, bottom: 0 }

      at PPTXImageProcessor.applyStretchOffset (app/lib/services/images/PPTXImageProcessor.ts:152:17)

  console.log
    💾 Debug image saved: debug-images/image-1-original-2025-07-04T00-05-23-496Z.png

      at PPTXImageProcessor.saveDebugImage (app/lib/services/images/PPTXImageProcessor.ts:659:15)

  console.log
    📄 Metadata saved: debug-images/image-1-original-2025-07-04T00-05-23-496Z.json

      at PPTXImageProcessor.saveDebugImage (app/lib/services/images/PPTXImageProcessor.ts:662:15)

  console.log
    🎯 Target rect: { x: 0, y: 0, width: 200, height: 150 }

      at PPTXImageProcessor.applyStretchOffset (app/lib/services/images/PPTXImageProcessor.ts:205:17)

  console.log
    🔄 Applying fillRect transform on 100x100 image

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:310:15)

  console.log
    📐 Container: 200x150

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:313:15)

  console.log
    📍 FillRect: L0.000% T0.000% R0.000% B0.000%

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:314:15)

  console.log
    📏 Display area: 200.0x150.0

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:339:15)

  console.log
    📍 Position offset: L0px T0px

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:344:15)

  console.log
    🔄 Resized image to display area: 200x150

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:380:15)

  console.log
    🔧 Rounded values: offset(0, 0), display(200x150)

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:401:15)

  console.log
    🔲 Composited image at position: L0px T0px

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:542:19)

  console.log
    📋 Final image size: 200x150

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:554:15)

  console.log
    ✅ Processing complete: 200x150

      at PPTXImageProcessor.applyStretchOffset (app/lib/services/images/PPTXImageProcessor.ts:235:17)

  console.log
    📋 Applied effects: [ 'fillRect resize: 200x150' ]

      at PPTXImageProcessor.applyStretchOffset (app/lib/services/images/PPTXImageProcessor.ts:238:17)

  console.log
    💾 Debug image saved: debug-images/image-2-processed-2025-07-04T00-05-23-502Z.png

      at PPTXImageProcessor.saveDebugImage (app/lib/services/images/PPTXImageProcessor.ts:659:15)

  console.log
    📄 Metadata saved: debug-images/image-2-processed-2025-07-04T00-05-23-502Z.json

      at PPTXImageProcessor.saveDebugImage (app/lib/services/images/PPTXImageProcessor.ts:662:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    🔧 PPTXImageProcessor: Processing image 100x100

      at PPTXImageProcessor.applyStretchOffset (app/lib/services/images/PPTXImageProcessor.ts:148:17)

  console.log
    📐 Container size: 200x150

      at PPTXImageProcessor.applyStretchOffset (app/lib/services/images/PPTXImageProcessor.ts:151:17)

  console.log
    📍 FillRect offsets: { left: 0.5, top: 0, right: 0, bottom: 0 }

      at PPTXImageProcessor.applyStretchOffset (app/lib/services/images/PPTXImageProcessor.ts:152:17)

  console.log
    💾 Debug image saved: debug-images/image-1-original-2025-07-04T00-05-23-506Z.png

      at PPTXImageProcessor.saveDebugImage (app/lib/services/images/PPTXImageProcessor.ts:659:15)

  console.log
    📄 Metadata saved: debug-images/image-1-original-2025-07-04T00-05-23-506Z.json

      at PPTXImageProcessor.saveDebugImage (app/lib/services/images/PPTXImageProcessor.ts:662:15)

  console.log
    🎯 Target rect: { x: 0, y: 0, width: 200, height: 150 }

      at PPTXImageProcessor.applyStretchOffset (app/lib/services/images/PPTXImageProcessor.ts:205:17)

  console.log
    🔄 Applying fillRect transform on 100x100 image

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:310:15)

  console.log
    📐 Container: 200x150

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:313:15)

  console.log
    📍 FillRect: L50.000% T0.000% R0.000% B0.000%

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:314:15)

  console.log
    📏 Display area: 100.0x150.0

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:339:15)

  console.log
    📍 Position offset: L100px T0px

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:344:15)

  console.log
    🔄 Resized image to display area: 100x150

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:380:15)

  console.log
    🔧 Rounded values: offset(100, 0), display(100x150)

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:401:15)

  console.log
    🔲 Composited image at position: L100px T0px

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:542:19)

  console.log
    📋 Final image size: 200x150

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:554:15)

  console.log
    ✅ Processing complete: 200x150

      at PPTXImageProcessor.applyStretchOffset (app/lib/services/images/PPTXImageProcessor.ts:235:17)

  console.log
    📋 Applied effects: [
      'fillRect stretch: {"left":0.5,"top":0,"right":0,"bottom":0}',
      'transparent padding: Applied fillRect transform'
    ]

      at PPTXImageProcessor.applyStretchOffset (app/lib/services/images/PPTXImageProcessor.ts:238:17)

  console.log
    💾 Debug image saved: debug-images/image-2-processed-2025-07-04T00-05-23-511Z.png

      at PPTXImageProcessor.saveDebugImage (app/lib/services/images/PPTXImageProcessor.ts:659:15)

  console.log
    📄 Metadata saved: debug-images/image-2-processed-2025-07-04T00-05-23-511Z.json

      at PPTXImageProcessor.saveDebugImage (app/lib/services/images/PPTXImageProcessor.ts:662:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    🔧 PPTXImageProcessor: Processing image 100x100

      at PPTXImageProcessor.applyStretchOffset (app/lib/services/images/PPTXImageProcessor.ts:148:17)

  console.log
    📐 Container size: 200x150

      at PPTXImageProcessor.applyStretchOffset (app/lib/services/images/PPTXImageProcessor.ts:151:17)

  console.log
    📍 FillRect offsets: { left: -0.5, top: 0, right: 0, bottom: 0 }

      at PPTXImageProcessor.applyStretchOffset (app/lib/services/images/PPTXImageProcessor.ts:152:17)

  console.log
    💾 Debug image saved: debug-images/image-1-original-2025-07-04T00-05-23-517Z.png

      at PPTXImageProcessor.saveDebugImage (app/lib/services/images/PPTXImageProcessor.ts:659:15)

  console.log
    📄 Metadata saved: debug-images/image-1-original-2025-07-04T00-05-23-517Z.json

      at PPTXImageProcessor.saveDebugImage (app/lib/services/images/PPTXImageProcessor.ts:662:15)

  console.log
    🎯 Target rect: { x: 0, y: 0, width: 200, height: 150 }

      at PPTXImageProcessor.applyStretchOffset (app/lib/services/images/PPTXImageProcessor.ts:205:17)

  console.log
    🔄 Applying fillRect transform on 100x100 image

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:310:15)

  console.log
    📐 Container: 200x150

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:313:15)

  console.log
    📍 FillRect: L-50.000% T0.000% R0.000% B0.000%

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:314:15)

  console.log
    📏 Display area: 300.0x150.0

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:339:15)

  console.log
    📍 Position offset: L-100px T0px

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:344:15)

  console.log
    🔄 Resized image to display area: 300x150

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:380:15)

  console.log
    🔧 Rounded values: offset(-100, 0), display(300x150)

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:401:15)

  console.log
    🔧 Handling negative offsets: L-100px T0px

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:423:17)

  console.log
    ✂️ Cropped image: 200x150 from (100,0)

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:470:19)

  console.log
    🔲 Composited at: L0px T0px

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:473:19)

  console.log
    📋 Final image size: 200x150

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:554:15)

  console.log
    ✅ Processing complete: 200x150

      at PPTXImageProcessor.applyStretchOffset (app/lib/services/images/PPTXImageProcessor.ts:235:17)

  console.log
    📋 Applied effects: [
      'fillRect stretch: {"left":-0.5,"top":0,"right":0,"bottom":0}',
      'transparent padding: Applied fillRect transform'
    ]

      at PPTXImageProcessor.applyStretchOffset (app/lib/services/images/PPTXImageProcessor.ts:238:17)

  console.log
    💾 Debug image saved: debug-images/image-2-processed-2025-07-04T00-05-23-523Z.png

      at PPTXImageProcessor.saveDebugImage (app/lib/services/images/PPTXImageProcessor.ts:659:15)

  console.log
    📄 Metadata saved: debug-images/image-2-processed-2025-07-04T00-05-23-523Z.json

      at PPTXImageProcessor.saveDebugImage (app/lib/services/images/PPTXImageProcessor.ts:662:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    🔧 PPTXImageProcessor: Processing image 100x100

      at PPTXImageProcessor.applyStretchOffset (app/lib/services/images/PPTXImageProcessor.ts:148:17)

  console.log
    📐 Container size: 200x150

      at PPTXImageProcessor.applyStretchOffset (app/lib/services/images/PPTXImageProcessor.ts:151:17)

  console.log
    📍 FillRect offsets: { left: 0, top: 0.5, right: 0, bottom: 0 }

      at PPTXImageProcessor.applyStretchOffset (app/lib/services/images/PPTXImageProcessor.ts:152:17)

  console.log
    💾 Debug image saved: debug-images/image-1-original-2025-07-04T00-05-23-527Z.png

      at PPTXImageProcessor.saveDebugImage (app/lib/services/images/PPTXImageProcessor.ts:659:15)

  console.log
    📄 Metadata saved: debug-images/image-1-original-2025-07-04T00-05-23-527Z.json

      at PPTXImageProcessor.saveDebugImage (app/lib/services/images/PPTXImageProcessor.ts:662:15)

  console.log
    🎯 Target rect: { x: 0, y: 0, width: 200, height: 150 }

      at PPTXImageProcessor.applyStretchOffset (app/lib/services/images/PPTXImageProcessor.ts:205:17)

  console.log
    🔄 Applying fillRect transform on 100x100 image

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:310:15)

  console.log
    📐 Container: 200x150

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:313:15)

  console.log
    📍 FillRect: L0.000% T50.000% R0.000% B0.000%

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:314:15)

  console.log
    📏 Display area: 200.0x75.0

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:339:15)

  console.log
    📍 Position offset: L0px T75px

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:344:15)

  console.log
    🔄 Resized image to display area: 200x75

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:380:15)

  console.log
    🔧 Rounded values: offset(0, 75), display(200x75)

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:401:15)

  console.log
    Loading JSON from URL: https://example.com/large-file.json

      at loadJson (components/MonacoJsonLoader.tsx:47:19)

  console.log
    Attempt 1/3 to fetch JSON from CDN

      at fetchWithTimeout (components/MonacoJsonLoader.tsx:53:25)

  console.log
    🔲 Composited image at position: L0px T75px

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:542:19)

  console.log
    📋 Final image size: 200x150

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:554:15)

  console.log
    Loading JSON file: 12.00MB

      at loadJson (components/MonacoJsonLoader.tsx:107:19)

  console.log
    🔄 Using optimized loading for large file...

      at loadJson (components/MonacoJsonLoader.tsx:112:21)

  console.log
    ✅ Processing complete: 200x150

      at PPTXImageProcessor.applyStretchOffset (app/lib/services/images/PPTXImageProcessor.ts:235:17)

  console.log
    📋 Applied effects: [
      'fillRect stretch: {"left":0,"top":0.5,"right":0,"bottom":0}',
      'transparent padding: Applied fillRect transform'
    ]

      at PPTXImageProcessor.applyStretchOffset (app/lib/services/images/PPTXImageProcessor.ts:238:17)

  console.log
    ✅ Large file loaded successfully (minimized format)

      at loadJson (components/MonacoJsonLoader.tsx:143:21)

  console.log
    📊 Performance note: File size is 12.00MB. For better performance with large files, consider:
                - Using JSONLoader in view-only mode
                - Breaking large files into smaller chunks
                - Using streaming JSON processing

      at loadJson (components/MonacoJsonLoader.tsx:155:21)

  console.log
    💾 Debug image saved: debug-images/image-2-processed-2025-07-04T00-05-23-535Z.png

      at PPTXImageProcessor.saveDebugImage (app/lib/services/images/PPTXImageProcessor.ts:659:15)

  console.log
    📄 Metadata saved: debug-images/image-2-processed-2025-07-04T00-05-23-535Z.json

      at PPTXImageProcessor.saveDebugImage (app/lib/services/images/PPTXImageProcessor.ts:662:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    🔧 PPTXImageProcessor: Processing image 100x100

      at PPTXImageProcessor.applyStretchOffset (app/lib/services/images/PPTXImageProcessor.ts:148:17)

  console.log
    📐 Container size: 200x150

      at PPTXImageProcessor.applyStretchOffset (app/lib/services/images/PPTXImageProcessor.ts:151:17)

  console.log
    📍 FillRect offsets: { left: 0.25, top: 0.25, right: 0.25, bottom: 0.25 }

      at PPTXImageProcessor.applyStretchOffset (app/lib/services/images/PPTXImageProcessor.ts:152:17)

  console.log
    💾 Debug image saved: debug-images/image-1-original-2025-07-04T00-05-23-540Z.png

      at PPTXImageProcessor.saveDebugImage (app/lib/services/images/PPTXImageProcessor.ts:659:15)

  console.log
    📄 Metadata saved: debug-images/image-1-original-2025-07-04T00-05-23-540Z.json

      at PPTXImageProcessor.saveDebugImage (app/lib/services/images/PPTXImageProcessor.ts:662:15)

  console.log
    🎯 Target rect: { x: 0, y: 0, width: 200, height: 150 }

      at PPTXImageProcessor.applyStretchOffset (app/lib/services/images/PPTXImageProcessor.ts:205:17)

  console.log
    🔄 Applying fillRect transform on 100x100 image

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:310:15)

  console.log
    📐 Container: 200x150

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:313:15)

  console.log
    📍 FillRect: L25.000% T25.000% R25.000% B25.000%

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:314:15)

  console.log
    📏 Display area: 100.0x75.0

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:339:15)

  console.log
    📍 Position offset: L50px T38px

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:344:15)

  console.log
    🔄 Resized image to display area: 100x75

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:380:15)

  console.log
    🔧 Rounded values: offset(50, 38), display(100x75)

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:401:15)

  console.log
    🔲 Composited image at position: L50px T38px

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:542:19)

  console.log
    📋 Final image size: 200x150

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:554:15)

  console.log
    ✅ Processing complete: 200x150

      at PPTXImageProcessor.applyStretchOffset (app/lib/services/images/PPTXImageProcessor.ts:235:17)

  console.log
    📋 Applied effects: [
      'fillRect stretch: {"left":0.25,"top":0.25,"right":0.25,"bottom":0.25}',
      'transparent padding: Applied fillRect transform'
    ]

      at PPTXImageProcessor.applyStretchOffset (app/lib/services/images/PPTXImageProcessor.ts:238:17)

  console.log
    💾 Debug image saved: debug-images/image-2-processed-2025-07-04T00-05-23-544Z.png

      at PPTXImageProcessor.saveDebugImage (app/lib/services/images/PPTXImageProcessor.ts:659:15)

  console.log
    📄 Metadata saved: debug-images/image-2-processed-2025-07-04T00-05-23-544Z.json

      at PPTXImageProcessor.saveDebugImage (app/lib/services/images/PPTXImageProcessor.ts:662:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

PASS tests/__tests__/corrected-stretch-logic.test.ts
  修正后的拉伸偏移逻辑测试
    基本 fillRect 行为验证
      ✓ 应该正确处理零偏移（无拉伸） (12 ms)
      ✓ 应该正确处理 left 正值偏移（向内收缩） (9 ms)
      ✓ 应该正确处理 left 负值偏移（向外扩展） (12 ms)
      ✓ 应该正确处理 top 正值偏移（向内收缩） (12 ms)
      ✓ 应该正确处理复合偏移 (9 ms)
    错误处理
      ✓ 应该处理无效的 fillRect 值（总和超过1） (3 ms)
    性能和质量
      ✓ 应该在合理时间内处理图片 (7 ms)

PASS tests/integration/api-integration-background.test.ts
  API Integration - Background Format
    FormData Parameter Handling
      ✓ should accept backgroundFormat parameter in FormData (1 ms)
      ✓ should handle missing backgroundFormat parameter (1 ms)
      ✓ should handle invalid backgroundFormat values
    Response Format Validation
      ✓ should return valid JSON structure for legacy format
      ✓ should return valid JSON structure for pptist format (1 ms)
    Combined Parameters Integration
      ✓ should handle backgroundFormat with CDN upload (1 ms)
      ✓ should handle backgroundFormat with debug options
    Error Scenarios
      ✓ should handle file upload errors gracefully
      ✓ should handle invalid file types (1 ms)
      ✓ should handle parsing errors with backgroundFormat (2 ms)
    Performance and Load Testing
      ✓ should handle concurrent requests with different background formats (1 ms)
      ✓ should complete processing within reasonable time limits (101 ms)
    Backward Compatibility
      ✓ should maintain compatibility with existing API clients (1 ms)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    🔧 PPTXImageProcessor: Processing image 20x20

      at PPTXImageProcessor.applyStretchOffset (app/lib/services/images/PPTXImageProcessor.ts:148:17)

  console.log
    📐 Container size: 200x150

      at PPTXImageProcessor.applyStretchOffset (app/lib/services/images/PPTXImageProcessor.ts:151:17)

  console.log
    📍 FillRect offsets: { left: 0, top: 0, right: 0, bottom: 0 }

      at PPTXImageProcessor.applyStretchOffset (app/lib/services/images/PPTXImageProcessor.ts:152:17)

  console.log
    💾 Debug image saved: debug-images/image-1-original-2025-07-04T00-05-23-604Z.png

      at PPTXImageProcessor.saveDebugImage (app/lib/services/images/PPTXImageProcessor.ts:659:15)

  console.log
    📄 Metadata saved: debug-images/image-1-original-2025-07-04T00-05-23-604Z.json

      at PPTXImageProcessor.saveDebugImage (app/lib/services/images/PPTXImageProcessor.ts:662:15)

  console.log
    🎯 Target rect: { x: 0, y: 0, width: 200, height: 150 }

      at PPTXImageProcessor.applyStretchOffset (app/lib/services/images/PPTXImageProcessor.ts:205:17)

  console.log
    🔄 Applying fillRect transform on 20x20 image

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:310:15)

  console.log
    📐 Container: 200x150

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:313:15)

  console.log
    📍 FillRect: L0.000% T0.000% R0.000% B0.000%

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:314:15)

  console.log
    📏 Display area: 200.0x150.0

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:339:15)

  console.log
    📍 Position offset: L0px T0px

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:344:15)

  console.log
    🔄 Resized image to display area: 200x150

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:380:15)

  console.log
    🔧 Rounded values: offset(0, 0), display(200x150)

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:401:15)

  console.log
    🔲 Composited image at position: L0px T0px

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:542:19)

  console.log
    📋 Final image size: 200x150

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:554:15)

  console.log
    ✅ Processing complete: 200x150

      at PPTXImageProcessor.applyStretchOffset (app/lib/services/images/PPTXImageProcessor.ts:235:17)

  console.log
    📋 Applied effects: [ 'fillRect resize: 200x150' ]

      at PPTXImageProcessor.applyStretchOffset (app/lib/services/images/PPTXImageProcessor.ts:238:17)

  console.log
    💾 Debug image saved: debug-images/image-2-processed-2025-07-04T00-05-23-643Z.png

      at PPTXImageProcessor.saveDebugImage (app/lib/services/images/PPTXImageProcessor.ts:659:15)

  console.log
    📄 Metadata saved: debug-images/image-2-processed-2025-07-04T00-05-23-643Z.json

      at PPTXImageProcessor.saveDebugImage (app/lib/services/images/PPTXImageProcessor.ts:662:15)

  console.log
    Applied effects: [ 'fillRect resize: 200x150' ]

      at Object.<anonymous> (tests/__tests__/transparent-fill-processing.test.ts:100:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    Invalid input 0: {"a:srgbClr":{"attrs":{"val":"GGGGGG"}}} → rgba(0,0,0,1)

      at tests/__tests__/color-processing-advanced.test.ts:215:17
          at Array.forEach (<anonymous>)

  console.log
    Invalid input 1: {"a:srgbClr":{"attrs":{"val":"12345"}}} → rgba(18,52,5,1)

      at tests/__tests__/color-processing-advanced.test.ts:215:17
          at Array.forEach (<anonymous>)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    Invalid input 2: {"a:srgbClr":{"attrs":{"val":""}}} →

      at tests/__tests__/color-processing-advanced.test.ts:215:17
          at Array.forEach (<anonymous>)

  console.log
    Invalid input 3: {"a:srgbClr":{"attrs":{"val":"invalid"}}} → rgba(0,0,0,1)

      at tests/__tests__/color-processing-advanced.test.ts:215:17
          at Array.forEach (<anonymous>)

  console.log
    minimum value (0): rgba(0,0,0,1)

      at tests/__tests__/color-processing-advanced.test.ts:260:17
          at Array.forEach (<anonymous>)

  console.log
    full value (100000): rgba(128,128,128,1)

      at tests/__tests__/color-processing-advanced.test.ts:260:17
          at Array.forEach (<anonymous>)

  console.log
    double value (200000): rgba(255,255,255,1)

      at tests/__tests__/color-processing-advanced.test.ts:260:17
          at Array.forEach (<anonymous>)

  console.log
    tiny value (1): rgba(0,0,0,1)

      at tests/__tests__/color-processing-advanced.test.ts:260:17
          at Array.forEach (<anonymous>)

  console.log
    HSL(0, 100%, 50%) → rgba(0,255,255,1)

      at tests/__tests__/color-processing-advanced.test.ts:292:17
          at Array.forEach (<anonymous>)

  console.log
    HSL(360, 100%, 50%) → rgba(255,255,255,1)

      at tests/__tests__/color-processing-advanced.test.ts:292:17
          at Array.forEach (<anonymous>)

  console.log
    HSL(180, 0%, 50%) → rgba(255,255,255,1)

      at tests/__tests__/color-processing-advanced.test.ts:292:17
          at Array.forEach (<anonymous>)

  console.log
    长时间运行性能测试: 5轮, 性能比率: 1.00

      at Object.<anonymous> (tests/__tests__/performance-reliability-comprehensive.test.ts:355:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    HSL(120, 100%, 0%) → rgba(0,0,0,1)

      at tests/__tests__/color-processing-advanced.test.ts:292:17
          at Array.forEach (<anonymous>)

  console.log
    HSL(240, 100%, 100%) → rgba(255,255,255,1)

      at tests/__tests__/color-processing-advanced.test.ts:292:17
          at Array.forEach (<anonymous>)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    Processed 1000 color transformations in 33.88ms

      at Object.<anonymous> (tests/__tests__/color-processing-advanced.test.ts:410:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    Memory increase after 10000 operations: -4.26MB

      at Object.<anonymous> (tests/__tests__/color-processing-advanced.test.ts:439:15)

PASS tests/__tests__/color-processing-advanced.test.ts
  Advanced Color Processing Algorithms
    Complex Color Transform Chains
      ✓ should apply color transforms in PowerPoint order: Alpha → HueMod → LumMod → Shade (1 ms)
      ✓ should handle full transform chain with all modifiers
      ✓ should handle transform chain with percentage calculations (1 ms)
    Theme Color Inheritance
      ✓ should resolve deep theme color inheritance chains
      ✓ should handle missing theme gracefully
      ✓ should detect and handle circular theme references
    Invalid Color Value Fallbacks
      ✓ should handle invalid hex color values (4 ms)
      ✓ should handle invalid transform values
      ✓ should handle edge case percentage values (2 ms)
    HSL Color Space Processing
      ✓ should handle HSL boundary values correctly (8 ms)
      ✓ should maintain color precision through HSL conversions
    Color Format Consistency
      ✓ should always return rgba() format regardless of input type (1 ms)
      ✓ should maintain consistent alpha channel handling
    Performance and Memory
      ✓ should handle large numbers of color transformations efficiently (35 ms)
      ✓ should not leak memory during repeated operations (27 ms)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.error
    ❌ PPTXImageProcessor error: Error: Expected valid width, height and channels to create a new input image
        at Sharp._createInputDescriptor (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/sharp/lib/input.js:296:15)
        at new Sharp (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/sharp/lib/constructor.js:391:29)
        at PPTXImageProcessor.Sharp (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/sharp/lib/constructor.js:203:12)
        at PPTXImageProcessor.applyFillRectTransform (/Users/tanghehui/ExploreProject/pptxtojson/app/lib/services/images/PPTXImageProcessor.ts:358:21)
        at PPTXImageProcessor.applyStretchOffset (/Users/tanghehui/ExploreProject/pptxtojson/app/lib/services/images/PPTXImageProcessor.ts:209:31)
        at Object.<anonymous> (/Users/tanghehui/ExploreProject/pptxtojson/tests/__tests__/transparent-fill-processing.test.ts:324:7)

      262 |       };
      263 |     } catch (error) {
    > 264 |       console.error("❌ PPTXImageProcessor error:", error);
          |               ^
      265 |       throw new Error(
      266 |         `Image processing failed: ${
      267 |           error instanceof Error ? error.message : "Unknown error"

      at PPTXImageProcessor.applyStretchOffset (app/lib/services/images/PPTXImageProcessor.ts:264:15)
      at Object.<anonymous> (tests/__tests__/transparent-fill-processing.test.ts:324:7)

PASS tests/__tests__/transparent-fill-processing.test.ts
  透明填充处理测试
    基本透明填充功能
      ✓ 应该将小图片用透明背景填充到容器尺寸 (48 ms)
      ✓ 应该处理带有拉伸偏移的图片并保持容器尺寸 (7 ms)
      ✓ 应该处理源图裁剪并用透明背景填充 (7 ms)
    边界情况处理
      ✓ 应该处理极小容器尺寸 (4 ms)
      ✓ 应该处理非常大的容器尺寸 (36 ms)
      ✓ 应该处理零偏移值 (8 ms)
    复合效果测试
      ✓ 应该同时处理srcRect裁剪和fillRect拉伸偏移 (12 ms)
      ✓ 应该在调试模式下提供详细信息 (21 ms)
    错误处理
      ✓ 应该处理无效的fillRect值 (5 ms)
      ✓ 应该处理无效的容器尺寸 (11 ms)

  console.log
    Average duration: 2.475948249999874ms

      at Object.<anonymous> (tests/__tests__/color-processing-consistency.test.ts:358:15)

  console.log
    srgbClr: 1.7817089999998643ms (diff: 0.6942392500000096ms)

      at tests/__tests__/color-processing-consistency.test.ts:361:17
          at Array.forEach (<anonymous>)

  console.log
    prstClr: 3.986917000000176ms (diff: 1.510968750000302ms)

      at tests/__tests__/color-processing-consistency.test.ts:361:17
          at Array.forEach (<anonymous>)

  console.log
    hslClr: 2.4678329999997004ms (diff: 0.008115250000173546ms)

      at tests/__tests__/color-processing-consistency.test.ts:361:17
          at Array.forEach (<anonymous>)

  console.log
    scrgbClr: 1.6673339999997552ms (diff: 0.8086142500001188ms)

      at tests/__tests__/color-processing-consistency.test.ts:361:17
          at Array.forEach (<anonymous>)

PASS tests/__tests__/color-processing-consistency.test.ts
  Color Processing Consistency Tests
    Format standardization
      ✓ should output rgba format consistently across all color types (1 ms)
      ✓ should maintain precision across processors
      ✓ should handle transparency consistently
      ✓ should format alpha values consistently
    Cross-processor consistency
      ✓ should produce same colors for same inputs across processors (1 ms)
      ✓ should maintain theme color references consistently
      ✓ should handle transformation chains consistently
      ✓ should maintain precision in color format conversions (1 ms)
    Transformation consistency
      ✓ should apply equivalent transformations consistently (1 ms)
      ✓ should handle transformation order consistently
      ✓ should maintain transformation bounds consistently (5 ms)
    Edge case consistency
      ✓ should handle null/undefined inputs consistently
      ✓ should handle malformed color data consistently
      ✓ should handle extreme color values consistently
    Performance consistency
      ✓ should maintain consistent performance across color types (13 ms)
      ✓ should maintain consistent memory usage (31 ms)
    Backwards compatibility
      ✓ should maintain compatibility with existing color formats (1 ms)
      ✓ should preserve color property naming conventions

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    [Slide 1] Processing p:sp - Name: "Text 0", ID: 3, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 1] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 1] Processing p:sp - Name: "Text 1", ID: 4, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 1] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 1] Processing p:sp - Name: "Text 2", ID: 5, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 1] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 1] Processing p:sp - Name: "Shape 3", ID: 6, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 1] Processed as shape

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 1] Processing p:sp - Name: "Shape 4", ID: 7, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 1] Processed as shape

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 1] Processing p:sp - Name: "Shape 5", ID: 8, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 1] Processed as shape

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 1] Processing p:pic - Name: "Image 0", ID: 9, HasBlipFill: true

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.warn
    FillRect would cause division by zero in ImageElement zY4rXdNyYO: {
      left: 0.29807407407407405,
      top: 0.3317991769547326,
      right: 0.7019259259259258,
      bottom: 0.6682008230452674,
      widthDenominator: 1.1102230246251565e-16,
      heightDenominator: 0
    }

      126 |       
      127 |       if (widthDenominator <= 0.001 || heightDenominator <= 0.001) {
    > 128 |         console.warn(`FillRect would cause division by zero in ImageElement ${this.id}:`, {
          |                 ^
      129 |           left, top, right, bottom,
      130 |           widthDenominator, heightDenominator
      131 |         });

      at ImageElement.getStretchInfo (app/lib/models/domain/elements/ImageElement.ts:128:17)
      at ImageProcessingService.processImageElementWithEmbedId (app/lib/services/images/ImageProcessingService.ts:82:40)
      at ImageProcessor.process (app/lib/services/element/processors/ImageProcessor.ts:266:11)
      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:243:26)
      at SlideParser.parseElements (app/lib/services/parsing/SlideParser.ts:196:28)
      at SlideParser.parse (app/lib/services/parsing/SlideParser.ts:76:24)
      at PresentationParser.parse (app/lib/services/parsing/PresentationParser.ts:70:25)
      at InternalPPTXParser.parse (app/lib/parser/InternalPPTXParser.ts:124:35)
      at InternalPPTXParser.parseToJSON (app/lib/parser/InternalPPTXParser.ts:158:20)
      at parse (app/lib/pptxtojson.ts:11:18)
      at Object.<anonymous> (tests/dimension-analysis.test.ts:21:22)

  console.log
    [Slide 1] Processed as image

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 2] Processing p:sp - Name: "Text 0", ID: 3, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 2] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 2] Processing p:sp - Name: "Text 1", ID: 4, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 2] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 2] Processing p:sp - Name: "Text 2", ID: 5, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 2] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 2] Processing p:sp - Name: "Text 3", ID: 6, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 2] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 2] Processing p:sp - Name: "Text 4", ID: 7, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 2] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 2] Processing p:sp - Name: "Text 5", ID: 8, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 2] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 2] Processing p:sp - Name: "Text 6", ID: 9, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 2] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 2] Processing p:sp - Name: "Text 7", ID: 10, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 2] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 2] Processing p:sp - Name: "Text 8", ID: 11, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 2] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 2] Processing p:sp - Name: "Text 9", ID: 12, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 2] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 2] Processing p:sp - Name: "Text 10", ID: 13, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 2] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 2] Processing p:sp - Name: "Text 11", ID: 14, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 2] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 2] Processing p:sp - Name: "Text 12", ID: 15, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 2] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 2] Processing p:sp - Name: "Text 13", ID: 16, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 2] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 3] Processing p:sp - Name: "Text 0", ID: 2, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 3] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 3] Processing p:sp - Name: "Text 1", ID: 3, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 3] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    
    === 尺寸转换分析报告 ===

      at Object.<anonymous> (tests/dimension-analysis.test.ts:34:15)

  console.log
    幻灯片 1:

      at tests/dimension-analysis.test.ts:53:19
          at Array.forEach (<anonymous>)

  console.log
      元素 1 (text):

      at tests/dimension-analysis.test.ts:88:21
          at Array.forEach (<anonymous>)

  console.log
        期望尺寸: 551.8 × 182.0

      at tests/dimension-analysis.test.ts:89:21
          at Array.forEach (<anonymous>)

  console.log
        实际尺寸: 529.7 × 174.7

      at tests/dimension-analysis.test.ts:94:21
          at Array.forEach (<anonymous>)

  console.log
        宽度比例: 0.960 (差异: -22.1px)

      at tests/dimension-analysis.test.ts:99:21
          at Array.forEach (<anonymous>)

  console.log
        高度比例: 0.960 (差异: -7.3px)

      at tests/dimension-analysis.test.ts:104:21
          at Array.forEach (<anonymous>)

  console.log


      at tests/dimension-analysis.test.ts:109:21
          at Array.forEach (<anonymous>)

  console.log
      元素 2 (text):

      at tests/dimension-analysis.test.ts:88:21
          at Array.forEach (<anonymous>)

  console.log
        期望尺寸: 379.2 × 53.0

      at tests/dimension-analysis.test.ts:89:21
          at Array.forEach (<anonymous>)

  console.log
        实际尺寸: 364.0 × 50.9

      at tests/dimension-analysis.test.ts:94:21
          at Array.forEach (<anonymous>)

  console.log
        宽度比例: 0.960 (差异: -15.2px)

      at tests/dimension-analysis.test.ts:99:21
          at Array.forEach (<anonymous>)

  console.log
        高度比例: 0.960 (差异: -2.1px)

      at tests/dimension-analysis.test.ts:104:21
          at Array.forEach (<anonymous>)

  console.log


      at tests/dimension-analysis.test.ts:109:21
          at Array.forEach (<anonymous>)

  console.log
      元素 3 (text):

      at tests/dimension-analysis.test.ts:88:21
          at Array.forEach (<anonymous>)

  console.log
        期望尺寸: 266.0 × 50.0

      at tests/dimension-analysis.test.ts:89:21
          at Array.forEach (<anonymous>)

  console.log
        实际尺寸: 255.4 × 48.0

      at tests/dimension-analysis.test.ts:94:21
          at Array.forEach (<anonymous>)

  console.log
        宽度比例: 0.960 (差异: -10.6px)

      at tests/dimension-analysis.test.ts:99:21
          at Array.forEach (<anonymous>)

  console.log
        高度比例: 0.960 (差异: -2.0px)

      at tests/dimension-analysis.test.ts:104:21
          at Array.forEach (<anonymous>)

  console.log


      at tests/dimension-analysis.test.ts:109:21
          at Array.forEach (<anonymous>)

  console.log
      元素 4 (shape):

      at tests/dimension-analysis.test.ts:88:21
          at Array.forEach (<anonymous>)

  console.log
        期望尺寸: 20.0 × 20.0

      at tests/dimension-analysis.test.ts:89:21
          at Array.forEach (<anonymous>)

  console.log
        实际尺寸: 19.2 × 19.2

      at tests/dimension-analysis.test.ts:94:21
          at Array.forEach (<anonymous>)

  console.log
        宽度比例: 0.960 (差异: -0.8px)

      at tests/dimension-analysis.test.ts:99:21
          at Array.forEach (<anonymous>)

  console.log
        高度比例: 0.960 (差异: -0.8px)

      at tests/dimension-analysis.test.ts:104:21
          at Array.forEach (<anonymous>)

  console.log


      at tests/dimension-analysis.test.ts:109:21
          at Array.forEach (<anonymous>)

  console.log
      元素 5 (shape):

      at tests/dimension-analysis.test.ts:88:21
          at Array.forEach (<anonymous>)

  console.log
        期望尺寸: 20.0 × 20.0

      at tests/dimension-analysis.test.ts:89:21
          at Array.forEach (<anonymous>)

  console.log
        实际尺寸: 19.2 × 19.2

      at tests/dimension-analysis.test.ts:94:21
          at Array.forEach (<anonymous>)

  console.log
        宽度比例: 0.960 (差异: -0.8px)

      at tests/dimension-analysis.test.ts:99:21
          at Array.forEach (<anonymous>)

  console.log
        高度比例: 0.960 (差异: -0.8px)

      at tests/dimension-analysis.test.ts:104:21
          at Array.forEach (<anonymous>)

  console.log


      at tests/dimension-analysis.test.ts:109:21
          at Array.forEach (<anonymous>)

  console.log
      元素 6 (shape):

      at tests/dimension-analysis.test.ts:88:21
          at Array.forEach (<anonymous>)

  console.log
        期望尺寸: 20.0 × 20.0

      at tests/dimension-analysis.test.ts:89:21
          at Array.forEach (<anonymous>)

  console.log
        实际尺寸: 19.2 × 19.2

      at tests/dimension-analysis.test.ts:94:21
          at Array.forEach (<anonymous>)

  console.log
        宽度比例: 0.960 (差异: -0.8px)

      at tests/dimension-analysis.test.ts:99:21
          at Array.forEach (<anonymous>)

  console.log
        高度比例: 0.960 (差异: -0.8px)

      at tests/dimension-analysis.test.ts:104:21
          at Array.forEach (<anonymous>)

  console.log


      at tests/dimension-analysis.test.ts:109:21
          at Array.forEach (<anonymous>)

  console.log
      元素 7 (image):

      at tests/dimension-analysis.test.ts:88:21
          at Array.forEach (<anonymous>)

  console.log
        期望尺寸: 231.4 × 231.4

      at tests/dimension-analysis.test.ts:89:21
          at Array.forEach (<anonymous>)

  console.log
        实际尺寸: 222.2 × 222.2

      at tests/dimension-analysis.test.ts:94:21
          at Array.forEach (<anonymous>)

  console.log
        宽度比例: 0.960 (差异: -9.3px)

      at tests/dimension-analysis.test.ts:99:21
          at Array.forEach (<anonymous>)

PASS tests/__tests__/id-generator-pptist.test.ts
  IdGenerator PPTist Style
    PPTist-style ID format
      ✓ should generate IDs in PPTist format when no original ID provided (1 ms)
      ✓ should generate unique IDs across multiple calls (11 ms)
      ✓ should generate 10-character IDs by default
      ✓ should include mix of letters, numbers, and occasional special characters (2 ms)
    PPTist ID recognition
      ✓ should recognize and preserve valid PPTist-like IDs for shapes
      ✓ should reject invalid ID formats and generate new ones (1 ms)
      ✓ should handle duplicate PPTist IDs by generating new ones
      ✓ should only apply PPTist recognition to shape elements
    ID collision handling
      ✓ should handle collisions in PPTist-style generation (42 ms)
      ✓ should maintain used IDs state correctly
    Integration with actual PPTist examples
      ✓ should generate IDs similar to PPTist examples (2 ms)
      ✓ should be compatible with PPTist ID validation (1 ms)
    Reset functionality
      ✓ should allow ID reuse after reset
      ✓ should clear all used IDs on reset

  console.log
        高度比例: 0.960 (差异: -9.3px)

      at tests/dimension-analysis.test.ts:104:21
          at Array.forEach (<anonymous>)

  console.log


      at tests/dimension-analysis.test.ts:109:21
          at Array.forEach (<anonymous>)

  console.log
    幻灯片 2:

      at tests/dimension-analysis.test.ts:53:19
          at Array.forEach (<anonymous>)

  console.log
      元素 1 (text):

      at tests/dimension-analysis.test.ts:88:21
          at Array.forEach (<anonymous>)

  console.log
        期望尺寸: 471.7 × 119.0

      at tests/dimension-analysis.test.ts:89:21
          at Array.forEach (<anonymous>)

  console.log
        实际尺寸: 452.8 × 114.2

      at tests/dimension-analysis.test.ts:94:21
          at Array.forEach (<anonymous>)

  console.log
        宽度比例: 0.960 (差异: -18.9px)

      at tests/dimension-analysis.test.ts:99:21
          at Array.forEach (<anonymous>)

  console.log
        高度比例: 0.960 (差异: -4.8px)

      at tests/dimension-analysis.test.ts:104:21
          at Array.forEach (<anonymous>)

  console.log


      at tests/dimension-analysis.test.ts:109:21
          at Array.forEach (<anonymous>)

  console.log
      元素 2 (text):

      at tests/dimension-analysis.test.ts:88:21
          at Array.forEach (<anonymous>)

  console.log
        期望尺寸: 183.3 × 80.0

      at tests/dimension-analysis.test.ts:89:21
          at Array.forEach (<anonymous>)

  console.log
        实际尺寸: 175.9 × 76.8

      at tests/dimension-analysis.test.ts:94:21
          at Array.forEach (<anonymous>)

  console.log
        宽度比例: 0.960 (差异: -7.3px)

      at tests/dimension-analysis.test.ts:99:21
          at Array.forEach (<anonymous>)

  console.log
        高度比例: 0.960 (差异: -3.2px)

      at tests/dimension-analysis.test.ts:104:21
          at Array.forEach (<anonymous>)

  console.log


      at tests/dimension-analysis.test.ts:109:21
          at Array.forEach (<anonymous>)

  console.log
      元素 3 (text):

      at tests/dimension-analysis.test.ts:88:21
          at Array.forEach (<anonymous>)

  console.log
        期望尺寸: 354.0 × 56.0

      at tests/dimension-analysis.test.ts:89:21
          at Array.forEach (<anonymous>)

  console.log
        实际尺寸: 339.8 × 53.8

      at tests/dimension-analysis.test.ts:94:21
          at Array.forEach (<anonymous>)

  console.log
        宽度比例: 0.960 (差异: -14.2px)

      at tests/dimension-analysis.test.ts:99:21
          at Array.forEach (<anonymous>)

  console.log
        高度比例: 0.960 (差异: -2.2px)

      at tests/dimension-analysis.test.ts:104:21
          at Array.forEach (<anonymous>)

  console.log


      at tests/dimension-analysis.test.ts:109:21
          at Array.forEach (<anonymous>)

  console.log
      元素 4 (text):

      at tests/dimension-analysis.test.ts:88:21
          at Array.forEach (<anonymous>)

  console.log
        期望尺寸: 78.0 × 68.0

      at tests/dimension-analysis.test.ts:89:21
          at Array.forEach (<anonymous>)

  console.log
        实际尺寸: 74.9 × 65.3

      at tests/dimension-analysis.test.ts:94:21
          at Array.forEach (<anonymous>)

  console.log
        宽度比例: 0.960 (差异: -3.1px)

      at tests/dimension-analysis.test.ts:99:21
          at Array.forEach (<anonymous>)

  console.log
        高度比例: 0.960 (差异: -2.7px)

      at tests/dimension-analysis.test.ts:104:21
          at Array.forEach (<anonymous>)

  console.log


      at tests/dimension-analysis.test.ts:109:21
          at Array.forEach (<anonymous>)

  console.log
      元素 5 (text):

      at tests/dimension-analysis.test.ts:88:21
          at Array.forEach (<anonymous>)

  console.log
        期望尺寸: 354.0 × 56.0

      at tests/dimension-analysis.test.ts:89:21
          at Array.forEach (<anonymous>)

  console.log
        实际尺寸: 339.8 × 53.8

      at tests/dimension-analysis.test.ts:94:21
          at Array.forEach (<anonymous>)

  console.log
        宽度比例: 0.960 (差异: -14.2px)

      at tests/dimension-analysis.test.ts:99:21
          at Array.forEach (<anonymous>)

  console.log
        高度比例: 0.960 (差异: -2.2px)

      at tests/dimension-analysis.test.ts:104:21
          at Array.forEach (<anonymous>)

  console.log


      at tests/dimension-analysis.test.ts:109:21
          at Array.forEach (<anonymous>)

  console.log
      元素 6 (text):

      at tests/dimension-analysis.test.ts:88:21
          at Array.forEach (<anonymous>)

  console.log
        期望尺寸: 78.0 × 68.0

      at tests/dimension-analysis.test.ts:89:21
          at Array.forEach (<anonymous>)

  console.log
        实际尺寸: 74.9 × 65.3

      at tests/dimension-analysis.test.ts:94:21
          at Array.forEach (<anonymous>)

  console.log
        宽度比例: 0.960 (差异: -3.1px)

      at tests/dimension-analysis.test.ts:99:21
          at Array.forEach (<anonymous>)

  console.log
        高度比例: 0.960 (差异: -2.7px)

      at tests/dimension-analysis.test.ts:104:21
          at Array.forEach (<anonymous>)

  console.log


      at tests/dimension-analysis.test.ts:109:21
          at Array.forEach (<anonymous>)

  console.log
      元素 7 (text):

      at tests/dimension-analysis.test.ts:88:21
          at Array.forEach (<anonymous>)

  console.log
        期望尺寸: 354.0 × 56.0

      at tests/dimension-analysis.test.ts:89:21
          at Array.forEach (<anonymous>)

  console.log
        实际尺寸: 339.8 × 53.8

      at tests/dimension-analysis.test.ts:94:21
          at Array.forEach (<anonymous>)

  console.log
        宽度比例: 0.960 (差异: -14.2px)

      at tests/dimension-analysis.test.ts:99:21
          at Array.forEach (<anonymous>)

  console.log
        高度比例: 0.960 (差异: -2.2px)

      at tests/dimension-analysis.test.ts:104:21
          at Array.forEach (<anonymous>)

  console.log


      at tests/dimension-analysis.test.ts:109:21
          at Array.forEach (<anonymous>)

  console.log
      元素 8 (text):

      at tests/dimension-analysis.test.ts:88:21
          at Array.forEach (<anonymous>)

  console.log
        期望尺寸: 78.0 × 68.0

      at tests/dimension-analysis.test.ts:89:21
          at Array.forEach (<anonymous>)

  console.log
        实际尺寸: 74.9 × 65.3

      at tests/dimension-analysis.test.ts:94:21
          at Array.forEach (<anonymous>)

  console.log
        宽度比例: 0.960 (差异: -3.1px)

      at tests/dimension-analysis.test.ts:99:21
          at Array.forEach (<anonymous>)

  console.log
        高度比例: 0.960 (差异: -2.7px)

      at tests/dimension-analysis.test.ts:104:21
          at Array.forEach (<anonymous>)

  console.log


      at tests/dimension-analysis.test.ts:109:21
          at Array.forEach (<anonymous>)

  console.log
      元素 9 (text):

      at tests/dimension-analysis.test.ts:88:21
          at Array.forEach (<anonymous>)

  console.log
        期望尺寸: 354.0 × 56.0

      at tests/dimension-analysis.test.ts:89:21
          at Array.forEach (<anonymous>)

  console.log
        实际尺寸: 339.8 × 53.8

      at tests/dimension-analysis.test.ts:94:21
          at Array.forEach (<anonymous>)

  console.log
        宽度比例: 0.960 (差异: -14.2px)

      at tests/dimension-analysis.test.ts:99:21
          at Array.forEach (<anonymous>)

  console.log
        高度比例: 0.960 (差异: -2.2px)

      at tests/dimension-analysis.test.ts:104:21
          at Array.forEach (<anonymous>)

  console.log


      at tests/dimension-analysis.test.ts:109:21
          at Array.forEach (<anonymous>)

  console.log
      元素 10 (text):

      at tests/dimension-analysis.test.ts:88:21
          at Array.forEach (<anonymous>)

  console.log
        期望尺寸: 78.0 × 68.0

      at tests/dimension-analysis.test.ts:89:21
          at Array.forEach (<anonymous>)

  console.log
        实际尺寸: 74.9 × 65.3

      at tests/dimension-analysis.test.ts:94:21
          at Array.forEach (<anonymous>)

  console.log
        宽度比例: 0.960 (差异: -3.1px)

      at tests/dimension-analysis.test.ts:99:21
          at Array.forEach (<anonymous>)

  console.log
        高度比例: 0.960 (差异: -2.7px)

      at tests/dimension-analysis.test.ts:104:21
          at Array.forEach (<anonymous>)

  console.log


      at tests/dimension-analysis.test.ts:109:21
          at Array.forEach (<anonymous>)

  console.log
      元素 11 (text):

      at tests/dimension-analysis.test.ts:88:21
          at Array.forEach (<anonymous>)

  console.log
        期望尺寸: 354.0 × 56.0

      at tests/dimension-analysis.test.ts:89:21
          at Array.forEach (<anonymous>)

  console.log
        实际尺寸: 339.8 × 53.8

      at tests/dimension-analysis.test.ts:94:21
          at Array.forEach (<anonymous>)

  console.log
        宽度比例: 0.960 (差异: -14.2px)

      at tests/dimension-analysis.test.ts:99:21
          at Array.forEach (<anonymous>)

  console.log
        高度比例: 0.960 (差异: -2.2px)

      at tests/dimension-analysis.test.ts:104:21
          at Array.forEach (<anonymous>)

  console.log


      at tests/dimension-analysis.test.ts:109:21
          at Array.forEach (<anonymous>)

  console.log
      元素 12 (text):

      at tests/dimension-analysis.test.ts:88:21
          at Array.forEach (<anonymous>)

  console.log
        期望尺寸: 78.0 × 68.0

      at tests/dimension-analysis.test.ts:89:21
          at Array.forEach (<anonymous>)

  console.log
        实际尺寸: 74.9 × 65.3

      at tests/dimension-analysis.test.ts:94:21
          at Array.forEach (<anonymous>)

  console.log
        宽度比例: 0.960 (差异: -3.1px)

      at tests/dimension-analysis.test.ts:99:21
          at Array.forEach (<anonymous>)

  console.log
        高度比例: 0.960 (差异: -2.7px)

      at tests/dimension-analysis.test.ts:104:21
          at Array.forEach (<anonymous>)

  console.log


      at tests/dimension-analysis.test.ts:109:21
          at Array.forEach (<anonymous>)

  console.log
      元素 13 (text):

      at tests/dimension-analysis.test.ts:88:21
          at Array.forEach (<anonymous>)

  console.log
        期望尺寸: 354.0 × 56.0

      at tests/dimension-analysis.test.ts:89:21
          at Array.forEach (<anonymous>)

  console.log
        实际尺寸: 339.8 × 53.8

      at tests/dimension-analysis.test.ts:94:21
          at Array.forEach (<anonymous>)

  console.log
        宽度比例: 0.960 (差异: -14.2px)

      at tests/dimension-analysis.test.ts:99:21
          at Array.forEach (<anonymous>)

  console.log
        高度比例: 0.960 (差异: -2.2px)

      at tests/dimension-analysis.test.ts:104:21
          at Array.forEach (<anonymous>)

  console.log


      at tests/dimension-analysis.test.ts:109:21
          at Array.forEach (<anonymous>)

  console.log
      元素 14 (text):

      at tests/dimension-analysis.test.ts:88:21
          at Array.forEach (<anonymous>)

  console.log
        期望尺寸: 78.0 × 68.0

      at tests/dimension-analysis.test.ts:89:21
          at Array.forEach (<anonymous>)

  console.log
        实际尺寸: 74.9 × 65.3

      at tests/dimension-analysis.test.ts:94:21
          at Array.forEach (<anonymous>)

  console.log
        宽度比例: 0.960 (差异: -3.1px)

      at tests/dimension-analysis.test.ts:99:21
          at Array.forEach (<anonymous>)

  console.log
        高度比例: 0.960 (差异: -2.7px)

      at tests/dimension-analysis.test.ts:104:21
          at Array.forEach (<anonymous>)

  console.log


      at tests/dimension-analysis.test.ts:109:21
          at Array.forEach (<anonymous>)

  console.log
    高频率小图片测试: 50个请求, 293ms

      at Object.<anonymous> (tests/__tests__/performance-reliability-comprehensive.test.ts:387:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    幻灯片 3:

      at tests/dimension-analysis.test.ts:53:19
          at Array.forEach (<anonymous>)

  console.log
      元素 1 (text):

      at tests/dimension-analysis.test.ts:88:21
          at Array.forEach (<anonymous>)

  console.log
        期望尺寸: 81.1 × 60.0

      at tests/dimension-analysis.test.ts:89:21
          at Array.forEach (<anonymous>)

  console.log
        实际尺寸: 77.8 × 57.6

      at tests/dimension-analysis.test.ts:94:21
          at Array.forEach (<anonymous>)

  console.log
        宽度比例: 0.960 (差异: -3.2px)

      at tests/dimension-analysis.test.ts:99:21
          at Array.forEach (<anonymous>)

  console.log
        高度比例: 0.960 (差异: -2.4px)

      at tests/dimension-analysis.test.ts:104:21
          at Array.forEach (<anonymous>)

  console.log


      at tests/dimension-analysis.test.ts:109:21
          at Array.forEach (<anonymous>)

  console.log
      元素 2 (text):

      at tests/dimension-analysis.test.ts:88:21
          at Array.forEach (<anonymous>)

  console.log
        期望尺寸: 552.9 × 80.0

      at tests/dimension-analysis.test.ts:89:21
          at Array.forEach (<anonymous>)

  console.log
        实际尺寸: 530.8 × 76.8

      at tests/dimension-analysis.test.ts:94:21
          at Array.forEach (<anonymous>)

  console.log
        宽度比例: 0.960 (差异: -22.1px)

      at tests/dimension-analysis.test.ts:99:21
          at Array.forEach (<anonymous>)

  console.log
        高度比例: 0.960 (差异: -3.2px)

      at tests/dimension-analysis.test.ts:104:21
          at Array.forEach (<anonymous>)

  console.log


      at tests/dimension-analysis.test.ts:109:21
          at Array.forEach (<anonymous>)

  console.log
    === 统计分析 ===

      at Object.<anonymous> (tests/dimension-analysis.test.ts:115:15)

  console.log
    平均宽度比例: 0.960

      at Object.<anonymous> (tests/dimension-analysis.test.ts:131:15)

  console.log
    平均高度比例: 0.960

      at Object.<anonymous> (tests/dimension-analysis.test.ts:132:15)

  console.log
    宽度比例范围: 0.960 - 0.960

      at Object.<anonymous> (tests/dimension-analysis.test.ts:133:15)

  console.warn
    No relationship found for embedId: nonexistent

      39 |       if (!relationship) {
      40 |         DebugHelper.log(context, `No relationship found for embedId: ${embedId}`, "warn");
    > 41 |         console.warn(`No relationship found for embedId: ${embedId}`);
         |                 ^
      42 |         return null;
      43 |       }
      44 |

      at ImageDataService.extractImageData (app/lib/services/images/ImageDataService.ts:41:17)
      at Object.<anonymous> (tests/__tests__/services/ImageDataService.test.ts:102:41)

  console.log
    高度比例范围: 0.960 - 0.960

      at Object.<anonymous> (tests/dimension-analysis.test.ts:138:15)

  console.log
    
    === 按元素类型分析 ===

      at Object.<anonymous> (tests/dimension-analysis.test.ts:145:15)

  console.log
    text 元素 (19个):

      at tests/dimension-analysis.test.ts:165:17
          at Array.forEach (<anonymous>)

  console.log
      平均宽度比例: 0.960

      at tests/dimension-analysis.test.ts:166:17
          at Array.forEach (<anonymous>)

  console.log
      平均高度比例: 0.960

      at tests/dimension-analysis.test.ts:167:17
          at Array.forEach (<anonymous>)

  console.log
    shape 元素 (3个):

      at tests/dimension-analysis.test.ts:165:17
          at Array.forEach (<anonymous>)

  console.log
      平均宽度比例: 0.960

      at tests/dimension-analysis.test.ts:166:17
          at Array.forEach (<anonymous>)

  console.log
      平均高度比例: 0.960

      at tests/dimension-analysis.test.ts:167:17
          at Array.forEach (<anonymous>)

  console.log
    image 元素 (1个):

      at tests/dimension-analysis.test.ts:165:17
          at Array.forEach (<anonymous>)

  console.log
      平均宽度比例: 0.960

      at tests/dimension-analysis.test.ts:166:17
          at Array.forEach (<anonymous>)

  console.log
      平均高度比例: 0.960

      at tests/dimension-analysis.test.ts:167:17
          at Array.forEach (<anonymous>)

  console.log
    
    === 转换常数分析 ===

      at Object.<anonymous> (tests/dimension-analysis.test.ts:171:15)

  console.log
    推荐的宽度转换因子: 0.96

      at Object.<anonymous> (tests/dimension-analysis.test.ts:177:15)

  console.log
    推荐的高度转换因子: 0.96

      at Object.<anonymous> (tests/dimension-analysis.test.ts:178:15)

  console.log
    宽度比例方差: 0.000000

      at Object.<anonymous> (tests/dimension-analysis.test.ts:192:15)

  console.log
    高度比例方差: 0.000000

      at Object.<anonymous> (tests/dimension-analysis.test.ts:193:15)

  console.log
    ✅ 检测到一致的转换比例，可能需要应用固定的转换因子

      at Object.<anonymous> (tests/dimension-analysis.test.ts:196:17)

  console.log
    
    === EMU 转换分析 ===

      at Object.<anonymous> (tests/dimension-analysis.test.ts:202:15)

  console.log
    EMU 到点的转换比例: 0.00007874015748031496

      at Object.<anonymous> (tests/dimension-analysis.test.ts:209:15)

  console.log
    如果实际尺寸是 EMU，转换到点后的期望比例: 0.000079

      at Object.<anonymous> (tests/dimension-analysis.test.ts:210:15)

  console.log
    
    === 修复建议 ===

      at Object.<anonymous> (tests/dimension-analysis.test.ts:247:15)

  console.log
    ✅ 检测到一致的转换比例，建议应用全局转换因子:

      at Object.<anonymous> (tests/dimension-analysis.test.ts:253:17)

  console.log
       宽度: actualWidth *= 1.042

      at Object.<anonymous> (tests/dimension-analysis.test.ts:254:17)

  console.log
       高度: actualHeight *= 1.042

      at Object.<anonymous> (tests/dimension-analysis.test.ts:257:17)

  console.log


      at Object.<anonymous> (tests/dimension-analysis.test.ts:260:17)

  console.log
    实施方法:

      at Object.<anonymous> (tests/dimension-analysis.test.ts:261:17)

  console.log
    1. 在解析器中找到尺寸计算逻辑

      at Object.<anonymous> (tests/dimension-analysis.test.ts:262:17)

  console.log
    2. 应用转换因子到 width 和 height

      at Object.<anonymous> (tests/dimension-analysis.test.ts:263:17)

  console.log
    3. 确保所有元素类型都应用相同的转换

      at Object.<anonymous> (tests/dimension-analysis.test.ts:264:17)

  console.log
    
    可能的问题根源:

      at Object.<anonymous> (tests/dimension-analysis.test.ts:288:15)

  console.log
    1. EMU (English Metric Units) 转换不正确

      at Object.<anonymous> (tests/dimension-analysis.test.ts:289:15)

  console.log
    2. 坐标系统的缩放比例问题

      at Object.<anonymous> (tests/dimension-analysis.test.ts:290:15)

  console.log
    3. 字体大小到尺寸的转换问题

      at Object.<anonymous> (tests/dimension-analysis.test.ts:291:15)

  console.log
    4. 不同元素类型使用不同的测量单位

      at Object.<anonymous> (tests/dimension-analysis.test.ts:292:15)

  console.error
    Error extracting image data for rId1: Error: Mock file not found: ppt/media/missing.png
        at MockFileService.extractBinaryFileAsBuffer (/Users/tanghehui/ExploreProject/pptxtojson/tests/__tests__/services/ImageDataService.test.ts:22:13)
        at ImageDataService.extractImageData (/Users/tanghehui/ExploreProject/pptxtojson/app/lib/services/images/ImageDataService.ts:61:45)
        at Object.<anonymous> (/Users/tanghehui/ExploreProject/pptxtojson/tests/__tests__/services/ImageDataService.test.ts:114:41)
        at Promise.finally.completed (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1559:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1499:10)
        at _callCircusTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1009:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:949:3)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:839:13)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
        at run (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:757:3)
        at runAndTransformResultsToJestFormat (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1920:21)
        at jestAdapter (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/runner.js:101:19)
        at runTestInternal (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:272:16)
        at runTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:340:7)
        at Object.worker (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:494:12)

       98 |     } catch (error) {
       99 |       DebugHelper.log(context, `Error extracting image data for ${embedId}: ${error}`, "error");
    > 100 |       console.error(`Error extracting image data for ${embedId}:`, error);
          |               ^
      101 |       return null;
      102 |     }
      103 |   }

      at ImageDataService.extractImageData (app/lib/services/images/ImageDataService.ts:100:15)
      at Object.<anonymous> (tests/__tests__/services/ImageDataService.test.ts:114:22)

PASS tests/dimension-analysis.test.ts
  尺寸转换逻辑分析
    尺寸转换问题诊断
      ✓ 应该分析所有元素的尺寸转换比例 (106 ms)
      ✓ 应该提供转换函数修复建议 (4 ms)

  console.warn
    Invalid relationship format for embedId: rId1 { invalidProperty: 'value' }

      50 |         imagePath = relationship.target;
      51 |       } else {
    > 52 |         console.warn(`Invalid relationship format for embedId: ${embedId}`, relationship);
         |                 ^
      53 |         return null;
      54 |       }
      55 |

      at ImageDataService.extractImageData (app/lib/services/images/ImageDataService.ts:52:17)
      at Object.<anonymous> (tests/__tests__/services/ImageDataService.test.ts:142:41)

  console.error
    Error encoding image to base64: TypeError: Cannot read properties of null (reading 'toString')
        at ImageDataService.encodeToBase64 (/Users/tanghehui/ExploreProject/pptxtojson/app/lib/services/images/ImageDataService.ts:160:43)
        at /Users/tanghehui/ExploreProject/pptxtojson/tests/__tests__/services/ImageDataService.test.ts:327:33
        at Object.<anonymous> (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/expect/build/index.js:1824:9)
        at Object.throwingMatcher [as toThrow] (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/expect/build/index.js:2231:93)
        at Object.<anonymous> (/Users/tanghehui/ExploreProject/pptxtojson/tests/__tests__/services/ImageDataService.test.ts:327:60)
        at Promise.finally.completed (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1559:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1499:10)
        at _callCircusTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1009:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:949:3)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:839:13)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
        at run (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:757:3)
        at runAndTransformResultsToJestFormat (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1920:21)
        at jestAdapter (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/runner.js:101:19)
        at runTestInternal (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:272:16)
        at runTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:340:7)
        at Object.worker (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:494:12)

      161 |       return `data:${imageData.mimeType};base64,${base64Data}`;
      162 |     } catch (error) {
    > 163 |       console.error('Error encoding image to base64:', error);
          |               ^
      164 |       throw new Error('Failed to encode image to base64');
      165 |     }
      166 |   }

      at ImageDataService.encodeToBase64 (app/lib/services/images/ImageDataService.ts:163:15)
      at tests/__tests__/services/ImageDataService.test.ts:327:33
      at Object.<anonymous> (node_modules/expect/build/index.js:1824:9)
      at Object.throwingMatcher [as toThrow] (node_modules/expect/build/index.js:2231:93)
      at Object.<anonymous> (tests/__tests__/services/ImageDataService.test.ts:327:60)

  console.error
    Error extracting image data for rId2: Error: Mock file not found: ppt/media/missing.png
        at MockFileService.extractBinaryFileAsBuffer (/Users/tanghehui/ExploreProject/pptxtojson/tests/__tests__/services/ImageDataService.test.ts:22:13)
        at ImageDataService.extractImageData (/Users/tanghehui/ExploreProject/pptxtojson/app/lib/services/images/ImageDataService.ts:61:45)
        at /Users/tanghehui/ExploreProject/pptxtojson/app/lib/services/images/ImageDataService.ts:182:42
        at tryAcquire (/Users/tanghehui/ExploreProject/pptxtojson/app/lib/services/images/ImageDataService.ts:333:11)
        at /Users/tanghehui/ExploreProject/pptxtojson/app/lib/services/images/ImageDataService.ts:348:7
        at new Promise (<anonymous>)
        at Semaphore.acquire (/Users/tanghehui/ExploreProject/pptxtojson/app/lib/services/images/ImageDataService.ts:329:12)
        at /Users/tanghehui/ExploreProject/pptxtojson/app/lib/services/images/ImageDataService.ts:180:25
        at Array.map (<anonymous>)
        at ImageDataService.processBatch (/Users/tanghehui/ExploreProject/pptxtojson/app/lib/services/images/ImageDataService.ts:179:16)
        at Object.<anonymous> (/Users/tanghehui/ExploreProject/pptxtojson/tests/__tests__/services/ImageDataService.test.ts:370:42)
        at Promise.finally.completed (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1559:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1499:10)
        at _callCircusTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1009:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:949:3)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:839:13)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
        at run (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:757:3)
        at runAndTransformResultsToJestFormat (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1920:21)
        at jestAdapter (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/runner.js:101:19)
        at runTestInternal (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:272:16)
        at runTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:340:7)
        at Object.worker (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:494:12)

       98 |     } catch (error) {
       99 |       DebugHelper.log(context, `Error extracting image data for ${embedId}: ${error}`, "error");
    > 100 |       console.error(`Error extracting image data for ${embedId}:`, error);
          |               ^
      101 |       return null;
      102 |     }
      103 |   }

      at ImageDataService.extractImageData (app/lib/services/images/ImageDataService.ts:100:15)
      at app/lib/services/images/ImageDataService.ts:182:31

PASS tests/__tests__/services/ImageDataService.test.ts
  ImageDataService Unit Tests
    Image Data Extraction
      ✓ should extract image data successfully (1 ms)
      ✓ should handle missing relationship (6 ms)
      ✓ should handle missing file in ZIP (9 ms)
      ✓ should handle relationship object format
      ✓ should handle invalid relationship format (1 ms)
    Image Format Detection
      ✓ should detect PNG format correctly
      ✓ should detect JPEG format correctly (1 ms)
      ✓ should detect GIF format correctly
      ✓ should detect BMP format correctly
      ✓ should detect WebP format correctly (1 ms)
      ✓ should detect TIFF format correctly (3 ms)
      ✓ should handle unknown format (1 ms)
      ✓ should handle very small buffers
    Base64 Encoding
      ✓ should encode image data to base64 correctly
      ✓ should handle empty buffer
      ✓ should handle large binary data (1 ms)
      ✓ should throw error for invalid buffer (2 ms)
    Batch Processing
      ✓ should process multiple images successfully (1 ms)
      ✓ should handle mixed success and failure in batch (1 ms)
      ✓ should handle empty batch
      ✓ should handle concurrent processing efficiently (1 ms)
    Path Resolution
      ✓ should resolve relative paths correctly
      ✓ should handle complex relative paths
    Hash Generation
      ✓ should generate consistent hashes for same content
      ✓ should generate different hashes for different content
    Error Handling and Edge Cases
      ✓ should handle FileService errors gracefully
      ✓ should handle context without relationships
      ✓ should handle very large image files (27 ms)
      ✓ should handle zero-byte files
    Memory Management
      ✓ should not leak memory during batch processing (3 ms)

  console.log
    大图片处理测试: 3张大图, 113ms, 内存: 0MB

      at Object.<anonymous> (tests/__tests__/performance-reliability-comprehensive.test.ts:436:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    混合尺寸批量测试: 5张图片, 10ms

      at Object.<anonymous> (tests/__tests__/performance-reliability-comprehensive.test.ts:492:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

PASS tests/__tests__/edge-cases.test.ts
  Edge Cases Tests
    Color Value Edge Cases
      ✓ should handle transparent colors correctly
      ✓ should handle none and null color values
      ✓ should handle invalid color formats gracefully (1 ms)
      ✓ should handle extreme hex values
      ✓ should handle malformed rgba strings (4 ms)
    TextElement Edge Cases
      ✓ should handle empty text content
      ✓ should handle null and undefined text
      ✓ should handle extremely long text content
      ✓ should handle special Unicode characters
      ✓ should handle content with no style object (1 ms)
      ✓ should handle mixed valid and invalid content
    Theme Processing Edge Cases
      ✓ should handle missing theme colors
      ✓ should handle corrupted theme data
      ✓ should handle circular theme references
      ✓ should handle empty theme
    Memory and Performance Edge Cases
      ✓ should handle memory stress with many elements (5 ms)
      ✓ should handle rapid successive color modifications (31 ms)
      ✓ should handle concurrent element creation (16 ms)
    Data Integrity Edge Cases
      ✓ should maintain data integrity with extreme values
      ✓ should handle JSON serialization edge cases
      ✓ should handle object mutation after creation (1 ms)
    Integration Edge Cases
      ✓ should handle mixed element types in processing context
      ✓ should handle partial processing failures gracefully

PASS tests/__tests__/shape-processor-fill-integration.test.ts
  ShapeProcessor Fill Integration Tests
    Fill color extraction
      ✓ should extract solid fill colors from shapes (1 ms)
      ✓ should set fill property on ShapeElement
      ✓ should handle noFill correctly
      ✓ should use actual fill in themeFill output
      ✓ should extract theme colors from shapes (1 ms)
      ✓ should extract accent4 color correctly
      ✓ should apply transformations to shape fill colors
      ✓ should handle preset colors in shapes (1 ms)
      ✓ should handle HSL colors in shapes
    Shape fill inheritance
      ✓ should fallback to default colors when no fill
      ✓ should prefer actual fill over generated colors
      ✓ should handle different shape types with fills (6 ms)
    Complex fill scenarios
      ✓ should handle complex theme color transformations
      ✓ should handle multiple transformation chains (1 ms)
      ✓ should handle percentage RGB colors
      ✓ should handle system colors
    Error handling and edge cases
      ✓ should handle malformed fill data gracefully
      ✓ should handle missing theme for theme colors (13 ms)
      ✓ should handle unknown preset colors
      ✓ should handle empty spPr node
    Performance and consistency
      ✓ should process fill colors consistently
      ✓ should handle large number of shapes efficiently (12 ms)
    Integration with shape geometry
      ✓ should preserve geometry while adding fill
      ✓ should handle all supported shape types with fills (1 ms)

  console.log
    [Slide 1] Processing p:sp - Name: "Test Shape", ID: 1, HasBlipFill: undefined

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 1] Processed as test

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 1] Processing p:sp - Name: "Test Shape", ID: 1, HasBlipFill: undefined

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

PASS tests/__tests__/slide-parser-advanced.test.ts
  SlideParser Advanced Coverage Tests
    Slide ID extraction
      ✓ should extract slide ID from path correctly (1 ms)
      ✓ should handle unknown slide ID when path format is invalid
    Background parsing - solid fill
      ✓ should parse solid color background with srgbClr
      ✓ should parse solid color background with schemeClr
      ✓ should handle missing bg node (2 ms)
      ✓ should handle missing bgPr node
    Background parsing - gradient fill
      ✓ should parse gradient background with multiple color stops (4 ms)
      ✓ should handle gradient with no color stops
      ✓ should sort gradient color stops by position (1 ms)
    Background parsing - image fill
      ✓ should parse image background with ImageDataService
      ✓ should fallback to relationship URL when ImageDataService fails
      ✓ should use embedId as fallback when no relationship found
      ✓ should handle missing blip node in blipFill
    Element processing
      ✓ should process elements with registered processors (3 ms)
      ✓ should handle processor errors gracefully
      ✓ should debug log element processing (1 ms)
      ✓ should handle elements without cNvPr
    Group processing
      ✓ should extract group transform information
      ✓ should handle group without transform information
      ✓ should handle nested groups (1 ms)
      ✓ should handle empty groups
      ✓ should handle incomplete group transform data
    Error handling
      ✓ should handle file extraction errors (8 ms)
      ✓ should handle XML parsing errors
      ✓ should handle missing spTree gracefully (1 ms)
    Context creation
      ✓ should create proper processing context with all parameters
      ✓ should create context with default values when optional parameters are missing
    Processor array handling
      ✓ should handle array of elements returned by processor
      ✓ should handle group returning array of elements
    Debug logging
      ✓ should log slide processing start (3 ms)

  console.log
    [Slide 1] Processing p:sp - Name: "Text 0", ID: 3, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 1] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 1] Processing p:sp - Name: "Text 1", ID: 4, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 1] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 1] Processing p:sp - Name: "Text 2", ID: 5, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 1] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 1] Processing p:sp - Name: "Shape 3", ID: 6, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 1] Processed as shape

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 1] Processing p:sp - Name: "Shape 4", ID: 7, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 1] Processed as shape

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 1] Processing p:sp - Name: "Shape 5", ID: 8, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 1] Processed as shape

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 1] Processing p:pic - Name: "Image 0", ID: 9, HasBlipFill: true

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.warn
    FillRect would cause division by zero in ImageElement EB7Tvn1cSp: {
      left: 0.29807407407407405,
      top: 0.3317991769547326,
      right: 0.7019259259259258,
      bottom: 0.6682008230452674,
      widthDenominator: 1.1102230246251565e-16,
      heightDenominator: 0
    }

      126 |       
      127 |       if (widthDenominator <= 0.001 || heightDenominator <= 0.001) {
    > 128 |         console.warn(`FillRect would cause division by zero in ImageElement ${this.id}:`, {
          |                 ^
      129 |           left, top, right, bottom,
      130 |           widthDenominator, heightDenominator
      131 |         });

      at ImageElement.getStretchInfo (app/lib/models/domain/elements/ImageElement.ts:128:17)
      at ImageProcessingService.processImageElementWithEmbedId (app/lib/services/images/ImageProcessingService.ts:82:40)
      at ImageProcessor.process (app/lib/services/element/processors/ImageProcessor.ts:266:11)
      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:243:26)
      at SlideParser.parseElements (app/lib/services/parsing/SlideParser.ts:196:28)
      at SlideParser.parse (app/lib/services/parsing/SlideParser.ts:76:24)
      at PresentationParser.parse (app/lib/services/parsing/PresentationParser.ts:70:25)
      at InternalPPTXParser.parse (app/lib/parser/InternalPPTXParser.ts:124:35)
      at InternalPPTXParser.parseToJSON (app/lib/parser/InternalPPTXParser.ts:158:20)
      at parse (app/lib/pptxtojson.ts:11:18)
      at Object.<anonymous> (tests/pptx-parser-integration.test.ts:30:22)

  console.log
    [Slide 1] Processed as image

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 2] Processing p:sp - Name: "Text 0", ID: 3, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 2] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 2] Processing p:sp - Name: "Text 1", ID: 4, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 2] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 2] Processing p:sp - Name: "Text 2", ID: 5, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 2] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 2] Processing p:sp - Name: "Text 3", ID: 6, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 2] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 2] Processing p:sp - Name: "Text 4", ID: 7, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 2] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 2] Processing p:sp - Name: "Text 5", ID: 8, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 2] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 2] Processing p:sp - Name: "Text 6", ID: 9, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 2] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 2] Processing p:sp - Name: "Text 7", ID: 10, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 2] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 2] Processing p:sp - Name: "Text 8", ID: 11, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 2] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 2] Processing p:sp - Name: "Text 9", ID: 12, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 2] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 2] Processing p:sp - Name: "Text 10", ID: 13, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 2] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 2] Processing p:sp - Name: "Text 11", ID: 14, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 2] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 2] Processing p:sp - Name: "Text 12", ID: 15, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 2] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 2] Processing p:sp - Name: "Text 13", ID: 16, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 2] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 3] Processing p:sp - Name: "Text 0", ID: 2, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 3] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 3] Processing p:sp - Name: "Text 1", ID: 3, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 3] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    Slide 1 has 7 elements

      at tests/pptx-parser-integration.test.ts:132:17
          at Array.forEach (<anonymous>)

  console.log
    Slide 1: 0 elements with text content, 3 text type elements

      at tests/pptx-parser-integration.test.ts:143:17
          at Array.forEach (<anonymous>)

  console.log
    Slide 2 has 14 elements

      at tests/pptx-parser-integration.test.ts:132:17
          at Array.forEach (<anonymous>)

  console.log
    Slide 2: 0 elements with text content, 14 text type elements

      at tests/pptx-parser-integration.test.ts:143:17
          at Array.forEach (<anonymous>)

  console.log
    Slide 3 has 2 elements

      at tests/pptx-parser-integration.test.ts:132:17
          at Array.forEach (<anonymous>)

  console.log
    Slide 3: 0 elements with text content, 2 text type elements

      at tests/pptx-parser-integration.test.ts:143:17
          at Array.forEach (<anonymous>)

  console.log
    Total elements across all slides: 23

      at Object.<anonymous> (tests/pptx-parser-integration.test.ts:163:15)

  console.log
    Has text elements: false

      at Object.<anonymous> (tests/pptx-parser-integration.test.ts:164:15)

  console.warn
    ⚠️ No text elements found but slides have other elements. This might indicate a text parsing issue.

      166 |       // 如果有元素但没有文本元素，给出警告而不是失败
      167 |       if (totalElements > 0 && !hasTextElements) {
    > 168 |         console.warn('⚠️ No text elements found but slides have other elements. This might indicate a text parsing issue.');
          |                 ^
      169 |       }
      170 |       
      171 |       // 只有当完全没有元素时才失败

      at Object.<anonymous> (tests/pptx-parser-integration.test.ts:168:17)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

PASS tests/pptx-parser-integration.test.ts
  PPTX 解析器集成测试
    基本结构验证
      ✓ 应该具有必需的顶级属性 (3 ms)
      ✓ 应该具有与期望相同数量的幻灯片
      ✓ 应该匹配期望的幻灯片数量
    主题验证
      ✓ 应该具有主题色彩
      ✓ 应该匹配期望的主题结构 (1 ms)
    幻灯片内容验证
      ✓ 应该具有包含元素的幻灯片
      ✓ 应该具有含必需属性的文本元素 (5 ms)
      ✓ 应该具有含必需属性的形状元素 (1 ms)
      ✓ 应该具有含必需属性的图像元素
    数据一致性验证
      ✓ 应该具有一致的幻灯片 ID
      ✓ 幻灯片内应该具有一致的元素 ID (3 ms)
      ✓ 应该具有有效的数值属性 (11 ms)
    期望输出比较
      ✓ 应该匹配期望的结构键
      ✓ 应该匹配期望的幻灯片数量和基本结构
      ✓ 应该具有相似的元素类型分布

  console.log
    [Slide 1] Processing p:sp - Name: "Text 0", ID: 3, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 1] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 1] Processing p:sp - Name: "Text 1", ID: 4, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 1] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 1] Processing p:sp - Name: "Text 2", ID: 5, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 1] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 1] Processing p:sp - Name: "Shape 3", ID: 6, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 1] Processed as shape

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 1] Processing p:sp - Name: "Shape 4", ID: 7, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 1] Processed as shape

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 1] Processing p:sp - Name: "Shape 5", ID: 8, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 1] Processed as shape

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 1] Processing p:pic - Name: "Image 0", ID: 9, HasBlipFill: true

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.warn
    FillRect would cause division by zero in ImageElement A-O2-YntBl: {
      left: 0.29807407407407405,
      top: 0.3317991769547326,
      right: 0.7019259259259258,
      bottom: 0.6682008230452674,
      widthDenominator: 1.1102230246251565e-16,
      heightDenominator: 0
    }

      126 |       
      127 |       if (widthDenominator <= 0.001 || heightDenominator <= 0.001) {
    > 128 |         console.warn(`FillRect would cause division by zero in ImageElement ${this.id}:`, {
          |                 ^
      129 |           left, top, right, bottom,
      130 |           widthDenominator, heightDenominator
      131 |         });

      at ImageElement.getStretchInfo (app/lib/models/domain/elements/ImageElement.ts:128:17)
      at ImageProcessingService.processImageElementWithEmbedId (app/lib/services/images/ImageProcessingService.ts:82:40)
      at ImageProcessor.process (app/lib/services/element/processors/ImageProcessor.ts:266:11)
      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:243:26)
      at SlideParser.parseElements (app/lib/services/parsing/SlideParser.ts:196:28)
      at SlideParser.parse (app/lib/services/parsing/SlideParser.ts:76:24)
      at PresentationParser.parse (app/lib/services/parsing/PresentationParser.ts:70:25)
      at InternalPPTXParser.parse (app/lib/parser/InternalPPTXParser.ts:124:35)
      at InternalPPTXParser.parseToJSON (app/lib/parser/InternalPPTXParser.ts:158:20)
      at parse (app/lib/pptxtojson.ts:11:18)
      at Object.<anonymous> (tests/pptxtojson.test.ts:51:24)

  console.log
    [Slide 1] Processed as image

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 2] Processing p:sp - Name: "Text 0", ID: 3, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 2] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 2] Processing p:sp - Name: "Text 1", ID: 4, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 2] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 2] Processing p:sp - Name: "Text 2", ID: 5, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 2] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 2] Processing p:sp - Name: "Text 3", ID: 6, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 2] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 2] Processing p:sp - Name: "Text 4", ID: 7, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 2] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 2] Processing p:sp - Name: "Text 5", ID: 8, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 2] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 2] Processing p:sp - Name: "Text 6", ID: 9, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 2] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 2] Processing p:sp - Name: "Text 7", ID: 10, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 2] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 2] Processing p:sp - Name: "Text 8", ID: 11, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 2] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 2] Processing p:sp - Name: "Text 9", ID: 12, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 2] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 2] Processing p:sp - Name: "Text 10", ID: 13, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 2] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 2] Processing p:sp - Name: "Text 11", ID: 14, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 2] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 2] Processing p:sp - Name: "Text 12", ID: 15, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 2] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 2] Processing p:sp - Name: "Text 13", ID: 16, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 2] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 3] Processing p:sp - Name: "Text 0", ID: 2, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 3] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

  console.log
    [Slide 3] Processing p:sp - Name: "Text 1", ID: 3, HasBlipFill: false

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:232:15)

  console.log
    [Slide 3] Processed as text

      at SlideParser.processNode (app/lib/services/parsing/SlideParser.ts:244:19)

PASS tests/pptxtojson.test.ts
  PPTX 解析器
    解析函数
      ✓ 应该被定义 (1 ms)
      ✓ 应该优雅地处理无效输入 (7 ms)
      ✓ 如果示例文件存在则应该解析有效的 PPTX 文件 (31 ms)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    🖼️ Processing image element test2

      at ImageProcessingService.processImageElementWithEmbedId (app/lib/services/images/ImageProcessingService.ts:75:17)

  console.log
    📁 Original data: png, 367 bytes

      at ImageProcessingService.processImageElementWithEmbedId (app/lib/services/images/ImageProcessingService.ts:76:17)

  console.log
    🔧 Applying stretch offset processing for test2

      at ImageProcessingService.processImageElementWithEmbedId (app/lib/services/images/ImageProcessingService.ts:108:17)

  console.log
    📐 Stretch info: {
      fillRect: { left: 0.1, top: 0.1, right: 0.1, bottom: 0.1 },
      srcRect: { left: 0.05, top: 0.05, right: 0.05, bottom: 0.05 }
    }

      at ImageProcessingService.processImageElementWithEmbedId (app/lib/services/images/ImageProcessingService.ts:111:17)

  console.log
    originalData.buffer <Buffer 89 50 4e 47 0d 0a 1a 0a 00 00 00 0d 49 48 44 52 00 00 00 64 00 00 00 64 08 06 00 00 00 70 e2 95 54 00 00 00 09 70 48 59 73 00 00 03 e8 00 00 03 e8 01 ... 317 more bytes>

      at ImageProcessingService.processImageElementWithEmbedId (app/lib/services/images/ImageProcessingService.ts:122:15)

  console.log
    🔧 PPTXImageProcessor: Processing image 100x100

      at PPTXImageProcessor.applyStretchOffset (app/lib/services/images/PPTXImageProcessor.ts:148:17)

  console.log
    📐 Container size: 200x150

      at PPTXImageProcessor.applyStretchOffset (app/lib/services/images/PPTXImageProcessor.ts:151:17)

  console.log
    📍 FillRect offsets: { left: 0.1, top: 0.1, right: 0.1, bottom: 0.1 }

      at PPTXImageProcessor.applyStretchOffset (app/lib/services/images/PPTXImageProcessor.ts:152:17)

  console.log
    ✂️ SrcRect crop: { left: 0.05, top: 0.05, right: 0.05, bottom: 0.05 }

      at PPTXImageProcessor.applyStretchOffset (app/lib/services/images/PPTXImageProcessor.ts:153:30)

  console.log
    💾 Debug image saved: debug-images/image-1-original-2025-07-04T00-05-24-263Z.png

      at PPTXImageProcessor.saveDebugImage (app/lib/services/images/PPTXImageProcessor.ts:659:15)

  console.log
    📄 Metadata saved: debug-images/image-1-original-2025-07-04T00-05-24-263Z.json

      at PPTXImageProcessor.saveDebugImage (app/lib/services/images/PPTXImageProcessor.ts:662:15)

  console.log
    ✂️ Applied srcRect crop: 89x89

      at PPTXImageProcessor.applyStretchOffset (app/lib/services/images/PPTXImageProcessor.ts:191:21)

  console.log
    🎯 Target rect: { x: 0, y: 0, width: 200, height: 150 }

      at PPTXImageProcessor.applyStretchOffset (app/lib/services/images/PPTXImageProcessor.ts:205:17)

  console.log
    🔄 Applying fillRect transform on 100x100 image

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:310:15)

  console.log
    📐 Container: 200x150

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:313:15)

  console.log
    📍 FillRect: L10.000% T10.000% R10.000% B10.000%

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:314:15)

  console.log
    📏 Display area: 160.0x120.0

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:339:15)

  console.log
    📍 Position offset: L20px T15px

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:344:15)

  console.log
    🔄 Resized image to display area: 160x120

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:380:15)

  console.log
    🔧 Rounded values: offset(20, 15), display(160x120)

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:401:15)

  console.log
    🔲 Composited image at position: L20px T15px

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:542:19)

  console.log
    📋 Final image size: 200x150

      at PPTXImageProcessor.applyFillRectTransform (app/lib/services/images/PPTXImageProcessor.ts:554:15)

  console.log
    ✅ Processing complete: 200x150

      at PPTXImageProcessor.applyStretchOffset (app/lib/services/images/PPTXImageProcessor.ts:235:17)

  console.log
    📋 Applied effects: [
      'srcRect crop: 89x89 from (5,5)',
      'fillRect stretch: {"left":0.1,"top":0.1,"right":0.1,"bottom":0.1}',
      'transparent padding: Applied fillRect transform'
    ]

      at PPTXImageProcessor.applyStretchOffset (app/lib/services/images/PPTXImageProcessor.ts:238:17)

  console.log
    💾 Debug image saved: debug-images/image-2-processed-2025-07-04T00-05-24-275Z.png

      at PPTXImageProcessor.saveDebugImage (app/lib/services/images/PPTXImageProcessor.ts:659:15)

  console.log
    📄 Metadata saved: debug-images/image-2-processed-2025-07-04T00-05-24-275Z.json

      at PPTXImageProcessor.saveDebugImage (app/lib/services/images/PPTXImageProcessor.ts:662:15)

  console.log
    processedResult {
      buffer: <Buffer 89 50 4e 47 0d 0a 1a 0a 00 00 00 0d 49 48 44 52 00 00 00 c8 00 00 00 96 08 06 00 00 00 9b dc c7 19 00 00 00 09 70 48 59 73 00 00 03 e8 00 00 03 e8 01 ... 702 more bytes>,
      width: 200,
      height: 150,
      format: 'png',
      processedAt: 2025-07-04T00:05:24.278Z,
      appliedEffects: [
        'srcRect crop: 89x89 from (5,5)',
        'fillRect stretch: {"left":0.1,"top":0.1,"right":0.1,"bottom":0.1}',
        'transparent padding: Applied fillRect transform'
      ]
    }

      at ImageProcessingService.createDataUrl (app/lib/services/images/ImageProcessingService.ts:316:13)

  console.log
    ✅ Stretch processing completed for test2

      at ImageProcessingService.processImageElementWithEmbedId (app/lib/services/images/ImageProcessingService.ts:135:17)

  console.log
    📊 Result: 200x150, 752 bytes

      at ImageProcessingService.processImageElementWithEmbedId (app/lib/services/images/ImageProcessingService.ts:138:17)

  console.log
    ⏱️ Processing time: 18ms

      at ImageProcessingService.processImageElementWithEmbedId (app/lib/services/images/ImageProcessingService.ts:141:17)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.error
    ❌ Image processing failed for test4: Error: Failed to extract image data for rIdNotExist
        at ImageProcessingService.processImageElementWithEmbedId (/Users/tanghehui/ExploreProject/pptxtojson/app/lib/services/images/ImageProcessingService.ts:71:15)
        at Object.<anonymous> (/Users/tanghehui/ExploreProject/pptxtojson/tests/__tests__/image-processing-service-integration.test.ts:233:22)

      155 |       };
      156 |     } catch (error) {
    > 157 |       console.error(
          |               ^
      158 |         `❌ Image processing failed for ${imageElement.getId()}:`,
      159 |         error
      160 |       );

      at ImageProcessingService.processImageElementWithEmbedId (app/lib/services/images/ImageProcessingService.ts:157:15)
      at Object.<anonymous> (tests/__tests__/image-processing-service-integration.test.ts:233:22)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

PASS tests/__tests__/image-processing-service-integration.test.ts
  ImageProcessingService 集成测试
    服务编排测试
      ✓ 应该在Sharp不可用时正确回退到原始数据 (2 ms)
      ✓ 应该正确传递处理配置参数到下游组件 (21 ms)
      ✓ 应该处理禁用拉伸处理的情况 (2 ms)
      ✓ 应该在并发限制下正确排队处理请求 (4 ms)
    错误处理和边界情况
      ✓ 应该处理图片提取失败的情况 (5 ms)
      ✓ 应该处理没有拉伸信息的图片 (5 ms)
      ✓ 应该处理没有embedId的情况
    工具方法测试
      ✓ 应该正确返回处理统计信息 (1 ms)

PASS tests/__tests__/shape-processor-advanced.test.ts
  ShapeProcessor Advanced Coverage Tests
    Shape text content processing
      ✓ should extract and process text content with style inheritance (1 ms)
      ✓ should handle vertical alignment from bodyPr
      ✓ should handle paragraph alignment mapping (1 ms)
    Custom geometry analysis
      ✓ should detect circular geometry from arc commands
      ✓ should detect rectangular geometry from line commands
      ✓ should detect circular geometry from cubic bezier pattern
    SVG path extraction from custom geometry
      ✓ should extract complex SVG path with all command types (1 ms)
      ✓ should handle path optimization
    Gradient fill processing
      ✓ should extract linear gradient with color stops
      ✓ should extract radial gradient (1 ms)
      ✓ should handle gradient color modifiers
    Adjustment values and roundRect handling
      ✓ should extract adjustment values for roundRect
      ✓ should use default adjustment for roundRect without values
    FlowChart and ActionButton shapes
      ✓ should handle flowChart shapes correctly (1 ms)
      ✓ should handle actionButton shapes correctly (1 ms)
    Style reference extraction
      ✓ should extract color from fillRef style (3 ms)
    Default gradient creation
      ✓ should create default gradient for specific path patterns
    Group transform handling
      ✓ should apply group transform to shape position
    Text box detection
      ✓ should not process text boxes as shapes
    Rotation handling
      ✓ should extract and convert rotation angle
    System color handling in gradients
      ✓ should handle system colors with lastClr
    Color modifier combinations
      ✓ should apply multiple color modifiers in sequence (1 ms)

  console.log
    资源管理测试: 剩余资源 8/20, 225ms

      at Object.<anonymous> (tests/__tests__/performance-reliability-comprehensive.test.ts:533:15)

PASS tests/__tests__/performance-reliability-comprehensive.test.ts
  性能和可靠性综合测试
    性能基准测试
      ✓ 应该在2秒内处理包含10张图片的标准测试 (168 ms)
      ✓ 应该在合理内存限制内处理大型演示文稿 (10 ms)
      ✓ 应该测试并发处理时的CPU和内存使用效率 (125 ms)
    长期运行测试
      ✓ 应该在连续处理100个文件后无内存泄漏 (1344 ms)
      ✓ 应该在服务长时间运行后保持处理性能 (539 ms)
    负载测试
      ✓ 应该处理高频率的小图片请求 (294 ms)
      ✓ 应该处理少量大图片的处理请求 (115 ms)
      ✓ 应该处理混合尺寸图片的批量请求 (11 ms)
    资源管理和清理
      ✓ 应该正确管理临时资源的生命周期 (228 ms)

  console.log
    Invalid XML case 0 correctly threw error: Failed to parse XML: Empty XML content

      at tests/__tests__/xml-parsing-edge-cases.test.ts:43:19
          at Array.forEach (<anonymous>)

  console.log
    Invalid XML case 1 correctly threw error: Failed to parse XML: Empty XML content

      at tests/__tests__/xml-parsing-edge-cases.test.ts:43:19
          at Array.forEach (<anonymous>)

  console.log
    Invalid XML case 2 correctly threw error: Failed to parse XML: No valid root node found

      at tests/__tests__/xml-parsing-edge-cases.test.ts:43:19
          at Array.forEach (<anonymous>)

  console.log
    Invalid XML case 3 correctly threw error: Failed to parse XML: No valid root node found

      at tests/__tests__/xml-parsing-edge-cases.test.ts:43:19
          at Array.forEach (<anonymous>)

  console.log
    Invalid XML case 4 correctly threw error: Failed to parse XML: No valid root node found

      at tests/__tests__/xml-parsing-edge-cases.test.ts:43:19
          at Array.forEach (<anonymous>)

  console.log
    Invalid XML case 5 handled gracefully

      at tests/__tests__/xml-parsing-edge-cases.test.ts:39:19
          at Array.forEach (<anonymous>)

  console.log
    Invalid XML case 6 correctly threw error: Failed to parse XML: No valid root node found

      at tests/__tests__/xml-parsing-edge-cases.test.ts:43:19
          at Array.forEach (<anonymous>)

  console.log
    Invalid XML case 7 handled gracefully

      at tests/__tests__/xml-parsing-edge-cases.test.ts:39:19
          at Array.forEach (<anonymous>)

  console.log
    Invalid XML case 8 correctly threw error: Failed to parse XML: Unexpected close tag
    Line: 0
    Column: 19
    Char: >

      at tests/__tests__/xml-parsing-edge-cases.test.ts:43:19
          at Array.forEach (<anonymous>)

  console.log
    Invalid XML case 9 handled gracefully

      at tests/__tests__/xml-parsing-edge-cases.test.ts:39:19
          at Array.forEach (<anonymous>)

  console.log
    Invalid XML case 10 handled gracefully

      at tests/__tests__/xml-parsing-edge-cases.test.ts:39:19
          at Array.forEach (<anonymous>)

  console.log
    Invalid XML case 11 handled gracefully

      at tests/__tests__/xml-parsing-edge-cases.test.ts:39:19
          at Array.forEach (<anonymous>)

  console.log
    Self-closing tags handled correctly

      at Object.<anonymous> (tests/__tests__/xml-parsing-edge-cases.test.ts:74:15)

  console.log
    Mixed content handled correctly

      at Object.<anonymous> (tests/__tests__/xml-parsing-edge-cases.test.ts:100:15)

  console.log
    XML entities and special characters handled

      at Object.<anonymous> (tests/__tests__/xml-parsing-edge-cases.test.ts:130:15)

  console.log
    Encoding case 0 handled correctly

      at tests/__tests__/xml-parsing-edge-cases.test.ts:147:17
          at Array.forEach (<anonymous>)

  console.log
    Encoding case 1 handled correctly

      at tests/__tests__/xml-parsing-edge-cases.test.ts:147:17
          at Array.forEach (<anonymous>)

  console.log
    Encoding case 2 handled correctly

      at tests/__tests__/xml-parsing-edge-cases.test.ts:147:17
          at Array.forEach (<anonymous>)

  console.log
    Encoding case 3 handled correctly

      at tests/__tests__/xml-parsing-edge-cases.test.ts:147:17
          at Array.forEach (<anonymous>)

  console.log
    Namespaced XML handled correctly

      at Object.<anonymous> (tests/__tests__/xml-parsing-edge-cases.test.ts:188:15)

PASS tests/__tests__/id-generator-comprehensive.test.ts
  IdGenerator - Comprehensive Test Suite
    PPTist Style ID Generation
      ✓ should generate PPTist-compatible IDs
      ✓ should generate unique IDs across multiple calls (9 ms)
      ✓ should include occasional special characters
      ✓ should not start with special characters (6 ms)
    Original ID Preservation
      ✓ should preserve valid PPTist-like original IDs for shapes
      ✓ should reject invalid original IDs
      ✓ should generate new IDs for non-shape elements even with valid original IDs (1 ms)
      ✓ should handle undefined element types
    Duplicate Handling
      ✓ should handle duplicate original IDs
      ✓ should handle collision in generated IDs
      ✓ should track used IDs correctly
    State Management
      ✓ should reset state correctly (1 ms)
      ✓ should maintain separate counters for different element types
      ✓ should track all generated IDs (1 ms)
    PPTist Compatibility Validation
      ✓ should validate PPTist-like IDs correctly (2 ms)
    Performance and Scalability
      ✓ should handle large numbers of ID generations efficiently (4 ms)
      ✓ should handle collision resolution efficiently
    Edge Cases and Error Handling
      ✓ should handle null and undefined original IDs
      ✓ should handle empty string original IDs
      ✓ should handle whitespace-only original IDs
      ✓ should handle special element types (1 ms)
    Real-world Usage Patterns
      ✓ should handle typical PowerPoint element processing
      ✓ should handle batch processing with mixed element types (1 ms)

  console.log
    Large XML parsing: 1000 elements in 11.38ms

      at Object.<anonymous> (tests/__tests__/xml-parsing-edge-cases.test.ts:229:15)

  console.log
    Theme color dk1: empty result (expected for missing theme)

      at tests/__tests__/theme-inheritance-mechanism.test.ts:158:19
          at Array.forEach (<anonymous>)

  console.log
    Deep nesting parsing: 100 levels in 0.08ms

      at Object.<anonymous> (tests/__tests__/xml-parsing-edge-cases.test.ts:268:15)

  console.log
    Theme color lt1: empty result (expected for missing theme)

      at tests/__tests__/theme-inheritance-mechanism.test.ts:158:19
          at Array.forEach (<anonymous>)

  console.log
    Theme color accent1: empty result (expected for missing theme)

      at tests/__tests__/theme-inheritance-mechanism.test.ts:158:19
          at Array.forEach (<anonymous>)

  console.log
    Theme color accent2: empty result (expected for missing theme)

      at tests/__tests__/theme-inheritance-mechanism.test.ts:158:19
          at Array.forEach (<anonymous>)

  console.log
    Theme color hlink: empty result (expected for missing theme)

      at tests/__tests__/theme-inheritance-mechanism.test.ts:158:19
          at Array.forEach (<anonymous>)

  console.log
    Mapped color tx1 → dk2: rgba(31,78,121,1)

      at tests/__tests__/theme-inheritance-mechanism.test.ts:213:17
          at Array.forEach (<anonymous>)

  console.log
    Mapped color bg1 → lt2: rgba(238,236,225,1)

      at tests/__tests__/theme-inheritance-mechanism.test.ts:213:17
          at Array.forEach (<anonymous>)

  console.log
    Complex inheritance result: rgba(255,87,51,1)

      at Object.<anonymous> (tests/__tests__/theme-inheritance-mechanism.test.ts:269:15)

  console.log
    Many attributes parsing: 500 attributes in 0.55ms

      at Object.<anonymous> (tests/__tests__/xml-parsing-edge-cases.test.ts:297:15)

  console.log
    Circular reference protection:

      at Object.<anonymous> (tests/__tests__/theme-inheritance-mechanism.test.ts:305:15)

  console.log
    Font scheme structure validation passed

      at Object.<anonymous> (tests/__tests__/theme-inheritance-mechanism.test.ts:331:15)

  console.log
    Font fallback data structure validated

      at Object.<anonymous> (tests/__tests__/theme-inheritance-mechanism.test.ts:348:15)

  console.log
    Effect scheme data structure validated

      at Object.<anonymous> (tests/__tests__/theme-inheritance-mechanism.test.ts:381:15)

  console.log
    Format scheme data structure validated

      at Object.<anonymous> (tests/__tests__/theme-inheritance-mechanism.test.ts:421:15)

  console.log
    Memory usage after 100 parses: 4.50MB

      at Object.<anonymous> (tests/__tests__/xml-parsing-edge-cases.test.ts:337:15)

  console.log
    Concurrent parsing: 10 operations in 0.06ms

      at Object.<anonymous> (tests/__tests__/xml-parsing-edge-cases.test.ts:368:15)

  console.log
    PowerPoint relationship XML handled correctly

      at Object.<anonymous> (tests/__tests__/xml-parsing-edge-cases.test.ts:397:15)

  console.log
    Singleton service registration test passed

      at Object.<anonymous> (tests/__tests__/service-container-dependency-injection.test.ts:185:15)

  console.log
    Complex PowerPoint slide XML handled correctly

      at Object.<anonymous> (tests/__tests__/xml-parsing-edge-cases.test.ts:481:15)

  console.log
    Factory service registration test passed

      at Object.<anonymous> (tests/__tests__/service-container-dependency-injection.test.ts:207:15)

  console.log
    PowerPoint theme XML handled correctly

      at Object.<anonymous> (tests/__tests__/xml-parsing-edge-cases.test.ts:535:15)

  console.log
    Singleton factory service registration test passed

      at Object.<anonymous> (tests/__tests__/service-container-dependency-injection.test.ts:228:15)

  console.log
    Partial corruption recovery test completed

      at Object.<anonymous> (tests/__tests__/xml-parsing-edge-cases.test.ts:558:15)

  console.log
    Large attribute parsing: 100KB attribute in 0.01ms

      at Object.<anonymous> (tests/__tests__/xml-parsing-edge-cases.test.ts:578:15)

  console.log
    Unusual but valid XML constructs handled correctly

      at Object.<anonymous> (tests/__tests__/xml-parsing-edge-cases.test.ts:609:17)

PASS tests/__tests__/xml-parsing-edge-cases.test.ts
  XML Parsing Edge Cases Tests
    Malformed XML Handling
      ✓ should handle completely invalid XML gracefully (6 ms)
      ✓ should handle self-closing tags correctly (1 ms)
      ✓ should handle mixed content (text and elements) (1 ms)
    Special Characters and Encoding
      ✓ should handle XML entities and special characters
      ✓ should handle different XML encodings (2 ms)
      ✓ should handle XML with namespaces correctly
    Large XML and Performance
      ✓ should handle large XML documents efficiently (14 ms)
      ✓ should handle deeply nested XML structures (11 ms)
      ✓ should handle XML with many attributes efficiently (2 ms)
    Memory Management and Resource Handling
      ✓ should not leak memory during repeated parsing (17 ms)
      ✓ should handle concurrent parsing operations (1 ms)
    PowerPoint-Specific XML Edge Cases
      ✓ should handle PowerPoint relationship XML correctly
      ✓ should handle PowerPoint slide XML with complex structures (1 ms)
      ✓ should handle PowerPoint theme XML with color schemes (1 ms)
    Error Recovery and Robustness
      ✓ should recover from partial XML corruption
      ✓ should handle extremely large attribute values
      ✓ should handle XML with unusual but valid constructs (2 ms)

  console.log
    Dependency injection test passed

      at Object.<anonymous> (tests/__tests__/service-container-dependency-injection.test.ts:264:15)

  console.log
    Complex dependency graph test passed

      at Object.<anonymous> (tests/__tests__/service-container-dependency-injection.test.ts:307:15)

  console.log
    Lifecycle management: singleton created 1 times, non-singleton created 1 times

      at Object.<anonymous> (tests/__tests__/service-container-dependency-injection.test.ts:338:15)

  console.log
    Service disposal test passed

      at Object.<anonymous> (tests/__tests__/service-container-dependency-injection.test.ts:357:15)

  console.log
    Null/undefined service handling test passed

      at Object.<anonymous> (tests/__tests__/service-container-dependency-injection.test.ts:407:15)

  console.log
    Service override test passed

      at Object.<anonymous> (tests/__tests__/service-container-dependency-injection.test.ts:426:15)

  console.log
    Service resolution performance: 0.11ms for 1000 resolutions

      at Object.<anonymous> (tests/__tests__/service-container-dependency-injection.test.ts:449:15)

  console.log
    Theme lookup performance: 33.11ms for 1000 lookups

      at Object.<anonymous> (tests/__tests__/theme-inheritance-mechanism.test.ts:462:15)

  console.log
    Malformed theme 0:

      at tests/__tests__/theme-inheritance-mechanism.test.ts:488:17
          at Array.forEach (<anonymous>)

  console.log
    Malformed theme 1:

      at tests/__tests__/theme-inheritance-mechanism.test.ts:488:17
          at Array.forEach (<anonymous>)

  console.log
    Malformed theme 2:

      at tests/__tests__/theme-inheritance-mechanism.test.ts:488:17
          at Array.forEach (<anonymous>)

  console.log
    Malformed theme 3:

      at tests/__tests__/theme-inheritance-mechanism.test.ts:488:17
          at Array.forEach (<anonymous>)

  console.log
    Malformed theme 4:

      at tests/__tests__/theme-inheritance-mechanism.test.ts:488:17
          at Array.forEach (<anonymous>)

  console.log
    Malformed theme 5:

      at tests/__tests__/theme-inheritance-mechanism.test.ts:488:17
          at Array.forEach (<anonymous>)

  console.log
    Malformed theme 6:

      at tests/__tests__/theme-inheritance-mechanism.test.ts:488:17
          at Array.forEach (<anonymous>)

  console.log
    Theme data integrity maintained

      at Object.<anonymous> (tests/__tests__/theme-inheritance-mechanism.test.ts:523:15)

PASS tests/__tests__/theme-inheritance-mechanism.test.ts
  Theme Inheritance Mechanism Tests
    Color Scheme Inheritance Chain
      ✓ should properly inherit slide master theme colors (17 ms)
      ✓ should handle color mapping overrides correctly (1 ms)
      ✓ should resolve complex inheritance with multiple levels (1 ms)
      ✓ should detect and prevent infinite recursion in color references
    Font Scheme Inheritance
      ✓ should parse and inherit font schemes correctly (1 ms)
      ✓ should handle font fallbacks and substitutions
    Effect Scheme and Format Scheme
      ✓ should parse effect schemes for shape styling (1 ms)
      ✓ should handle format schemes for background styles
    Theme Integration and Performance
      ✓ should efficiently cache theme lookups (36 ms)
      ✓ should handle malformed theme data gracefully (2 ms)
      ✓ should maintain theme data integrity across multiple operations (1 ms)

  console.log
    Concurrent resolution test passed

      at Object.<anonymous> (tests/__tests__/service-container-dependency-injection.test.ts:480:15)

  console.log
    Memory usage: -0.84MB for 500 services

      at Object.<anonymous> (tests/__tests__/service-container-dependency-injection.test.ts:507:15)

  console.log
    Core service types integration test passed

      at Object.<anonymous> (tests/__tests__/service-container-dependency-injection.test.ts:532:15)

  console.log
    Service configuration test passed

      at Object.<anonymous> (tests/__tests__/service-container-dependency-injection.test.ts:553:15)

PASS tests/__tests__/service-container-dependency-injection.test.ts
  Service Container Dependency Injection Tests
    Basic Service Registration and Resolution
      ✓ should register and resolve singleton services correctly (2 ms)
      ✓ should register and resolve factory services correctly
      ✓ should register and resolve singleton factory services correctly (1 ms)
      ✓ should throw error for unregistered services (4 ms)
    Dependency Injection and Constructor Injection
      ✓ should inject dependencies through manual factory registration (1 ms)
      ✓ should handle complex dependency graphs (3 ms)
    Service Lifecycle Management
      ✓ should properly manage singleton vs transient lifecycles (1 ms)
      ✓ should handle service disposal and cleanup
    Error Handling and Edge Cases
      ✓ should handle factory function errors gracefully
      ✓ should detect and prevent circular dependencies (2 ms)
      ✓ should handle null and undefined service registrations
      ✓ should handle service overrides correctly (1 ms)
    Performance and Scalability
      ✓ should resolve services efficiently at scale
      ✓ should handle concurrent service resolutions (12 ms)
      ✓ should maintain memory efficiency with large service graphs (7 ms)
    Integration with Real Service Types
      ✓ should properly handle all core service types
      ✓ should support service configuration and options

PASS tests/__tests__/fill-extractor-comprehensive.test.ts
  FillExtractor Comprehensive Tests
    Color Type Extraction
      srgbClr (Direct RGB)
        ✓ should extract 6-digit hex values (1 ms)
        ✓ should handle uppercase and lowercase hex
        ✓ should apply transformations to srgbClr
        ✓ should handle various RGB color values
      schemeClr (Theme Colors)
        ✓ should resolve accent1-6 colors (1 ms)
        ✓ should resolve dk1, dk2, lt1, lt2 colors
        ✓ should resolve hyperlink colors
        ✓ should handle missing theme gracefully
        ✓ should apply transformations to theme colors
        ✓ should handle placeholder colors (phClr)
      scrgbClr (Percentage RGB)
        ✓ should convert percentage values correctly
        ✓ should handle values with and without % symbols (3 ms)
        ✓ should handle fractional percentages (1 ms)
      prstClr (Preset Colors)
        ✓ should resolve all basic preset colors (2 ms)
        ✓ should handle unknown preset colors
        ✓ should apply transformations to preset colors
        ✓ should match expected preset color values (1 ms)
      hslClr (HSL Colors)
        ✓ should convert HSL to RGB correctly
        ✓ should handle PowerPoint HSL format (0-100000 scale)
        ✓ should apply transformations to HSL colors (1 ms)
        ✓ should handle various HSL combinations
      sysClr (System Colors)
        ✓ should use lastClr attribute when available
        ✓ should handle missing lastClr attribute
        ✓ should apply transformations to system colors
    Color Transformation Chain
      Single transformations
        ✓ should apply alpha correctly
        ✓ should apply each transformation type independently (1 ms)
      Multiple transformations
        ✓ should apply transformations in correct order
        ✓ should handle complex transformation chains
        ✓ should maintain precision through multiple operations
        ✓ should handle PowerPoint common combinations
      Transformation edge cases
        ✓ should handle NaN values gracefully
        ✓ should handle undefined transformation values
        ✓ should clamp values to valid ranges (1 ms)
    getFillColor function
      Shape properties handling
        ✓ should extract solid fill color from spPr
        ✓ should return transparent for noFill
        ✓ should return empty string for no fill specified
        ✓ should handle complex fill with transformations (3 ms)
        ✓ should pass through theme and placeholder colors
    Error handling and edge cases
      Invalid input handling
        ✓ should handle null solidFill
        ✓ should handle undefined solidFill
        ✓ should handle empty solidFill object
        ✓ should handle malformed color structures (1 ms)
      Theme handling edge cases
        ✓ should handle missing theme content
        ✓ should handle malformed theme structure
        ✓ should handle unknown theme color references
    Performance and consistency
      ✓ should process colors consistently for same inputs
      ✓ should handle large numbers of transformations efficiently

  console.log
    Input: 72pt, Result: 96pt, Expected with factor: 95.9999976pt

      at tests/__tests__/unit-converter-precision.test.ts:112:17
          at Array.forEach (<anonymous>)

  console.log
    Input: 36pt, Result: 48pt, Expected with factor: 47.9999988pt

      at tests/__tests__/unit-converter-precision.test.ts:112:17
          at Array.forEach (<anonymous>)

  console.log
    Input: 144pt, Result: 192pt, Expected with factor: 191.9999952pt

      at tests/__tests__/unit-converter-precision.test.ts:112:17
          at Array.forEach (<anonymous>)

  console.log
    Input: 18pt, Result: 24pt, Expected with factor: 23.9999994pt

      at tests/__tests__/unit-converter-precision.test.ts:112:17
          at Array.forEach (<anonymous>)

  console.log
    Small text box: 63500 EMU → 6.67 points

      at tests/__tests__/unit-converter-precision.test.ts:132:17
          at Array.forEach (<anonymous>)

  console.log
    Medium shape: 635000 EMU → 66.67 points

      at tests/__tests__/unit-converter-precision.test.ts:132:17
          at Array.forEach (<anonymous>)

  console.log
    Large image: 3175000 EMU → 333.33 points

      at tests/__tests__/unit-converter-precision.test.ts:132:17
          at Array.forEach (<anonymous>)

  console.log
    Slide width: 9144000 EMU → 960 points

      at tests/__tests__/unit-converter-precision.test.ts:132:17
          at Array.forEach (<anonymous>)

  console.log
    just under 0.5 point: 6349.5 EMU → 0.6666141565629922 points

      at tests/__tests__/unit-converter-precision.test.ts:224:17
          at Array.forEach (<anonymous>)

  console.log
    just over 0.5 point: 6350.5 EMU → 0.6667191434370079 points

      at tests/__tests__/unit-converter-precision.test.ts:224:17
          at Array.forEach (<anonymous>)

  console.log
    just under 1 point: 12699.5 EMU → 1.3332808065629922 points

      at tests/__tests__/unit-converter-precision.test.ts:224:17
          at Array.forEach (<anonymous>)

  console.log
    just over 1 point: 12700.5 EMU → 1.333385793437008 points

      at tests/__tests__/unit-converter-precision.test.ts:224:17
          at Array.forEach (<anonymous>)

  console.log
    zero (0): 0 points

      at tests/__tests__/unit-converter-precision.test.ts:259:17
          at Array.forEach (<anonymous>)

  console.log
    minimal positive (1): 0.00010498687401574803 points

      at tests/__tests__/unit-converter-precision.test.ts:259:17
          at Array.forEach (<anonymous>)

  console.log
    minimal negative (-1): -0.00010498687401574803 points

      at tests/__tests__/unit-converter-precision.test.ts:259:17
          at Array.forEach (<anonymous>)

PASS tests/__tests__/debug-helper-comprehensive.test.ts
  DebugHelper - Comprehensive Test Suite
    Debug Mode Detection
      isDebugEnabled
        ✓ should return false when debug mode is disabled
        ✓ should return true when debug mode is enabled (1 ms)
        ✓ should return false when options are undefined
        ✓ should return false when context is empty
      isDebugEnabledFromOptions
        ✓ should return false when debug mode is disabled
        ✓ should return true when debug mode is enabled
        ✓ should return false when options are undefined
        ✓ should return false when options are null
    Debug Feature Detection
      shouldSaveDebugImages
        ✓ should return false when debug images are disabled
        ✓ should return true when debug images are enabled (1 ms)
        ✓ should return false when debug mode is disabled even if saveDebugImages is true
        ✓ should return false when debugOptions is undefined
      shouldLogProcessingDetails
        ✓ should return false when logging is disabled
        ✓ should return true when logging is enabled
        ✓ should return false when debug mode is disabled
      shouldIncludeTimingInfo
        ✓ should return false when timing info is disabled
        ✓ should return true when timing info is enabled
    Debug Prefix Generation
      ✓ should generate correct prefixes for different log types
      ✓ should default to info prefix (1 ms)
    Debug Logging
      log method
        ✓ should log messages when debug logging is enabled
        ✓ should not log messages when debug logging is disabled
        ✓ should log with different types
      logFromOptions method
        ✓ should log messages when debug logging is enabled
        ✓ should not log messages when debug logging is disabled
        ✓ should handle undefined options
    Timing Wrapper
      ✓ should execute function and log timing when timing is enabled (1 ms)
      ✓ should execute function without timing when timing is disabled
      ✓ should handle and log errors in timing wrapper (6 ms)
    Debug Summary Generation
      ✓ should return disabled message when debug is off
      ✓ should return enabled message with no features when debug is on but no features enabled
      ✓ should list enabled features in summary
    Error Handling and Edge Cases
      ✓ should handle malformed context objects (4 ms)
      ✓ should handle very long log messages (1 ms)

  console.log
    fractional minimal (0.1): 0.000010498687401574804 points

      at tests/__tests__/unit-converter-precision.test.ts:259:17
          at Array.forEach (<anonymous>)

  console.log
    epsilon (2.220446049250313e-16): 2.3311768963140806e-20 points

      at tests/__tests__/unit-converter-precision.test.ts:259:17
          at Array.forEach (<anonymous>)

  console.log
    max safe integer (9007199254740991): 945637693392.232 points

      at tests/__tests__/unit-converter-precision.test.ts:275:17
          at Array.forEach (<anonymous>)

  console.log
    half max safe (4503599627370495.5): 472818846696.116 points

      at tests/__tests__/unit-converter-precision.test.ts:275:17
          at Array.forEach (<anonymous>)

  console.log
    large but safe (1000000000000000): 104986874015.74803 points

      at tests/__tests__/unit-converter-precision.test.ts:275:17
          at Array.forEach (<anonymous>)

  console.log
    NaN: NaN

      at tests/__tests__/unit-converter-precision.test.ts:295:17
          at Array.forEach (<anonymous>)

  console.log
    positive infinity: Infinity

      at tests/__tests__/unit-converter-precision.test.ts:295:17
          at Array.forEach (<anonymous>)

  console.log
    negative infinity: -Infinity

      at tests/__tests__/unit-converter-precision.test.ts:295:17
          at Array.forEach (<anonymous>)

  console.log
    Converted 100000 values in 1.58ms

      at Object.<anonymous> (tests/__tests__/unit-converter-precision.test.ts:317:15)

  console.log
    Average: 0.016μs per conversion

      at Object.<anonymous> (tests/__tests__/unit-converter-precision.test.ts:318:15)

  console.log
    small range: 0.11ms for 1000 conversions

      at tests/__tests__/unit-converter-precision.test.ts:337:17
          at Array.forEach (<anonymous>)

  console.log
    medium range: 0.03ms for 1000 conversions

      at tests/__tests__/unit-converter-precision.test.ts:337:17
          at Array.forEach (<anonymous>)

  console.log
    large range: 0.04ms for 1000 conversions

      at tests/__tests__/unit-converter-precision.test.ts:337:17
          at Array.forEach (<anonymous>)

  console.log
    Memory increase after 50000 conversions: 0.50MB

      at Object.<anonymous> (tests/__tests__/unit-converter-precision.test.ts:359:15)

  console.log
    4:3 Standard: 960.0 x 720.0 points

      at tests/__tests__/unit-converter-precision.test.ts:382:17
          at Array.forEach (<anonymous>)

  console.log
    16:9 Widescreen: 960.0 x 540.0 points

      at tests/__tests__/unit-converter-precision.test.ts:382:17
          at Array.forEach (<anonymous>)

  console.log
    16:10 Widescreen: 960.0 x 600.0 points

      at tests/__tests__/unit-converter-precision.test.ts:382:17
          at Array.forEach (<anonymous>)

  console.log
    A4 Portrait: 816.0 x 1250.0 points

      at tests/__tests__/unit-converter-precision.test.ts:382:17
          at Array.forEach (<anonymous>)

  console.log
    Title position: (72.00, 48.00) points

      at tests/__tests__/unit-converter-precision.test.ts:402:17
          at Array.forEach (<anonymous>)

  console.log
    Content start: (96.00, 192.00) points

      at tests/__tests__/unit-converter-precision.test.ts:402:17
          at Array.forEach (<anonymous>)

  console.log
    Footer position: (480.00, 672.02) points

      at tests/__tests__/unit-converter-precision.test.ts:402:17
          at Array.forEach (<anonymous>)

  console.log
    Sidebar element: (768.00, 240.00) points

      at tests/__tests__/unit-converter-precision.test.ts:402:17
          at Array.forEach (<anonymous>)

PASS tests/__tests__/color-utils-enhanced.test.ts
  ColorUtils Enhanced Functions
    applyShade
      Basic functionality
        ✓ should apply 50% shade to red color (1 ms)
        ✓ should apply 25% shade to blue color (2 ms)
        ✓ should apply 75% shade to green color
        ✓ should preserve alpha when applying shade (1 ms)
      Boundary value tests
        ✓ should handle 0% shade (no change)
        ✓ should handle 100% shade (black)
        ✓ should handle shade > 1 (clamped behavior)
        ✓ should handle negative shade values gracefully
      Precision tests
        ✓ should maintain precision for small shade values
        ✓ should round properly for decimal results
      Test data validation
        ✓ should correctly apply shade transformation: red_25 (1 ms)
        ✓ should correctly apply shade transformation: red_50
        ✓ should correctly apply shade transformation: red_75
        ✓ should correctly apply shade transformation: blue_50
        ✓ should correctly apply shade transformation: white_50
    applyTint
      Basic functionality
        ✓ should apply 50% tint to red color
        ✓ should apply tint to already light colors
        ✓ should handle 100% tint (white)
        ✓ should preserve alpha when applying tint (1 ms)
      Tint + Shade combination
        ✓ should handle tint after shade application
      Test data validation
        ✓ should correctly apply tint transformation: red_25
        ✓ should correctly apply tint transformation: red_50
        ✓ should correctly apply tint transformation: red_75
        ✓ should correctly apply tint transformation: black_50
        ✓ should correctly apply tint transformation: blue_25
    applySatMod
      HSL operations
        ✓ should increase saturation correctly (1 ms)
        ✓ should decrease saturation correctly
        ✓ should handle grayscale colors (0 saturation)
        ✓ should preserve hue and lightness
    applyHueMod
      Hue rotation
        ✓ should rotate hue correctly
        ✓ should handle full rotation (360°)
        ✓ should handle negative rotation (2 ms)
        ✓ should preserve saturation and lightness
    hslToRgb
      Standard color conversion
        ✓ should convert pure red (0°, 100%, 50%)
        ✓ should convert pure green (120°, 100%, 50%)
        ✓ should convert pure blue (240°, 100%, 50%)
      Special cases
        ✓ should handle grayscale (any hue, 0% saturation)
        ✓ should handle white (any hue, any saturation, 100% lightness) (1 ms)
        ✓ should handle black (any hue, any saturation, 0% lightness)
      Precision tests
        ✓ should maintain RGB precision within tolerance (1 ms)
      Test data validation
        ✓ should correctly convert red HSL to RGB
        ✓ should correctly convert green HSL to RGB
        ✓ should correctly convert blue HSL to RGB
        ✓ should correctly convert white HSL to RGB (1 ms)
        ✓ should correctly convert black HSL to RGB
        ✓ should correctly convert gray HSL to RGB
    getPresetColor
      Basic color retrieval
        ✓ should return correct hex for basic colors
        ✓ should return correct hex for named colors (1 ms)
        ✓ should handle case sensitivity
        ✓ should return null for unknown colors
      Completeness tests
        ✓ should have all basic CSS named colors (1 ms)
        ✓ should return properly formatted hex values (1 ms)
    applyAlpha
      Alpha application
        ✓ should apply alpha correctly
        ✓ should handle zero alpha (transparent)
        ✓ should handle full alpha (opaque)
        ✓ should preserve RGB values
      Test data validation
        ✓ should correctly apply alpha transformation: red_50 (1 ms)
        ✓ should correctly apply alpha transformation: red_25
        ✓ should correctly apply alpha transformation: red_75
        ✓ should correctly apply alpha transformation: transparent
        ✓ should correctly apply alpha transformation: opaque
    toHex utility
      ✓ should convert numbers to hex correctly
      ✓ should clamp values to valid range (1 ms)
      ✓ should handle decimal values
    Integration with existing toRgba
      ✓ should work seamlessly with color transformation chain

PASS tests/__tests__/unit-converter-precision.test.ts
  Unit Converter Precision Tests
    EMU to Points Conversion Accuracy
      ✓ should perform precise EMU to Points conversion with known values (1 ms)
      ✓ should handle decimal EMU values correctly
      ✓ should handle large EMU values without overflow (1 ms)
      ✓ should handle negative EMU values correctly
      ✓ should maintain conversion factor mathematical accuracy (1 ms)
    PPTist Compatibility Correction
      ✓ should apply PPTist correction factor consistently (6 ms)
      ✓ should maintain layout accuracy for PPTist coordinates (2 ms)
    Angle Conversion Accuracy
      ✓ should convert PowerPoint angles to degrees correctly
      ✓ should handle negative and large angle values
      ✓ should maintain precision for fractional degrees (1 ms)
    Floating Point Precision and Rounding
      ✓ should handle floating point precision correctly
      ✓ should handle rounding edge cases (5 ms)
      ✓ should maintain precision across multiple operations
    Boundary Conditions
      ✓ should handle zero and minimal values (4 ms)
      ✓ should handle maximum safe values (2 ms)
      ✓ should detect and handle invalid inputs gracefully (1 ms)
    Performance Benchmarks
      ✓ should perform conversions efficiently in bulk (12 ms)
      ✓ should maintain consistent performance across different value ranges (3 ms)
      ✓ should not leak memory during repeated operations (2 ms)
    Real-world PowerPoint Scenarios
      ✓ should handle typical slide dimensions accurately (2 ms)
      ✓ should handle typical element positioning accurately (1 ms)

PASS tests/__tests__/text-processor-color-integration.test.ts
  TextProcessor Color Integration Tests
    Color extraction from text runs
      ✓ should extract direct RGB colors from text
      ✓ should extract theme colors from text (1 ms)
      ✓ should apply transformations to text colors
      ✓ should handle multiple text runs with different colors (4 ms)
      ✓ should handle complex color transformations in text
    Theme integration
      ✓ should create proper theme content structure (1 ms)
      ✓ should handle missing theme gracefully
      ✓ should map all theme colors correctly (2 ms)
      ✓ should handle theme colors with transformations
    Text formatting integration
      ✓ should preserve other text formatting when extracting colors (1 ms)
      ✓ should handle mixed formatting in paragraph
    XML node conversion
      ✓ should convert XML nodes to objects correctly
      ✓ should handle nested color structures
      ✓ should preserve attribute structure (1 ms)
    Error handling and edge cases
      ✓ should handle text without color formatting
      ✓ should handle malformed color XML gracefully
      ✓ should handle empty text runs (1 ms)

  console.log
    Loading JSON from URL: https://example.com/test.json

      at loadJson (components/MonacoJsonLoader.tsx:47:19)

  console.log
    Attempt 1/3 to fetch JSON from CDN

      at fetchWithTimeout (components/MonacoJsonLoader.tsx:53:25)

  console.warn
    Fetch attempt 1 failed: Error: Network error
        at Object.<anonymous> (/Users/tanghehui/ExploreProject/pptxtojson/tests/__tests__/monaco-json-loader.test.tsx:232:32)
        at Promise.finally.completed (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1559:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1499:10)
        at _callCircusTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1009:40)
        at _runTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:949:3)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:839:13)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
        at run (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:757:3)
        at runAndTransformResultsToJestFormat (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1920:21)
        at jestAdapter (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/runner.js:101:19)
        at runTestInternal (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:272:16)
        at runTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:340:7)
        at Object.worker (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:494:12)

      73 |                 return response;
      74 |               } catch (error) {
    > 75 |                 console.warn(`Fetch attempt ${attempt} failed:`, error);
         |                         ^
      76 |                 
      77 |                 if (attempt === retries) {
      78 |                   // 为超时错误提供更详细的信息

      at fetchWithTimeout (components/MonacoJsonLoader.tsx:75:25)
      at loadJson (components/MonacoJsonLoader.tsx:100:28)

  console.log
    Retrying in 1000ms...

      at fetchWithTimeout (components/MonacoJsonLoader.tsx:93:25)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    Text-only element prioritization: Text processor selected

      at Object.<anonymous> (tests/__tests__/element-processor-coordination.test.ts:158:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    Shape element prioritization: Shape processor selected

      at Object.<anonymous> (tests/__tests__/element-processor-coordination.test.ts:203:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    Image element prioritization: Image processor selected

      at Object.<anonymous> (tests/__tests__/element-processor-coordination.test.ts:239:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    Complex element prioritization: Multiple processors can handle, shape takes priority

      at Object.<anonymous> (tests/__tests__/element-processor-coordination.test.ts:302:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    Shape processing result: rect

      at Object.<anonymous> (tests/__tests__/element-processor-coordination.test.ts:360:17)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    Shape processor can handle ambiguous element

      at tests/__tests__/element-processor-coordination.test.ts:427:17
          at Array.forEach (<anonymous>)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    Generated unique ID: EiaqTZkin-

      at Object.<anonymous> (tests/__tests__/element-processor-coordination.test.ts:513:19)

  console.log
    Generated unique ID: rpl-erQiS_

      at Object.<anonymous> (tests/__tests__/element-processor-coordination.test.ts:513:19)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    Processor handled problematic element successfully

      at Object.<anonymous> (tests/__tests__/element-processor-coordination.test.ts:562:23)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    Processing context integrity maintained during error handling

      at Object.<anonymous> (tests/__tests__/element-processor-coordination.test.ts:624:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    Memory after failed processing: 0.01MB increase

      at Object.<anonymous> (tests/__tests__/element-processor-coordination.test.ts:673:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

PASS tests/__tests__/image-offset-adjuster-comprehensive.test.ts
  ImageOffsetAdjuster 偏移调整综合测试
    基础偏移调整测试
      ✓ 应该在默认情况下保持原始坐标 (1 ms)
      ✓ 应该处理各种输入参数组合
    边界情况和异常处理
      ✓ 应该处理零尺寸输入 (1 ms)
      ✓ 应该处理零尺寸幻灯片
      ✓ 应该处理负尺寸输入
      ✓ 应该处理极大的数值
    数值精度和类型安全
      ✓ 应该处理浮点数输入
      ✓ 应该保持数值精度
      ✓ 应该处理NaN和Infinity输入
    性能测试
      ✓ 应该在合理时间内处理大量调整请求 (3 ms)
      ✓ 应该有效使用内存
    实际使用场景
      ✓ 应该在典型PPT转换场景中正常工作 (1 ms)
      ✓ 应该处理多种幻灯片尺寸

  console.log
    Processed 100/100 elements in 1.17ms

      at Object.<anonymous> (tests/__tests__/element-processor-coordination.test.ts:804:15)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    text average processing time: 0.00ms

      at tests/__tests__/element-processor-coordination.test.ts:861:19
          at Array.forEach (<anonymous>)

  console.log
    ✅ Sharp initialized successfully for image processing

      at PPTXImageProcessor.initializeSharp (app/lib/services/images/PPTXImageProcessor.ts:100:15)

  console.log
    Concurrent processing: 20 elements in 0.00ms

      at Object.<anonymous> (tests/__tests__/element-processor-coordination.test.ts:924:15)

PASS tests/__tests__/element-processor-coordination.test.ts
  Element Processor Coordination Tests
    Processor Selection and Prioritization
      ✓ should correctly identify text-only elements (9 ms)
      ✓ should correctly identify shape elements with background
      ✓ should correctly identify image elements (1 ms)
      ✓ should handle complex elements with multiple characteristics
    Processing Coordination and Workflow
      ✓ should coordinate shape and text processing for complex elements (1 ms)
      ✓ should handle processing conflicts and decisions (1 ms)
      ✓ should maintain consistent ID generation across processors (1 ms)
    Error Handling and Recovery
      ✓ should handle processor-specific errors gracefully
      ✓ should maintain processing context integrity during errors (1 ms)
      ✓ should handle resource cleanup after processing failures
    Performance and Scalability
      ✓ should process multiple elements efficiently (2 ms)
      ✓ should maintain consistent performance across different element types
      ✓ should handle concurrent processing safely (1 ms)

  console.log
    Complex Bezier path: M0,100 C0,44 44,0 100,0 C156,0 200,44 200,100 C200,156 156,200 100,200 C44,200 0,156 0,100 Z

      at tests/__tests__/shape-geometry-algorithms.test.ts:231:17

  console.log
    Arc path: M100,0 A100,100 0 0 1 Z

      at tests/__tests__/shape-geometry-algorithms.test.ts:319:17

  console.log
    Quadratic Bezier path: M 0 0 L 0 0 L 0 0 L 0 0 Z

      at tests/__tests__/shape-geometry-algorithms.test.ts:402:17

  console.log
    Detected circle path: M100,0 C154,0 200,44 200,100 C200,154 154,200 100,200 C44,200 0,154 0,100 C0,44 44,0 100,0 Z

      at tests/__tests__/shape-geometry-algorithms.test.ts:499:17

  console.log
    Shape type: ellipse

      at tests/__tests__/shape-geometry-algorithms.test.ts:500:17

  console.log
    Path formula: undefined

      at tests/__tests__/shape-geometry-algorithms.test.ts:501:17

  console.log
    Irregular shape type: rect

      at tests/__tests__/shape-geometry-algorithms.test.ts:583:17

  console.log
    Irregular pathFormula: undefined

      at tests/__tests__/shape-geometry-algorithms.test.ts:584:17

  console.log
    Irregular path: M 0 0 L 0 0 L 0 0 L 0 0 Z

      at tests/__tests__/shape-geometry-algorithms.test.ts:585:17

  console.log
    2:1 ellipse: shape=ellipse, path=M200,100 A100,100 0 1 1 Z...

      at tests/__tests__/shape-geometry-algorithms.test.ts:673:19
          at Array.forEach (<anonymous>)

  console.log
    1:2 ellipse: shape=ellipse, path=M200,100 A100,100 0 1 1 Z...

      at tests/__tests__/shape-geometry-algorithms.test.ts:673:19
          at Array.forEach (<anonymous>)

  console.log
    4:3 ellipse: shape=ellipse, path=M200,98.67 A100,98.67 0 1 1 Z...

      at tests/__tests__/shape-geometry-algorithms.test.ts:673:19
          at Array.forEach (<anonymous>)

  console.log
    1:1 circle: shape=ellipse, path=M200,100 A100,100 0 1 1 Z...

      at tests/__tests__/shape-geometry-algorithms.test.ts:673:19
          at Array.forEach (<anonymous>)

  console.log
    Rectangle (rect): M 0 0 L 200 0 L 200 200 L 0 200 Z

      at tests/__tests__/shape-geometry-algorithms.test.ts:747:19
          at Array.forEach (<anonymous>)

  console.log
    Ellipse (ellipse): M 100 0 A 50 50 0 1 1 100 200 A 50 50 0 1 1 100 0 Z

      at tests/__tests__/shape-geometry-algorithms.test.ts:747:19
          at Array.forEach (<anonymous>)

  console.log
    Triangle (triangle): M 0 0 L 0 0 L 0 0 Z

      at tests/__tests__/shape-geometry-algorithms.test.ts:747:19
          at Array.forEach (<anonymous>)

  console.log
    Small square: 133.33333000000002x133.33333000000002, viewBox: [200,200], path: M 0 0 L 200 0 L 200 200 L 0 200 Z

      at tests/__tests__/shape-geometry-algorithms.test.ts:822:19
          at Array.forEach (<anonymous>)

  console.log
    Large rectangle: 1333.3333x666.66665, viewBox: [200,200], path: M 0 0 L 200 0 L 200 200 L 0 200 Z

      at tests/__tests__/shape-geometry-algorithms.test.ts:822:19
          at Array.forEach (<anonymous>)

  console.log
    Tall rectangle: 66.66666500000001x266.66666000000004, viewBox: [200,200], path: M 0 0 L 200 0 L 200 200 L 0 200 Z

      at tests/__tests__/shape-geometry-algorithms.test.ts:822:19
          at Array.forEach (<anonymous>)

  console.log
    Wide rectangle: 399.99999x99.9999975, viewBox: [200,200], path: M 0 0 L 200 0 L 200 200 L 0 200 Z

      at tests/__tests__/shape-geometry-algorithms.test.ts:822:19
          at Array.forEach (<anonymous>)

  console.log
    45 degree rotation: rotate=45°, pos=(133.33333000000002, 133.33333000000002), path=M 0 0 L 200 0 L 200 200 L 0 200 Z

      at tests/__tests__/shape-geometry-algorithms.test.ts:921:19
          at Array.forEach (<anonymous>)

  console.log
    90 degree rotation: rotate=90°, pos=(133.33333000000002, 133.33333000000002), path=M 0 0 L 200 0 L 200 200 L 0 200 Z

      at tests/__tests__/shape-geometry-algorithms.test.ts:921:19
          at Array.forEach (<anonymous>)

  console.log
    -30 degree rotation: rotate=-30°, pos=(133.33333000000002, 133.33333000000002), path=M 0 0 L 200 0 L 200 200 L 0 200 Z

      at tests/__tests__/shape-geometry-algorithms.test.ts:921:19
          at Array.forEach (<anonymous>)

  console.log
    RoundRect keypoints: [ 0.25 ]

      at tests/__tests__/shape-geometry-algorithms.test.ts:981:17

  console.log
    Default RoundRect keypoints: [ 0.125 ]

      at tests/__tests__/shape-geometry-algorithms.test.ts:1027:17

  console.log
    Malformed geometry fallback: rect M 0 0 L 0 0 L 0 0 L 0 0 Z

      at tests/__tests__/shape-geometry-algorithms.test.ts:1101:17

  console.log
    Complex path processing time: 0.09ms

      at tests/__tests__/shape-geometry-algorithms.test.ts:1185:17

  console.log
    Path length: 25 characters

      at tests/__tests__/shape-geometry-algorithms.test.ts:1186:17

PASS tests/__tests__/shape-geometry-algorithms.test.ts
  Shape Geometry Algorithm Tests
    Custom Path Parsing Algorithms
      ✓ should parse complex Bezier curve paths correctly (4 ms)
      ✓ should handle arcTo commands with proper arc calculations (1 ms)
      ✓ should handle quadratic Bezier curves (quadBezTo) (1 ms)
    Circle Detection Algorithm
      ✓ should detect perfect circle from 4 cubic Bezier curves
      ✓ should distinguish between circle and irregular shapes
      ✓ should handle ellipse detection with aspect ratio variations (1 ms)
    SVG Path Generation Mathematical Accuracy
      ✓ should generate mathematically correct SVG paths for basic shapes (1 ms)
      ✓ should handle coordinate scaling and viewBox transformations (1 ms)
      ✓ should maintain path precision for complex transformations (1 ms)
    Adjustment Values and Parameters
      ✓ should handle roundRect adjustment values correctly (1 ms)
      ✓ should apply default adjustment values when none specified (1 ms)
    Performance and Edge Cases
      ✓ should handle malformed geometry gracefully
      ✓ should perform efficiently with complex paths (1 ms)

  console.log
    PNG format signature detected correctly

      at Object.<anonymous> (tests/__tests__/image-processing-simplified.test.ts:119:15)

  console.log
    JPEG format signature detected correctly

      at Object.<anonymous> (tests/__tests__/image-processing-simplified.test.ts:126:15)

  console.log
    Unknown format handled gracefully

      at Object.<anonymous> (tests/__tests__/image-processing-simplified.test.ts:133:15)

  console.log
    Extracted image: image1.png, format: png

      at Object.<anonymous> (tests/__tests__/image-processing-simplified.test.ts:146:17)

  console.warn
    No relationship found for embedId: invalidId

      39 |       if (!relationship) {
      40 |         DebugHelper.log(context, `No relationship found for embedId: ${embedId}`, "warn");
    > 41 |         console.warn(`No relationship found for embedId: ${embedId}`);
         |                 ^
      42 |         return null;
      43 |       }
      44 |

      at ImageDataService.extractImageData (app/lib/services/images/ImageDataService.ts:41:17)
      at Object.<anonymous> (tests/__tests__/image-processing-simplified.test.ts:154:41)

  console.log
    Invalid embed ID handled correctly

      at Object.<anonymous> (tests/__tests__/image-processing-simplified.test.ts:158:15)

  console.warn
    No relationship found for embedId: rId1

      39 |       if (!relationship) {
      40 |         DebugHelper.log(context, `No relationship found for embedId: ${embedId}`, "warn");
    > 41 |         console.warn(`No relationship found for embedId: ${embedId}`);
         |                 ^
      42 |         return null;
      43 |       }
      44 |

      at ImageDataService.extractImageData (app/lib/services/images/ImageDataService.ts:41:17)
      at Object.<anonymous> (tests/__tests__/image-processing-simplified.test.ts:168:41)

  console.log
    Missing relationship handled correctly

      at Object.<anonymous> (tests/__tests__/image-processing-simplified.test.ts:170:15)

  console.log
    Context relationships verified

      at Object.<anonymous> (tests/__tests__/image-processing-simplified.test.ts:183:15)

  console.log
    Path resolution working correctly

      at Object.<anonymous> (tests/__tests__/image-processing-simplified.test.ts:192:15)

  console.log
    Context integrity maintained

      at Object.<anonymous> (tests/__tests__/image-processing-simplified.test.ts:207:15)

  console.error
    Error extracting image data for rId1: Error: File not found: ppt/nonexistent/image.png
        at MockFileService.extractBinaryFileAsBuffer (/Users/tanghehui/ExploreProject/pptxtojson/tests/__tests__/image-processing-simplified.test.ts:28:13)
        at ImageDataService.extractImageData (/Users/tanghehui/ExploreProject/pptxtojson/app/lib/services/images/ImageDataService.ts:61:45)
        at Object.<anonymous> (/Users/tanghehui/ExploreProject/pptxtojson/tests/__tests__/image-processing-simplified.test.ts:221:41)
        at Promise.finally.completed (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1559:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1499:10)
        at _callCircusTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1009:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:949:3)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:839:13)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
        at run (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:757:3)
        at runAndTransformResultsToJestFormat (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1920:21)
        at jestAdapter (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/runner.js:101:19)
        at runTestInternal (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:272:16)
        at runTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:340:7)
        at Object.worker (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:494:12)

       98 |     } catch (error) {
       99 |       DebugHelper.log(context, `Error extracting image data for ${embedId}: ${error}`, "error");
    > 100 |       console.error(`Error extracting image data for ${embedId}:`, error);
          |               ^
      101 |       return null;
      102 |     }
      103 |   }

      at ImageDataService.extractImageData (app/lib/services/images/ImageDataService.ts:100:15)
      at Object.<anonymous> (tests/__tests__/image-processing-simplified.test.ts:221:22)

  console.log
    File service errors handled gracefully

      at Object.<anonymous> (tests/__tests__/image-processing-simplified.test.ts:225:15)

  console.warn
    No relationship found for embedId: rId1

      39 |       if (!relationship) {
      40 |         DebugHelper.log(context, `No relationship found for embedId: ${embedId}`, "warn");
    > 41 |         console.warn(`No relationship found for embedId: ${embedId}`);
         |                 ^
      42 |         return null;
      43 |       }
      44 |

      at ImageDataService.extractImageData (app/lib/services/images/ImageDataService.ts:41:17)
      at Object.<anonymous> (tests/__tests__/image-processing-simplified.test.ts:239:22)

  console.warn
    No relationship found for embedId: rId2

      39 |       if (!relationship) {
      40 |         DebugHelper.log(context, `No relationship found for embedId: ${embedId}`, "warn");
    > 41 |         console.warn(`No relationship found for embedId: ${embedId}`);
         |                 ^
      42 |         return null;
      43 |       }
      44 |

      at ImageDataService.extractImageData (app/lib/services/images/ImageDataService.ts:41:17)
      at Object.<anonymous> (tests/__tests__/image-processing-simplified.test.ts:240:22)

PASS tests/__tests__/advanced-color-processing.test.ts
  Advanced Color Processing Tests
    PowerPoint Color Modifiers
      ✓ should apply lumMod (brightness modification) (1 ms)
      ✓ should apply lumOff (brightness offset) (1 ms)
      ✓ should combine multiple color modifiers
      ✓ should handle edge cases in color modification (2 ms)
    Scheme Color Resolution
      ✓ should resolve scheme colors from theme
      ✓ should handle scheme color with modifiers (1 ms)
      ✓ should handle missing scheme colors gracefully
    Color Inheritance and Cascading
      ✓ should handle color inheritance from parent elements
      ✓ should handle color override in inheritance chain
    Complex Color Calculations
      ✓ should handle color temperature adjustments
      ✓ should handle saturation-like adjustments
      ✓ should handle alpha channel preservation in modifications
    Color Space Conversions
      ✓ should handle integer color values
      ✓ should handle integer colors with alpha
      ✓ should handle edge case integer values (1 ms)
    Theme Color Processing Integration
      ✓ should process theme colors with modifications in TextElement
      ✓ should handle multiple color modifications in single element
    Performance and Accuracy
      ✓ should maintain color accuracy through multiple modifications
      ✓ should perform color modifications efficiently (5 ms)

  console.warn
    Invalid relationship format for embedId: rId3 { id: 'rId3', type: 'image', target: '' }

      50 |         imagePath = relationship.target;
      51 |       } else {
    > 52 |         console.warn(`Invalid relationship format for embedId: ${embedId}`, relationship);
         |                 ^
      53 |         return null;
      54 |       }
      55 |

      at ImageDataService.extractImageData (app/lib/services/images/ImageDataService.ts:52:17)
      at Object.<anonymous> (tests/__tests__/image-processing-simplified.test.ts:241:22)

  console.log
    Malformed relationship 1 handled correctly

      at tests/__tests__/image-processing-simplified.test.ts:246:17
          at Array.forEach (<anonymous>)

  console.log
    Malformed relationship 2 handled correctly

      at tests/__tests__/image-processing-simplified.test.ts:246:17
          at Array.forEach (<anonymous>)

  console.log
    Malformed relationship 3 handled correctly

      at tests/__tests__/image-processing-simplified.test.ts:246:17
          at Array.forEach (<anonymous>)

  console.log
    Concurrent processing handled safely

      at Object.<anonymous> (tests/__tests__/image-processing-simplified.test.ts:267:15)

  console.log
    Processed 4 images in 0.08ms

      at Object.<anonymous> (tests/__tests__/image-processing-simplified.test.ts:287:15)

  console.log
    Memory increase after 50 operations: 0.50MB

      at Object.<anonymous> (tests/__tests__/image-processing-simplified.test.ts:307:15)

  console.log
    Data consistency verified

      at Object.<anonymous> (tests/__tests__/image-processing-simplified.test.ts:321:17)

  console.log
    Image data integrity: image1.png, 16 bytes, hash: 7cddabe5...

      at Object.<anonymous> (tests/__tests__/image-processing-simplified.test.ts:340:17)

PASS tests/__tests__/image-processing-simplified.test.ts
  Image Processing Simplified Tests
    Image Format Detection
      ✓ should detect PNG format correctly (2 ms)
      ✓ should detect JPEG format correctly
      ✓ should handle unknown formats gracefully (1 ms)
    Image Data Extraction
      ✓ should extract image data with valid embed ID
      ✓ should handle invalid embed ID gracefully (1 ms)
      ✓ should handle missing relationship gracefully
    Image Processing Context
      ✓ should use context relationships correctly (1 ms)
      ✓ should handle context path resolution
      ✓ should maintain context integrity during processing
    Error Handling
      ✓ should handle file service errors gracefully (5 ms)
      ✓ should handle malformed relationship data (6 ms)
      ✓ should handle concurrent processing safely (1 ms)
    Performance and Memory
      ✓ should process multiple images efficiently (1 ms)
      ✓ should not leak memory during repeated operations
    Data Integrity
      ✓ should maintain data consistency across operations (1 ms)
      ✓ should validate image data integrity

PASS tests/__tests__/default-values.test.ts
  Default Values Tests
    Default Color Settings
      ✓ should set correct defaultColor structure
      ✓ should maintain defaultColor consistency across different content
      ✓ should use defaultColor when no explicit color is provided (1 ms)
      ✓ should handle theme-based default color resolution
    Default Font Settings
      ✓ should set correct defaultFontName
      ✓ should extract defaultFontName from content when available
      ✓ should use fallback font when content has no font
      ✓ should handle multiple content with different fonts
      ✓ should match expected output.json font format
    Standard Element Properties
      ✓ should set standard boolean properties
      ✓ should set correct rotate default
      ✓ should handle position and size defaults (1 ms)
      ✓ should preserve set position and size values
    Missing Properties Handling
      ✓ should handle missing optional properties gracefully
      ✓ should handle empty style object
      ✓ should handle partial style properties (4 ms)
    Backward Compatibility
      ✓ should maintain compatibility with legacy format (1 ms)
      ✓ should provide name property for legacy compatibility
    Theme Integration Defaults
      ✓ should use theme defaults when available
      ✓ should fallback gracefully when theme is missing
    Performance and Memory
      ✓ should handle large numbers of default value requests efficiently (8 ms)

  console.log
    Performance: 10000 parses in 13.35ms

      at Object.<anonymous> (tests/__tests__/services/XmlParseService.test.ts:404:15)

  console.log
    Memory increase: -1.50MB

      at Object.<anonymous> (tests/__tests__/services/XmlParseService.test.ts:405:15)

PASS tests/__tests__/services/XmlParseService.test.ts
  XmlParseService Unit Tests
    Basic XML Parsing
      ✓ should parse simple XML correctly
      ✓ should parse XML with attributes (1 ms)
      ✓ should parse nested XML structures
      ✓ should handle XML declaration correctly
    Node Finding and Traversal
      ✓ should find single node correctly
      ✓ should find multiple nodes correctly
      ✓ should get child nodes by tag name (1 ms)
      ✓ should return empty array for non-existent child nodes
      ✓ should return undefined for non-existent node
    Attribute Handling
      ✓ should get attributes correctly
      ✓ should return undefined for non-existent attributes
      ✓ should handle attributes with special characters
    Text Content Extraction
      ✓ should extract simple text content
      ✓ should handle empty text content
      ✓ should extract text from nested elements
    XML Stringification
      ✓ should stringify simple nodes correctly (1 ms)
      ✓ should stringify nodes with attributes
      ✓ should stringify self-closing tags
      ✓ should stringify nested structures with proper indentation
      ✓ should escape special characters in content (1 ms)
    Error Handling
      ✓ should throw error for empty XML (4 ms)
      ✓ should throw error for null/undefined input (3 ms)
      ✓ should handle malformed XML gracefully (1 ms)
      ✓ should handle XML with only whitespace
    Special Cases and Edge Cases
      ✓ should handle CDATA sections
      ✓ should handle comments in XML
      ✓ should handle namespaces
      ✓ should handle large XML documents (2 ms)
      ✓ should handle deeply nested structures
      ✓ should handle mixed whitespace correctly
    Performance and Memory Tests
      ✓ should handle repeated parsing efficiently (16 ms)

PASS tests/__tests__/services/FileService.test.ts
  FileService Unit Tests
    ZIP Loading
      ✓ should load ZIP from ArrayBuffer successfully (3 ms)
      ✓ should load ZIP from Blob successfully (5 ms)
      ✓ should handle corrupted ZIP files (6 ms)
      ✓ should handle empty ArrayBuffer
      ✓ should handle null/undefined input
    Text File Extraction
      ✓ should extract text file successfully (1 ms)
      ✓ should extract nested file successfully
      ✓ should extract empty file successfully
      ✓ should extract large file successfully (2 ms)
      ✓ should extract Unicode content correctly
      ✓ should throw error for non-existent file (1 ms)
      ✓ should handle file extraction errors
    Binary File Extraction
      ✓ should extract binary file as ArrayBuffer (1 ms)
      ✓ should extract binary file as Buffer
      ✓ should handle empty binary files (1 ms)
      ✓ should handle large binary files
      ✓ should throw error for non-existent binary file (1 ms)
      ✓ should handle binary file extraction errors
    File Existence Check
      ✓ should return true for existing files
      ✓ should return false for non-existent files
      ✓ should return false for directories
      ✓ should handle empty path
      ✓ should handle null ZIP (1 ms)
    File Listing
      ✓ should list all files without pattern (1 ms)
      ✓ should filter files by pattern
      ✓ should filter files by complex pattern
      ✓ should handle empty ZIP
      ✓ should handle pattern that matches nothing
      ✓ should handle null ZIP (1 ms)
    File Information
      ✓ should get file information successfully
      ✓ should handle file without size data
      ✓ should throw error for non-existent file info
      ✓ should handle files with no date
    Error Handling and Edge Cases
      ✓ should handle concurrent file operations (1 ms)
      ✓ should handle file path with special characters
      ✓ should handle very long file paths
      ✓ should handle files with unusual extensions (4 ms)
      ✓ should handle ZIP files with unusual structure (1 ms)
      ✓ should handle memory pressure during large file operations (2 ms)
    Performance Tests
      ✓ should handle large numbers of files efficiently (3 ms)
      ✓ should handle file existence checks efficiently (2 ms)
      ✓ should handle pattern matching efficiently (3 ms)

  console.warn
    Failed to process background image data for rId1: Error: Image not found
        at Object.<anonymous> (/Users/tanghehui/ExploreProject/pptxtojson/tests/background-image.test.ts:140:89)
        at Promise.finally.completed (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1559:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1499:10)
        at _callCircusTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1009:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:949:3)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:839:13)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
        at run (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:757:3)
        at runAndTransformResultsToJestFormat (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1920:21)
        at jestAdapter (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/runner.js:101:19)
        at runTestInternal (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:272:16)
        at runTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:340:7)
        at Object.worker (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:494:12)

      154 |               }
      155 |             } catch (error) {
    > 156 |               console.warn(
          |                       ^
      157 |                 `Failed to process background image data for ${embedId}:`,
      158 |                 error
      159 |               );

      at SlideParser.parseBackground (app/lib/services/parsing/SlideParser.ts:156:23)
      at Object.<anonymous> (tests/background-image.test.ts:158:26)

  console.warn
    No relationship found for embedId: unknownRId

      39 |       if (!relationship) {
      40 |         DebugHelper.log(context, `No relationship found for embedId: ${embedId}`, "warn");
    > 41 |         console.warn(`No relationship found for embedId: ${embedId}`);
         |                 ^
      42 |         return null;
      43 |       }
      44 |

      at ImageDataService.extractImageData (app/lib/services/images/ImageDataService.ts:41:17)
      at SlideParser.parseBackground (app/lib/services/parsing/SlideParser.ts:143:61)
      at Object.<anonymous> (tests/background-image.test.ts:198:53)

  console.warn
    Failed to process background image data for rId1: Error: Corrupted image
        at Object.<anonymous> (/Users/tanghehui/ExploreProject/pptxtojson/tests/background-image.test.ts:375:89)
        at Promise.finally.completed (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1559:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1499:10)
        at _callCircusTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1009:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:949:3)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:839:13)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
        at run (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:757:3)
        at runAndTransformResultsToJestFormat (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1920:21)
        at jestAdapter (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/runner.js:101:19)
        at runTestInternal (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:272:16)
        at runTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:340:7)
        at Object.worker (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:494:12)

      154 |               }
      155 |             } catch (error) {
    > 156 |               console.warn(
          |                       ^
      157 |                 `Failed to process background image data for ${embedId}:`,
      158 |                 error
      159 |               );

      at SlideParser.parseBackground (app/lib/services/parsing/SlideParser.ts:156:23)
      at Object.<anonymous> (tests/background-image.test.ts:393:26)

PASS tests/background-image.test.ts
  Background Image Processing
    SlideParser.parseBackground()
      ✓ should parse solid color background (1 ms)
      ✓ should parse gradient background
      ✓ should parse image background with base64 encoding (1 ms)
      ✓ should fallback to relationship URL when image extraction fails (5 ms)
      ✓ should handle missing background element (1 ms)
      ✓ should handle unknown relationship ID (1 ms)
    Background Image Format Support
      ✓ should process JPEG background images
      ✓ should process PNG background images (3 ms)
      ✓ should process GIF background images
      ✓ should process BMP background images
      ✓ should process WEBP background images
    Slide.convertBackground()
      ✓ should convert solid background to JSON (1 ms)
      ✓ should convert gradient background to JSON
      ✓ should convert image background with base64 to JSON
      ✓ should convert image background with URL to JSON
      ✓ should handle missing background gracefully
    Error Handling
      ✓ should handle XML parsing errors gracefully (2 ms)
      ✓ should handle image service initialization without crash
      ✓ should handle corrupted image data gracefully
    Integration Tests
      ✓ should integrate with ImageDataService for concurrent processing (1 ms)

PASS tests/__tests__/shape-custom-geometry.test.ts
  ShapeProcessor Custom Geometry Analysis
    analyzeCustomGeometry
      ✓ should detect circular custom geometry with 4 cubic bezier curves (1 ms)
      ✓ should return custom for non-square geometry
      ✓ should return custom for geometry with incorrect number of bezier curves
      ✓ should return custom for geometry not starting from center-top
      ✓ should return custom when pathLst is missing
      ✓ should return custom when path is missing
    Shape processing with custom geometry
      ✓ should process shape with custom circular geometry correctly

PASS tests/__tests__/text-style-extractor-advanced.test.ts
  TextStyleExtractor Advanced Coverage Tests
    Text content extraction by paragraphs
      ✓ should extract multiple paragraphs with different styles (3 ms)
      ✓ should handle paragraphs with multiple runs
      ✓ should handle empty paragraphs (1 ms)
      ✓ should handle paragraphs with line breaks
    Style inheritance from shape style
      ✓ should apply shape style color to text without explicit color
      ✓ should prioritize explicit text color over shape style
    Font handling
      ✓ should extract font family from latin typeface
      ✓ should extract font family from ea typeface for Asian languages
      ✓ should extract font family from cs typeface for complex scripts (1 ms)
      ✓ should prioritize latin over ea and cs typefaces
    Text formatting attributes
      ✓ should extract all text formatting attributes
      ✓ should handle false values for boolean attributes
      ✓ should handle missing rPr node
    Color extraction
      ✓ should extract srgbClr colors
      ✓ should extract schemeClr colors with theme resolution
      ✓ should handle color transformations
    Theme requirements validation
      ✓ should throw error when theme colors are used without theme (1 ms)
      ✓ should throw error when shape style uses theme colors without theme
    Edge cases and error handling
      ✓ should handle missing txBody
      ✓ should handle paragraphs without runs
      ✓ should handle runs without text nodes
      ✓ should handle empty text nodes
      ✓ should handle invalid font size values (6 ms)
      ✓ should handle missing shape style fontRef
    Mixed content handling
      ✓ should handle paragraph with mixed content types

PASS tests/__tests__/core-errors.test.ts
  核心错误处理
    PPTXParseError - 基础错误类
      ✓ 应该创建基础错误实例 (1 ms)
      ✓ 应该支持上下文信息
      ✓ 应该支持嵌套错误信息
      ✓ 应该正确处理空上下文
      ✓ 应该正确处理复杂上下文对象
    XMLParseError - XML解析错误
      ✓ 应该创建XML解析错误实例 (1 ms)
      ✓ 应该支持XML特定的上下文信息
      ✓ 应该处理XML命名空间错误
      ✓ 应该处理XML字符编码错误
    FileOperationError - 文件操作错误
      ✓ 应该创建文件操作错误实例
      ✓ 应该支持文件特定的上下文信息
      ✓ 应该处理ZIP文件相关错误
      ✓ 应该处理网络相关的文件错误
    ElementProcessingError - 元素处理错误
      ✓ 应该创建元素处理错误实例
      ✓ 应该支持元素特定的上下文信息 (2 ms)
      ✓ 应该处理文本元素错误
      ✓ 应该处理图像元素错误
      ✓ 应该处理表格元素错误
    ValidationError - 验证错误
      ✓ 应该创建验证错误实例
      ✓ 应该支持验证特定的上下文信息
      ✓ 应该处理字符串验证错误
      ✓ 应该处理复杂对象验证错误
      ✓ 应该处理数组验证错误
    错误继承和多态性
      ✓ 应该正确处理错误继承链
      ✓ 应该支持错误类型检查
      ✓ 应该支持错误聚合 (1 ms)
    错误序列化和反序列化
      ✓ 应该支持错误的JSON序列化
      ✓ 应该处理循环引用的上下文
    错误堆栈跟踪
      ✓ 应该保留完整的堆栈跟踪信息 (5 ms)
      ✓ 应该在继承的错误类中保留堆栈信息 (1 ms)

  console.warn
    ⚠️ Stretch sample file not found: /Users/tanghehui/ExploreProject/pptxtojson/sample/stratch/input.pptx, skipping test

      126 |       // 检查拉伸示例文件是否存在
      127 |       if (!fs.existsSync(stretchInputPath)) {
    > 128 |         console.warn(`⚠️ Stretch sample file not found: ${stretchInputPath}, skipping test`);
          |                 ^
      129 |         return;
      130 |       }
      131 |

      at Object.<anonymous> (tests/__tests__/end-to-end-conversion-flow.test.ts:128:17)

PASS tests/__tests__/end-to-end-conversion-flow.test.ts
  完整转换流程端到端测试
    PPTX → JSON 端到端测试
      ✓ 应该成功转换基础示例文件 (1 ms)
      ✓ 应该正确处理包含拉伸图片的复杂示例 (3 ms)
      ✓ 应该正确验证PPTist格式兼容性 (1 ms)
      ✓ 应该测试多页面PPTX文件的完整转换 (3 ms)
    回归测试
      ✓ 应该确保新功能不影响现有图片处理逻辑
      ✓ 应该验证颜色处理管道仍然正确工作
      ✓ 应该确保文本和形状处理不受图片增强影响
    性能和稳定性测试
      ✓ 应该在合理时间内处理复杂PPTX文件 (1 ms)
      ✓ 应该正确处理错误和异常情况 (4 ms)

  console.error
    Error extracting image data for rId1: Error: File not found
        at Object.<anonymous> (/Users/tanghehui/ExploreProject/pptxtojson/tests/__tests__/image-base64.test.ts:81:64)
        at Promise.finally.completed (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1559:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1499:10)
        at _callCircusTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1009:40)
        at processTicksAndRejections (node:internal/process/task_queues:95:5)
        at _runTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:949:3)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:839:13)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
        at run (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:757:3)
        at runAndTransformResultsToJestFormat (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1920:21)
        at jestAdapter (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/runner.js:101:19)
        at runTestInternal (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:272:16)
        at runTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:340:7)
        at Object.worker (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:494:12)

       98 |     } catch (error) {
       99 |       DebugHelper.log(context, `Error extracting image data for ${embedId}: ${error}`, "error");
    > 100 |       console.error(`Error extracting image data for ${embedId}:`, error);
          |               ^
      101 |       return null;
      102 |     }
      103 |   }

      at ImageDataService.extractImageData (app/lib/services/images/ImageDataService.ts:100:15)
      at Object.<anonymous> (tests/__tests__/image-base64.test.ts:92:22)

PASS tests/__tests__/image-base64.test.ts
  Image Base64 Processing
    ImageDataService
      ✓ should detect JPEG format correctly
      ✓ should detect PNG format correctly
      ✓ should detect GIF format correctly
      ✓ should return unknown for invalid format (1 ms)
      ✓ should generate correct MIME types
      ✓ should encode image to base64 correctly
      ✓ should handle extraction errors gracefully (8 ms)
    ImageElement
      ✓ should output base64 format when image data is available
      ✓ should output URL format when no image data available (4 ms)
      ✓ should handle crop information correctly
    Base64StorageStrategy
      ✓ should upload image data successfully
      ✓ should always be available
      ✓ should have healthy status
      ✓ should handle buffer encoding errors
    Integration Tests
      ✓ should process image from PPTX to base64 end-to-end (1 ms)
      ✓ should handle memory management with multiple images (1 ms)

PASS tests/__tests__/line-height-extraction.test.ts
  TextStyleExtractor - Line Height Extraction
    ✓ should extract line height from spcPct (percentage-based) (1 ms)
    ✓ should extract line height from spcPts (points-based) (2 ms)
    ✓ should handle paragraph without line height
    ✓ should handle multiple paragraphs with different line heights (1 ms)
    ✓ should apply line height to all runs in the same paragraph
    ✓ should include line height in TextElement JSON output
    ✓ should not include line height in JSON output when it's default value
    ✓ should handle edge cases with invalid line height values
    ✓ should extract line height method directly (1 ms)
    ✓ should handle real PowerPoint XML line spacing values (2 ms)
    ✓ should handle PowerPoint default line spacing correctly
    ✓ should include non-default line heights in JSON output (1 ms)

PASS tests/__tests__/connection-shape-processor-advanced.test.ts
  ConnectionShapeProcessor Advanced Coverage Tests
    Connection shape detection
      ✓ should not detect straightConnector1 as connection shape (handled by LineProcessor)
      ✓ should detect bentConnector3 as connection shape
      ✓ should detect curvedConnector2 as connection shape
      ✓ should not process non-connection shapes
      ✓ should process cxnSp without preset geometry (1 ms)
      ✓ should process cxnSp with non-connector geometry
    Connection shape processing
      ✓ should process bentConnector3 with basic properties
      ✓ should process bentConnector3 as bentConnector type (1 ms)
      ✓ should process curvedConnector2 as curvedConnector type
      ✓ should extract connection information
      ✓ should handle missing connection information
      ✓ should handle partial connection information
      ✓ should extract stroke properties from line properties (1 ms)
      ✓ should handle missing stroke properties
      ✓ should handle missing transform information
      ✓ should use unique ID generation
    Element type identification
      ✓ should return correct element type
    Stroke color extraction with theme support
      ✓ should extract theme colors from stroke (1 ms)
      ✓ should handle stroke without fill
    Arrow properties extraction
      ✓ should handle missing arrow attributes
    Error handling
      ✓ should handle missing nvCxnSpPr node
      ✓ should handle missing spPr node

PASS tests/__tests__/text-processor-advanced.test.ts
  TextProcessor Advanced Coverage Tests
    Text box detection
      ✓ should detect text boxes with txBox="1" (1 ms)
      ✓ should not process shapes without txBox
      ✓ should not process shapes with txBox="0"
      ✓ should not process shapes without txBody
      ✓ should handle missing nvSpPr
      ✓ should handle missing cNvSpPr (1 ms)
    Text processing
      ✓ should process basic text box with content (1 ms)
      ✓ should handle text with multiple paragraphs and styles
      ✓ should handle text with theme colors (1 ms)
      ✓ should handle text with direct RGB colors
      ✓ should handle text with font families
      ✓ should handle vertical alignment from bodyPr
      ✓ should use default vertical alignment when not specified
      ✓ should generate unique IDs for text elements (1 ms)
      ✓ should handle missing transform information
      ✓ should handle missing spPr node
      ✓ should handle rotation from transform
    Element type identification
      ✓ should return correct element type
    Error handling
      ✓ should handle empty text content gracefully
      ✓ should throw error when using theme colors without theme
      ✓ should handle malformed XML structure gracefully
    Style inheritance
      ✓ should apply shape style to text elements (1 ms)
    Complex text formatting
      ✓ should handle line breaks within paragraphs
      ✓ should handle mixed formatting within a paragraph (3 ms)

PASS tests/__tests__/stretch-offset-parsing.test.ts
  拉伸偏移解析测试
    extractStretchInfo
      ✓ 应该能够解析基本的fillRect信息 (1 ms)
      ✓ 应该在没有stretch元素时返回undefined
      ✓ 应该在没有fillRect元素时返回undefined
      ✓ 应该正确处理零值和负值
    完整的shape处理
      ✓ 应该在处理带有拉伸偏移的shape时设置stretchInfo (1 ms)

PASS tests/__tests__/connection-shape-processor.test.ts
  ConnectionShapeProcessor
    canProcess
      ✓ should return true for p:cxnSp nodes without line geometry
      ✓ should return false for p:cxnSp nodes with line geometry
      ✓ should return false for p:cxnSp nodes with straightConnector1 geometry
      ✓ should return true for p:cxnSp nodes with bent connectors
      ✓ should return false for non-connection shape nodes
    getElementType
      ✓ should return connection-shape
    process
      ✓ should process basic connection shape with straight line (1 ms)
      ✓ should process bent connector
      ✓ should process arrow connector with head and tail
      ✓ should process connection with rotation and flip (1 ms)
      ✓ should process connection with start and end connections (1 ms)
      ✓ should handle missing nvCxnSpPr gracefully
      ✓ should handle custom geometry connections
    geometry mapping
      ✓ should map various connection geometries correctly (4 ms)

PASS tests/__tests__/precision.test.ts
  Position and Size Precision Tests
    EMU to Points Conversion
      ✓ should maintain high precision in EMU to points conversion (1 ms)
      ✓ should handle edge cases in EMU conversion (2 ms)
      ✓ should provide consistent conversion across different scales
    Position Precision
      ✓ should maintain sub-pixel precision for positions
      ✓ should handle position tolerance correctly
      ✓ should detect precision loss beyond acceptable limits
    Size Precision
      ✓ should maintain precision for element dimensions (1 ms)
      ✓ should handle aspect ratio preservation
    Coordinate System Consistency
      ✓ should use consistent coordinate origin
      ✓ should handle coordinate transformations consistently
    Rounding Strategy
      ✓ should use appropriate rounding for display vs calculation
      ✓ should handle half-pixel rounding consistently

PASS tests/__tests__/shape-element-advanced.test.ts
  ShapeElement Advanced Coverage Tests
    Constructor and basic properties
      ✓ should create shape element with correct type and shape type
      ✓ should handle all shape types (1 ms)
    Path handling
      ✓ should set and get custom path
      ✓ should generate internal path when no custom path is set
      ✓ should generate ellipse path correctly
      ✓ should generate rounded rectangle path with adjustment values
      ✓ should generate triangle path
      ✓ should generate diamond path
      ✓ should fallback to rectangle for unknown shape types
    PathFormula handling
      ✓ should set and get path formula (1 ms)
      ✓ should return undefined when no path formula is set
    Adjustment values
      ✓ should set and get adjustment values
      ✓ should return empty object when no adjustment values are set
      ✓ should use adjustment values in roundRect path generation
      ✓ should use default adjustment value when not provided
    ViewBox handling
      ✓ should set and get viewBox
      ✓ should return undefined when no viewBox is set
    Special flag
      ✓ should set and get special flag
      ✓ should return undefined when special flag is not set
    Text content
      ✓ should set and get text content
      ✓ should set simple text content (1 ms)
      ✓ should set shape text content
    Fill and gradient
      ✓ should set and get fill
      ✓ should set and get gradient
    Stroke properties
      ✓ should set and get stroke properties
    Flip properties
      ✓ should set and get flip properties
    Connection info
      ✓ should set and get connection info
    JSON serialization
      ✓ should serialize basic shape with default values
      ✓ should serialize shape with dimensions and position
      ✓ should serialize shape with gradient instead of fill (1 ms)
      ✓ should serialize shape with custom fill color
      ✓ should serialize custom shape as rect shape type
      ✓ should include pathFormula when set
      ✓ should not include pathFormula when undefined
      ✓ should include outline only when stroke has meaningful data
      ✓ should include flip properties only when true
      ✓ should include keypoints for roundRect shapes
      ✓ should include text content when present (1 ms)
      ✓ should use viewBox from setViewBox when available
      ✓ should use actual dimensions for viewBox when size is set and no custom viewBox
      ✓ should use default viewBox when no size or custom viewBox (2 ms)
    Theme fill generation
      ✓ should generate consistent fallback colors based on ID
      ✓ should generate different colors for different IDs
      ✓ should include debug information in fallback color
      ✓ should prioritize actual fill over fallback
    Edge cases and error handling
      ✓ should handle zero or negative dimensions in path generation
      ✓ should handle undefined adjustment values in roundRect
      ✓ should handle empty ID in fallback color generation

PASS tests/__tests__/text-style-multi-paragraph.test.ts
  TextStyleExtractor - Multi-paragraph handling
    ✓ should extract paragraphs separately for proper p tag generation (1 ms)
    ✓ should handle single paragraph without adding extra line breaks
    ✓ should handle three paragraphs with proper line breaks (1 ms)
    ✓ should handle empty paragraphs correctly
    ✓ should preserve styles when adding line breaks between paragraphs
    ✓ should generate correct HTML with multiple p tags in TextElement (1 ms)

PASS tests/__tests__/shape-style-reference.test.ts
  ShapeProcessor Style Reference Support
    ✓ should process shape with style reference (fillRef) (2 ms)
    ✓ should fall back to direct fill when no style reference
    ✓ should handle missing theme gracefully (1 ms)

PASS tests/__tests__/output-structure.test.ts
  Output Structure Alignment Tests
    Top-level Structure
      ✓ should include all expected top-level fields (1 ms)
      ✓ should have slides as an array
      ✓ should have theme as an object with color scheme
      ✓ should have title as a string
    Slide Structure
      ✓ should have consistent slide structure
      ✓ should have elements with consistent structure (1 ms)
    Backward Compatibility
      ✓ should support legacy position properties (2 ms)
    Theme Structure
      ✓ should have consistent theme color structure
      ✓ should have font scheme structure if present
    Error Handling Structure
      ✓ should have consistent error response structure (1 ms)
    Version Compatibility
      ✓ should include version information
    Optional Fields Handling
      ✓ should handle missing optional fields gracefully
      ✓ should handle slideSize and metadata fields

PASS tests/__tests__/debug-helper.test.ts
  DebugHelper
    isDebugEnabled
      ✓ should return false when debug mode is not enabled (1 ms)
      ✓ should return true when debug mode is enabled
    shouldSaveDebugImages
      ✓ should return false when debug mode is disabled
      ✓ should return false when debug mode is enabled but saveDebugImages is false
      ✓ should return true when debug mode is enabled and saveDebugImages is true
    shouldLogProcessingDetails
      ✓ should return true when debug mode and logging are enabled
    fromOptions methods
      ✓ should work with ParseOptions directly
    getDebugSummary
      ✓ should return disabled message when debug is off
      ✓ should return enabled features when debug is on (1 ms)
    withTiming
      ✓ should execute function normally when timing is disabled
      ✓ should execute function and log timing when enabled

PASS tests/utils.test.ts
  领域模型
    演示文稿
      ✓ 应该创建演示文稿实例
      ✓ 应该添加和获取幻灯片
    幻灯片
      ✓ 应该创建幻灯片实例
    主题
      ✓ 应该创建主题实例
      ✓ 应该设置和获取配色方案

PASS tests/__tests__/preset-shape-paths.test.ts
  Preset Shape Path Generation
    Basic shapes
      ✓ should generate correct rectangle path (1 ms)
      ✓ should generate correct ellipse path
      ✓ should generate correct triangle path
      ✓ should generate correct diamond path
    Arrow shapes
      ✓ should generate correct right arrow path
      ✓ should generate correct left arrow path
    Polygon shapes
      ✓ should generate correct pentagon path (1 ms)
      ✓ should generate correct hexagon path (2 ms)
      ✓ should generate correct octagon path
    Star shapes
      ✓ should generate correct 5-point star path (1 ms)
    Special shapes
      ✓ should generate correct parallelogram path
      ✓ should generate correct trapezoid path
      ✓ should generate correct rounded rectangle path
    Unknown shapes
      ✓ should default to rectangle for unknown shape types
    Different dimensions
      ✓ should scale paths correctly for different dimensions
      ✓ should handle ellipse with different width and height

PASS tests/__tests__/debug-functionality.test.ts
  Debug Functionality Integration
    Debug options propagation
      ✓ should correctly detect debug options from ParseOptions
      ✓ should handle disabled debug mode (1 ms)
      ✓ should handle partial debug options
    Debug logging
      ✓ should log when debug logging is enabled
      ✓ should not log when debug logging is disabled
      ✓ should provide correct debug summary
    Debug timing functionality
      ✓ should execute and time operations when timing is enabled (1 ms)
      ✓ should handle timing errors correctly (2 ms)

  console.log
    Attempt 3/3 to fetch JSON from CDN

      at fetchWithTimeout (components/MonacoJsonLoader.tsx:53:25)

PASS tests/__tests__/color-transformation-chain.test.ts
  Color Transformation Chain Tests
    PowerPoint Transformation Order
      ✓ should apply transformations in PowerPoint-compatible order (1 ms)
      ✓ should handle lumMod + lumOff combination correctly
      ✓ should handle shade + tint combination
      ✓ should handle saturation + hue modifications (1 ms)
    Transformation Accuracy
      ✓ should maintain mathematical precision through transformation chains
      ✓ should handle cumulative precision errors gracefully
      ✓ should clamp intermediate values to valid ranges
    Common PowerPoint Patterns
      ✓ should handle accent color with subtle modifications
      ✓ should handle dark color with lightening (1 ms)
      ✓ should handle text color with transparency
      ✓ should handle gradient stop colors
    ColorUtils Integration
      ✓ should produce consistent results between FillExtractor and direct ColorUtils calls
      ✓ should handle HSL-based transformations consistently
    Performance with Transformation Chains
      ✓ should handle complex transformation chains efficiently
      ✓ should be efficient with repeated theme color lookups
    Edge Cases in Transformation Chains
      ✓ should handle chains with missing transformation values (1 ms)
      ✓ should handle chains with invalid transformation values
      ✓ should handle empty transformation chain gracefully

PASS tests/__tests__/theme-color-mapping.test.ts
  Theme Color Mapping Tests
    Basic Theme Color Type Detection
      ✓ should identify accent1 color in HTML output (1 ms)
      ✓ should identify dk1 color for default text
      ✓ should handle light theme colors (lt1, lt2)
      ✓ should handle dark theme colors (dk1, dk2) (1 ms)
    Accent Color Detection
      ✓ should identify all accent colors (accent1-accent6) (1 ms)
      ✓ should handle case-insensitive color matching (1 ms)
    Dynamic Theme Color Resolution
      ✓ should resolve theme colors from presentation theme
      ✓ should handle theme color inheritance chain
      ✓ should fallback to default theme when custom theme missing
    Color Type Attribute Generation
      ✓ should generate --colortype attribute correctly
      ✓ should handle multiple spans with different color types
      ✓ should omit --colortype for non-theme colors
    Default Color Handling
      ✓ should set defaultColor based on theme
      ✓ should maintain defaultColor consistency
    Theme Color Edge Cases
      ✓ should handle missing color information (1 ms)
      ✓ should handle undefined and null colors
      ✓ should handle empty color strings
    Color Type Mapping Extension
      ✓ should be extensible for new theme colors

PASS tests/__tests__/shape-line-fill-distinction.test.ts
  ShapeProcessor Line vs Fill Distinction
    ✓ should ignore noFill inside a:ln (line properties) and use shape solidFill (1 ms)
    ✓ should use noFill from shape properties (direct child of spPr)
    ✓ should ignore both solidFill and noFill inside a:ln when shape has no fill (1 ms)
    ✓ should prioritize shape solidFill over line solidFill

PASS tests/__tests__/color-format-extended.test.ts
  Color Format Extended Tests
    Hex Color Format
      ✓ should preserve hex format with alpha in ColorUtils (1 ms)
      ✓ should handle 3-digit hex colors
      ✓ should handle 8-digit hex colors with various alpha values
      ✓ should handle hex colors in TextElement HTML output
    RGBA Color Format
      ✓ should convert rgba to standardized format
      ✓ should handle rgba with transparency
      ✓ should normalize rgba spacing and format
    RGB Color Format
      ✓ should convert rgb to rgba format (1 ms)
      ✓ should handle rgb with various spacing
      ✓ should convert rgb to hex format in TextElement HTML (3 ms)
    Color Format Edge Cases
      ✓ should handle transparent and none colors
      ✓ should handle undefined and empty colors (1 ms)
      ✓ should handle invalid color formats
    Color Format Consistency
      ✓ should maintain consistent alpha formatting
      ✓ should handle edge alpha values
      ✓ should format alpha as 1 when alpha is exactly 1
    Integration with TextElement
      ✓ should handle multiple color formats in single text element
      ✓ should preserve color format in HTML output

PASS tests/__tests__/html-output-integrity.test.ts
  HTML Output Integrity Tests
    HTML Structure Validation
      ✓ should generate correct basic HTML structure (1 ms)
      ✓ should generate correct HTML for expected output format
      ✓ should handle empty text content
    Multiple Text Runs Handling
      ✓ should handle multiple text runs in single element (1 ms)
      ✓ should preserve text run order
      ✓ should handle mixed formatting in multiple runs
    Style Attribute Combination
      ✓ should combine all style attributes correctly
      ✓ should handle partial style attributes (4 ms)
      ✓ should maintain consistent style attribute order (1 ms)
    Text Formatting Hierarchy
      ✓ should preserve paragraph level formatting
      ✓ should handle complex nested formatting
    Special Characters and Encoding
      ✓ should handle Chinese characters
      ✓ should handle special HTML characters
      ✓ should handle empty and whitespace text
    Output Format Consistency
      ✓ should match expected output.json format exactly (1 ms)
      ✓ should generate consistent output across multiple instances
    Integration with Element Properties
      ✓ should integrate HTML content with element properties (1 ms)

PASS tests/__tests__/integration.test.ts
  Integration Tests
    Parser Integration
      ✓ should parse a simple PPTX file structure (2 ms)
      ✓ should handle multiple slides with different element types (1 ms)
    Data Quality Validation
      ✓ should ensure all element IDs are unique across slides
      ✓ should validate color format consistency (1 ms)
      ✓ should validate position and size precision (1 ms)
    Utility Integration
      ✓ should integrate UnitConverter correctly (1 ms)
      ✓ should integrate ColorUtils correctly
      ✓ should integrate IdGenerator correctly
    Error Handling Integration
      ✓ should handle malformed data gracefully
      ✓ should handle empty presentations (1 ms)
    Performance Integration
      ✓ should handle large presentations efficiently (13 ms)
    Regression Tests
      ✓ should maintain compatibility with existing format (1 ms)

PASS tests/__tests__/roundrect-keypoints.test.ts
  RoundRect Keypoints
    ✓ should use default keypoints value of 0.5 when no adjustment values are set (1 ms)
    ✓ should use custom adjustment value for keypoints
    ✓ should handle different adjustment values correctly (1 ms)
    ✓ should generate proper rounded rectangle path with adjustment values
    ✓ should only add keypoints property for roundRect shapes

  console.warn
    Fetch attempt 3 failed: Error [AbortError]: Request timeout
        at /Users/tanghehui/ExploreProject/pptxtojson/tests/__tests__/monaco-json-loader-large-files.test.tsx:126:27
        at Timeout.task [as _onTimeout] (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jsdom/lib/jsdom/browser/Window.js:579:19)
        at listOnTimeout (node:internal/timers:573:17)
        at processTimers (node:internal/timers:514:7)

      73 |                 return response;
      74 |               } catch (error) {
    > 75 |                 console.warn(`Fetch attempt ${attempt} failed:`, error);
         |                         ^
      76 |                 
      77 |                 if (attempt === retries) {
      78 |                   // 为超时错误提供更详细的信息

      at fetchWithTimeout (components/MonacoJsonLoader.tsx:75:25)
      at loadJson (components/MonacoJsonLoader.tsx:100:28)

  console.error
    Failed to load JSON: Request timeout after 120s. This may be due to:
                        • Large file size (consider using smaller chunks)
                        • Slow network connection
                        • CDN server overload
                        • Network connectivity issues
                        
                        Try refreshing or using a smaller file.

      166 |       } catch (err) {
      167 |         const errorMessage = err instanceof Error ? err.message : String(err);
    > 168 |         console.error("Failed to load JSON:", errorMessage);
          |                 ^
      169 |         setError(`Failed to load JSON: ${errorMessage}`);
      170 |         setLoadedSource(source); // 保存source以便显示重试按钮
      171 |       } finally {

      at loadJson (components/MonacoJsonLoader.tsx:168:17)

  console.warn
    Invalid offset percentages in ImageElement img6: { left: NaN, top: Infinity, right: 15, bottom: 8 }

      106 |       if (!isFinite(leftPercent) || !isFinite(topPercent) || 
      107 |           !isFinite(rightPercent) || !isFinite(bottomPercent)) {
    > 108 |         console.warn(`Invalid offset percentages in ImageElement ${this.id}:`, {
          |                 ^
      109 |           left: leftPercent, top: topPercent, right: rightPercent, bottom: bottomPercent
      110 |         });
      111 |         return undefined;

      at ImageElement.getStretchInfo (app/lib/models/domain/elements/ImageElement.ts:108:17)
      at Object.<anonymous> (tests/__tests__/image-element-model-enhancements.test.ts:100:40)

  console.warn
    FillRect would cause division by zero in ImageElement img7: {
      left: 0.6,
      top: 0.3,
      right: 0.6,
      bottom: 0.3,
      widthDenominator: -0.19999999999999996,
      heightDenominator: 0.39999999999999997
    }

      126 |       
      127 |       if (widthDenominator <= 0.001 || heightDenominator <= 0.001) {
    > 128 |         console.warn(`FillRect would cause division by zero in ImageElement ${this.id}:`, {
          |                 ^
      129 |           left, top, right, bottom,
      130 |           widthDenominator, heightDenominator
      131 |         });

      at ImageElement.getStretchInfo (app/lib/models/domain/elements/ImageElement.ts:128:17)
      at Object.<anonymous> (tests/__tests__/image-element-model-enhancements.test.ts:123:40)

PASS tests/__tests__/image-element-model-enhancements.test.ts
  ImageElement 数据模型增强测试
    基础功能测试
      ✓ 应该正确创建ImageElement实例 (1 ms)
      ✓ 应该正确设置和获取embedId
      ✓ 应该正确设置和获取Alt文本
    stretchInfo 功能测试
      ✓ 应该正确设置和获取stretchInfo
      ✓ 应该从offsetInfo转换为stretchInfo
      ✓ 应该处理无效的offsetInfo值 (2 ms)
      ✓ 应该处理会导致除零的fillRect值 (1 ms)
    offsetInfo 功能测试
      ✓ 应该正确设置和获取offsetInfo
    图片数据功能测试
      ✓ 应该正确设置和获取图片数据
      ✓ 应该正确设置和获取长宽比
    裁剪功能测试
      ✓ 应该正确设置和获取裁剪信息
    序列化功能测试
      ✓ 应该正确序列化包含完整信息的ImageElement (1 ms)
      ✓ 应该正确序列化最小配置的ImageElement
    边界情况和错误处理
      ✓ 应该处理空的src参数
      ✓ 应该处理undefined的embedId
      ✓ 应该处理stretchInfo优先级

PASS tests/__tests__/font-size-calculator.test.ts
  FontSizeCalculator
    convertPowerPointToWebSize
      ✓ should convert PowerPoint font sizes to web sizes with correct precision (3 ms)
      ✓ should handle numeric inputs
      ✓ should handle decimal inputs correctly
      ✓ should round to 2 decimal places using half-up rounding (2 ms)
      ✓ should maintain consistency with old calculation method
    isValidSize
      ✓ should validate correct sizes (1 ms)
      ✓ should reject invalid sizes
    batchConvert
      ✓ should convert multiple sizes (1 ms)
      ✓ should handle mixed string and number inputs
    getScalingFactor
      ✓ should return the correct scaling factor
    precision and edge cases
      ✓ should handle very small values
      ✓ should handle very large values
      ✓ should handle values that result in many decimal places

  console.log
    Loading JSON from URL: https://example.com/timeout.json

      at loadJson (components/MonacoJsonLoader.tsx:47:19)

  console.log
    Attempt 1/3 to fetch JSON from CDN

      at fetchWithTimeout (components/MonacoJsonLoader.tsx:53:25)

  console.warn
    Fetch attempt 1 failed: Error: Network timeout
        at Object.<anonymous> (/Users/tanghehui/ExploreProject/pptxtojson/tests/__tests__/monaco-json-loader-large-files.test.tsx:153:46)
        at Promise.finally.completed (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1559:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1499:10)
        at _callCircusTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1009:40)
        at _runTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:949:3)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:839:13)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
        at run (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:757:3)
        at runAndTransformResultsToJestFormat (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1920:21)
        at jestAdapter (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/runner.js:101:19)
        at runTestInternal (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:272:16)
        at runTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:340:7)
        at Object.worker (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:494:12)

      73 |                 return response;
      74 |               } catch (error) {
    > 75 |                 console.warn(`Fetch attempt ${attempt} failed:`, error);
         |                         ^
      76 |                 
      77 |                 if (attempt === retries) {
      78 |                   // 为超时错误提供更详细的信息

      at fetchWithTimeout (components/MonacoJsonLoader.tsx:75:25)
      at loadJson (components/MonacoJsonLoader.tsx:100:28)

  console.log
    Retrying in 1000ms...

      at fetchWithTimeout (components/MonacoJsonLoader.tsx:93:25)

PASS tests/__tests__/color-format.test.ts
  Color Format Standardization Tests
    Color Format Conversion
      ✓ should convert hex colors to rgba format
      ✓ should handle rgb format and convert to rgba
      ✓ should maintain rgba format without changes
    Theme Color Processing
      ✓ should correctly map theme color names to rgba values (1 ms)
      ✓ should handle theme color variations (lumMod, lumOff)
    Color Output Consistency
      ✓ should ensure all colors in output use the same format
      ✓ should handle transparent colors
    Color Scheme Inheritance
      ✓ should properly inherit colors from theme to elements

PASS tests/__tests__/shape-element-enhancements.test.ts
  ShapeElement Enhancements
    enableShrink property
      ✓ should include enableShrink: true in JSON output for all shape types
      ✓ should include enableShrink in complete JSON structure
    Circle path generation
      ✓ should generate correct circular SVG path for ellipse type
      ✓ should generate circular path that matches PPTist format exactly
      ✓ should generate different paths for different shape types
    Theme fill handling
      ✓ should use actual fill color when provided
      ✓ should generate fallback colors when no fill is provided (1 ms)
      ✓ should generate consistent fallback colors based on ID
    Shape element structure validation
      ✓ should maintain all required properties for PPTist compatibility (2 ms)

PASS tests/__tests__/image-offset-adjuster.test.ts
  ImageOffsetAdjuster
    applyOffsetAdjustment
      ✓ should return original position when no strategy is provided (1 ms)
      ✓ should center align image when strategy is center
      ✓ should apply margin when strategy is margin
      ✓ should apply percentage offset when strategy is percentage
      ✓ should apply absolute offset when strategy is absolute
    autoAdjust
      ✓ should not adjust position when image is within bounds
      ✓ should adjust X position when image exceeds right boundary
      ✓ should adjust Y position when image exceeds bottom boundary (1 ms)
      ✓ should adjust both X and Y when image exceeds both boundaries
      ✓ should ensure position is not negative
      ✓ should handle edge case where image is larger than slide

PASS tests/slide-background-format.test.ts
  Slide Background Format
    Legacy Background Format
      ✓ should return legacy format for image background
      ✓ should return legacy format for solid background
    PPTist Background Format
      ✓ should return PPTist format for image background (1 ms)
      ✓ should return PPTist format for solid background (same as legacy)
      ✓ should return PPTist format for default background when no background is set
    Default Parameter Behavior
      ✓ should default to legacy format when no format is specified
    Format Consistency
      ✓ should produce different output formats for the same background

PASS tests/__tests__/fill-extractor.test.ts
  FillExtractor
    getSolidFill
      ✓ should extract direct RGB color (1 ms)
      ✓ should extract preset color
      ✓ should extract HSL color
      ✓ should apply alpha transformation
      ✓ should apply tint transformation
      ✓ should apply shade transformation
      ✓ should return empty string for missing solidFill
      ✓ should handle empty solidFill object (1 ms)
    getFillColor
      ✓ should extract solid fill color from spPr
      ✓ should return transparent for noFill
      ✓ should return empty string for no fill specified
  ColorUtils
    New transformation functions
      ✓ should apply shade transformation
      ✓ should apply tint transformation
      ✓ should apply alpha transformation
      ✓ should get preset color
      ✓ should return null for unknown preset color
      ✓ should convert HSL to RGB

PASS tests/models/slide-advanced-background.test.ts
  Slide Model - Advanced Background Format
    Complex Background Scenarios
      Base64 Image Backgrounds
        ✓ should handle valid base64 images in legacy format
        ✓ should handle valid base64 images in pptist format (1 ms)
        ✓ should handle malformed base64 gracefully
      URL-based Image Backgrounds
        ✓ should handle HTTPS URLs in legacy format (2 ms)
        ✓ should handle relative URLs in pptist format (1 ms)
        ✓ should handle empty imageUrl gracefully
      Gradient Backgrounds
        ✓ should handle complex gradient definitions
        ✓ should handle gradient with single color
        ✓ should handle gradient with empty colors array
      Solid Color Backgrounds
        ✓ should handle various color formats in solid backgrounds (1 ms)
        ✓ should handle missing color in solid background
    Cloud Storage Integration Points
      ✓ should use imageData when cloud storage is enabled
      ✓ should fallback when cloud upload fails
    Edge Cases and Error Handling
      ✓ should handle unknown background types gracefully (1 ms)
      ✓ should handle null background values
      ✓ should handle background with both imageUrl and imageData
    Performance and Memory
      ✓ should handle large background objects efficiently
      ✓ should not modify original background object

PASS tests/__tests__/id-uniqueness.test.ts
  Element ID Uniqueness Tests
    ID Generation
      ✓ should generate unique IDs for all elements
      ✓ should handle PowerPoint duplicate ID conflicts (1 ms)
      ✓ should maintain ID format consistency
      ✓ should generate IDs for elements without original IDs
      ✓ should handle grouped elements with nested IDs
    ID Collision Detection
      ✓ should detect and report ID collisions
    ID Persistence
      ✓ should maintain stable IDs across parsing sessions

PASS tests/__tests__/html-converter-paragraph.test.ts
  HtmlConverter - Paragraph structure
    ✓ should generate multiple p tags for multiple paragraphs
    ✓ should handle single paragraph correctly (1 ms)
    ✓ should support text alignment in paragraphs
    ✓ should not wrap in div when wrapInDiv is false
    ✓ should escape HTML special characters
    ✓ should handle empty paragraphs
    ✓ should get default font and color correctly
    ✓ should use fallback values when no styles are found

  console.error
    Failed to copy JSON: Error: Clipboard access denied
        at Object.<anonymous> (/Users/tanghehui/ExploreProject/pptxtojson/tests/__tests__/monaco-json-editor.test.tsx:246:9)
        at Promise.finally.completed (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1559:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1499:10)
        at _callCircusTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1009:40)
        at _runTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:949:3)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:839:13)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
        at run (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:757:3)
        at runAndTransformResultsToJestFormat (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1920:21)
        at jestAdapter (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/runner.js:101:19)
        at runTestInternal (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:272:16)
        at runTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:340:7)
        at Object.worker (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:494:12)

      69 |       onCopy?.(true);
      70 |     } catch (error) {
    > 71 |       console.error("Failed to copy JSON:", error);
         |               ^
      72 |       onCopy?.(false);
      73 |     } finally {
      74 |       setCopying(false);

      at handleCopyJson (components/MonacoJsonEditor.tsx:71:15)

  console.log
    Loading JSON from URL: https://example.com/test.json

      at loadJson (components/MonacoJsonLoader.tsx:47:19)

  console.log
    Attempt 1/3 to fetch JSON from CDN

      at fetchWithTimeout (components/MonacoJsonLoader.tsx:53:25)

  console.warn
    Fetch attempt 1 failed: Error: Network error
        at Object.<anonymous> (/Users/tanghehui/ExploreProject/pptxtojson/tests/__tests__/monaco-json-loader.test.tsx:233:32)
        at Promise.finally.completed (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1559:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1499:10)
        at _callCircusTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1009:40)
        at _runTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:949:3)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:839:13)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
        at run (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:757:3)
        at runAndTransformResultsToJestFormat (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1920:21)
        at jestAdapter (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/runner.js:101:19)
        at runTestInternal (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:272:16)
        at runTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:340:7)
        at Object.worker (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:494:12)

      73 |                 return response;
      74 |               } catch (error) {
    > 75 |                 console.warn(`Fetch attempt ${attempt} failed:`, error);
         |                         ^
      76 |                 
      77 |                 if (attempt === retries) {
      78 |                   // 为超时错误提供更详细的信息

      at fetchWithTimeout (components/MonacoJsonLoader.tsx:75:25)
      at loadJson (components/MonacoJsonLoader.tsx:100:28)

  console.log
    Retrying in 1000ms...

      at fetchWithTimeout (components/MonacoJsonLoader.tsx:93:25)

  console.log
    Attempt 2/3 to fetch JSON from CDN

      at fetchWithTimeout (components/MonacoJsonLoader.tsx:53:25)

  console.warn
    Fetch attempt 2 failed: Error [AbortError]: timeout
        at Object.<anonymous> (/Users/tanghehui/ExploreProject/pptxtojson/tests/__tests__/monaco-json-loader.test.tsx:256:28)
        at Promise.finally.completed (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1559:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1499:10)
        at _callCircusTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1009:40)
        at runNextTicks (node:internal/process/task_queues:60:5)
        at listOnTimeout (node:internal/timers:540:9)
        at processTimers (node:internal/timers:514:7)
        at _runTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:949:3)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:839:13)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
        at run (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:757:3)
        at runAndTransformResultsToJestFormat (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1920:21)
        at jestAdapter (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/runner.js:101:19)
        at runTestInternal (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:272:16)
        at runTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:340:7)
        at Object.worker (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:494:12)

      73 |                 return response;
      74 |               } catch (error) {
    > 75 |                 console.warn(`Fetch attempt ${attempt} failed:`, error);
         |                         ^
      76 |                 
      77 |                 if (attempt === retries) {
      78 |                   // 为超时错误提供更详细的信息

      at fetchWithTimeout (components/MonacoJsonLoader.tsx:75:25)
      at loadJson (components/MonacoJsonLoader.tsx:100:28)

  console.log
    Retrying in 2000ms...

      at fetchWithTimeout (components/MonacoJsonLoader.tsx:93:25)

  console.log
    Attempt 2/3 to fetch JSON from CDN

      at fetchWithTimeout (components/MonacoJsonLoader.tsx:53:25)

  console.warn
    Fetch attempt 2 failed: Error: Network timeout
        at Object.<anonymous> (/Users/tanghehui/ExploreProject/pptxtojson/tests/__tests__/monaco-json-loader-large-files.test.tsx:153:46)
        at Promise.finally.completed (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1559:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1499:10)
        at _callCircusTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1009:40)
        at _runTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:949:3)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:839:13)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
        at run (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:757:3)
        at runAndTransformResultsToJestFormat (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1920:21)
        at jestAdapter (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/runner.js:101:19)
        at runTestInternal (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:272:16)
        at runTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:340:7)
        at Object.worker (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:494:12)

      73 |                 return response;
      74 |               } catch (error) {
    > 75 |                 console.warn(`Fetch attempt ${attempt} failed:`, error);
         |                         ^
      76 |                 
      77 |                 if (attempt === retries) {
      78 |                   // 为超时错误提供更详细的信息

      at fetchWithTimeout (components/MonacoJsonLoader.tsx:75:25)
      at loadJson (components/MonacoJsonLoader.tsx:100:28)

  console.log
    Retrying in 2000ms...

      at fetchWithTimeout (components/MonacoJsonLoader.tsx:93:25)

  console.error
    Failed to format JSON: TypeError: Converting circular structure to JSON
        --> starting at object with constructor 'Object'
        --- property 'self' closes the circle
        at JSON.stringify (<anonymous>)
        at formatJson (/Users/tanghehui/ExploreProject/pptxtojson/components/MonacoJsonEditor.tsx:54:19)
        at MonacoJsonEditor (/Users/tanghehui/ExploreProject/pptxtojson/components/MonacoJsonEditor.tsx:364:18)
        at renderWithHooks (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:15486:18)
        at updateFunctionComponent (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:19617:20)
        at beginWork (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:21640:16)
        at beginWork$1 (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:27465:14)
        at performUnitOfWork (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:26599:12)
        at workLoopSync (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:26505:5)
        at renderRootSync (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:26473:7)
        at performConcurrentWorkOnRoot (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:25777:74)
        at flushActQueue (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react/cjs/react.development.js:2667:24)
        at act (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react/cjs/react.development.js:2582:11)
        at /Users/tanghehui/ExploreProject/pptxtojson/node_modules/@testing-library/react/dist/act-compat.js:47:25
        at renderRoot (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/@testing-library/react/dist/pure.js:190:26)
        at render (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/@testing-library/react/dist/pure.js:292:10)
        at Object.<anonymous> (/Users/tanghehui/ExploreProject/pptxtojson/tests/__tests__/monaco-json-editor.test.tsx:324:13)
        at Promise.finally.completed (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1559:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1499:10)
        at _callCircusTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1009:40)
        at _runTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:949:3)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:839:13)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
        at run (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:757:3)
        at runAndTransformResultsToJestFormat (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1920:21)
        at jestAdapter (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/runner.js:101:19)
        at runTestInternal (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:272:16)
        at runTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:340:7)
        at Object.worker (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:494:12)

      54 |       return JSON.stringify(jsonData, null, 2);
      55 |     } catch (error) {
    > 56 |       console.error('Failed to format JSON:', error);
         |               ^
      57 |       return 'Error: Invalid JSON data';
      58 |     }
      59 |   };

      at formatJson (components/MonacoJsonEditor.tsx:56:15)
      at MonacoJsonEditor (components/MonacoJsonEditor.tsx:364:18)
      at renderWithHooks (node_modules/react-dom/cjs/react-dom.development.js:15486:18)
      at updateFunctionComponent (node_modules/react-dom/cjs/react-dom.development.js:19617:20)
      at beginWork (node_modules/react-dom/cjs/react-dom.development.js:21640:16)
      at beginWork$1 (node_modules/react-dom/cjs/react-dom.development.js:27465:14)
      at performUnitOfWork (node_modules/react-dom/cjs/react-dom.development.js:26599:12)
      at workLoopSync (node_modules/react-dom/cjs/react-dom.development.js:26505:5)
      at renderRootSync (node_modules/react-dom/cjs/react-dom.development.js:26473:7)
      at performConcurrentWorkOnRoot (node_modules/react-dom/cjs/react-dom.development.js:25777:74)
      at flushActQueue (node_modules/react/cjs/react.development.js:2667:24)
      at act (node_modules/react/cjs/react.development.js:2582:11)
      at node_modules/@testing-library/react/dist/act-compat.js:47:25
      at renderRoot (node_modules/@testing-library/react/dist/pure.js:190:26)
      at render (node_modules/@testing-library/react/dist/pure.js:292:10)
      at Object.<anonymous> (tests/__tests__/monaco-json-editor.test.tsx:324:13)

  console.error
    Failed to format JSON: TypeError: Converting circular structure to JSON
        --> starting at object with constructor 'Object'
        --- property 'self' closes the circle
        at JSON.stringify (<anonymous>)
        at formatJson (/Users/tanghehui/ExploreProject/pptxtojson/components/MonacoJsonEditor.tsx:54:19)
        at MonacoJsonEditor (/Users/tanghehui/ExploreProject/pptxtojson/components/MonacoJsonEditor.tsx:364:18)
        at renderWithHooks (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:15486:18)
        at updateFunctionComponent (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:19617:20)
        at beginWork (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:21640:16)
        at HTMLUnknownElement.callCallback (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:4164:14)
        at HTMLUnknownElement.callTheUserObjectsOperation (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
        at innerInvokeEventListeners (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:350:25)
        at invokeEventListeners (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
        at HTMLUnknownElementImpl._dispatch (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
        at HTMLUnknownElementImpl.dispatchEvent (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
        at HTMLUnknownElement.dispatchEvent (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
        at Object.invokeGuardedCallbackDev (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:4213:16)
        at invokeGuardedCallback (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:4277:31)
        at beginWork$1 (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:27490:7)
        at performUnitOfWork (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:26599:12)
        at workLoopSync (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:26505:5)
        at renderRootSync (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:26473:7)
        at performConcurrentWorkOnRoot (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:25777:74)
        at flushActQueue (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react/cjs/react.development.js:2667:24)
        at act (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react/cjs/react.development.js:2582:11)
        at /Users/tanghehui/ExploreProject/pptxtojson/node_modules/@testing-library/react/dist/act-compat.js:47:25
        at renderRoot (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/@testing-library/react/dist/pure.js:190:26)
        at render (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/@testing-library/react/dist/pure.js:292:10)
        at Object.<anonymous> (/Users/tanghehui/ExploreProject/pptxtojson/tests/__tests__/monaco-json-editor.test.tsx:324:13)
        at Promise.finally.completed (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1559:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1499:10)
        at _callCircusTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1009:40)
        at _runTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:949:3)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:839:13)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
        at run (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:757:3)
        at runAndTransformResultsToJestFormat (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1920:21)
        at jestAdapter (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/runner.js:101:19)
        at runTestInternal (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:272:16)
        at runTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:340:7)
        at Object.worker (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:494:12)

      54 |       return JSON.stringify(jsonData, null, 2);
      55 |     } catch (error) {
    > 56 |       console.error('Failed to format JSON:', error);
         |               ^
      57 |       return 'Error: Invalid JSON data';
      58 |     }
      59 |   };

      at formatJson (components/MonacoJsonEditor.tsx:56:15)
      at MonacoJsonEditor (components/MonacoJsonEditor.tsx:364:18)
      at renderWithHooks (node_modules/react-dom/cjs/react-dom.development.js:15486:18)
      at updateFunctionComponent (node_modules/react-dom/cjs/react-dom.development.js:19617:20)
      at beginWork (node_modules/react-dom/cjs/react-dom.development.js:21640:16)
      at HTMLUnknownElement.callCallback (node_modules/react-dom/cjs/react-dom.development.js:4164:14)
      at HTMLUnknownElement.callTheUserObjectsOperation (node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
      at innerInvokeEventListeners (node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:350:25)
      at invokeEventListeners (node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
      at HTMLUnknownElementImpl._dispatch (node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
      at HTMLUnknownElementImpl.dispatchEvent (node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
      at HTMLUnknownElement.dispatchEvent (node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
      at Object.invokeGuardedCallbackDev (node_modules/react-dom/cjs/react-dom.development.js:4213:16)
      at invokeGuardedCallback (node_modules/react-dom/cjs/react-dom.development.js:4277:31)
      at beginWork$1 (node_modules/react-dom/cjs/react-dom.development.js:27490:7)
      at performUnitOfWork (node_modules/react-dom/cjs/react-dom.development.js:26599:12)
      at workLoopSync (node_modules/react-dom/cjs/react-dom.development.js:26505:5)
      at renderRootSync (node_modules/react-dom/cjs/react-dom.development.js:26473:7)
      at performConcurrentWorkOnRoot (node_modules/react-dom/cjs/react-dom.development.js:25777:74)
      at flushActQueue (node_modules/react/cjs/react.development.js:2667:24)
      at act (node_modules/react/cjs/react.development.js:2582:11)
      at node_modules/@testing-library/react/dist/act-compat.js:47:25
      at renderRoot (node_modules/@testing-library/react/dist/pure.js:190:26)
      at render (node_modules/@testing-library/react/dist/pure.js:292:10)
      at Object.<anonymous> (tests/__tests__/monaco-json-editor.test.tsx:324:13)

  console.error
    Error: Uncaught [TypeError: Converting circular structure to JSON
        --> starting at object with constructor 'Object'
        --- property 'self' closes the circle]
        at reportException (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:66:24)
        at innerInvokeEventListeners (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:353:9)
        at invokeEventListeners (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
        at HTMLUnknownElementImpl._dispatch (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
        at HTMLUnknownElementImpl.dispatchEvent (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
        at HTMLUnknownElement.dispatchEvent (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
        at Object.invokeGuardedCallbackDev (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:4213:16)
        at invokeGuardedCallback (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:4277:31)
        at beginWork$1 (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:27490:7)
        at performUnitOfWork (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:26599:12)
        at workLoopSync (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:26505:5)
        at renderRootSync (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:26473:7)
        at performConcurrentWorkOnRoot (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:25777:74)
        at flushActQueue (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react/cjs/react.development.js:2667:24)
        at act (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react/cjs/react.development.js:2582:11)
        at /Users/tanghehui/ExploreProject/pptxtojson/node_modules/@testing-library/react/dist/act-compat.js:47:25
        at renderRoot (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/@testing-library/react/dist/pure.js:190:26)
        at render (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/@testing-library/react/dist/pure.js:292:10)
        at Object.<anonymous> (/Users/tanghehui/ExploreProject/pptxtojson/tests/__tests__/monaco-json-editor.test.tsx:324:13)
        at Promise.finally.completed (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1559:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1499:10)
        at _callCircusTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1009:40)
        at _runTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:949:3)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:839:13)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
        at run (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:757:3)
        at runAndTransformResultsToJestFormat (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1920:21)
        at jestAdapter (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/runner.js:101:19)
        at runTestInternal (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:272:16)
        at runTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:340:7)
        at Object.worker (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:494:12) {
      detail: TypeError: Converting circular structure to JSON
          --> starting at object with constructor 'Object'
          --- property 'self' closes the circle
          at JSON.stringify (<anonymous>)
          at MonacoJsonEditor (/Users/tanghehui/ExploreProject/pptxtojson/components/MonacoJsonEditor.tsx:391:26)
          at renderWithHooks (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:15486:18)
          at updateFunctionComponent (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:19617:20)
          at beginWork (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:21640:16)
          at HTMLUnknownElement.callCallback (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:4164:14)
          at HTMLUnknownElement.callTheUserObjectsOperation (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
          at innerInvokeEventListeners (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:350:25)
          at invokeEventListeners (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
          at HTMLUnknownElementImpl._dispatch (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
          at HTMLUnknownElementImpl.dispatchEvent (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
          at HTMLUnknownElement.dispatchEvent (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
          at Object.invokeGuardedCallbackDev (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:4213:16)
          at invokeGuardedCallback (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:4277:31)
          at beginWork$1 (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:27490:7)
          at performUnitOfWork (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:26599:12)
          at workLoopSync (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:26505:5)
          at renderRootSync (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:26473:7)
          at performConcurrentWorkOnRoot (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:25777:74)
          at flushActQueue (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react/cjs/react.development.js:2667:24)
          at act (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react/cjs/react.development.js:2582:11)
          at /Users/tanghehui/ExploreProject/pptxtojson/node_modules/@testing-library/react/dist/act-compat.js:47:25
          at renderRoot (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/@testing-library/react/dist/pure.js:190:26)
          at render (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/@testing-library/react/dist/pure.js:292:10)
          at Object.<anonymous> (/Users/tanghehui/ExploreProject/pptxtojson/tests/__tests__/monaco-json-editor.test.tsx:324:13)
          at Promise.finally.completed (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1559:28)
          at new Promise (<anonymous>)
          at callAsyncCircusFn (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1499:10)
          at _callCircusTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1009:40)
          at _runTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:949:3)
          at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:839:13)
          at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
          at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
          at run (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:757:3)
          at runAndTransformResultsToJestFormat (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1920:21)
          at jestAdapter (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/runner.js:101:19)
          at runTestInternal (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:272:16)
          at runTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:340:7)
          at Object.worker (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:494:12),
      type: 'unhandled exception'
    }

      322 |       circularData.self = circularData;
      323 |       
    > 324 |       render(<MonacoJsonEditor data={circularData} />);
          |             ^
      325 |       
      326 |       await waitFor(() => {
      327 |         const editor = screen.getByTestId('monaco-editor');

      at VirtualConsole.<anonymous> (node_modules/@jest/environment-jsdom-abstract/build/index.js:78:23)
      at reportException (node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:70:28)
      at innerInvokeEventListeners (node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:353:9)
      at invokeEventListeners (node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
      at HTMLUnknownElementImpl._dispatch (node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
      at HTMLUnknownElementImpl.dispatchEvent (node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
      at HTMLUnknownElement.dispatchEvent (node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
      at Object.invokeGuardedCallbackDev (node_modules/react-dom/cjs/react-dom.development.js:4213:16)
      at invokeGuardedCallback (node_modules/react-dom/cjs/react-dom.development.js:4277:31)
      at beginWork$1 (node_modules/react-dom/cjs/react-dom.development.js:27490:7)
      at performUnitOfWork (node_modules/react-dom/cjs/react-dom.development.js:26599:12)
      at workLoopSync (node_modules/react-dom/cjs/react-dom.development.js:26505:5)
      at renderRootSync (node_modules/react-dom/cjs/react-dom.development.js:26473:7)
      at performConcurrentWorkOnRoot (node_modules/react-dom/cjs/react-dom.development.js:25777:74)
      at flushActQueue (node_modules/react/cjs/react.development.js:2667:24)
      at act (node_modules/react/cjs/react.development.js:2582:11)
      at node_modules/@testing-library/react/dist/act-compat.js:47:25
      at renderRoot (node_modules/@testing-library/react/dist/pure.js:190:26)
      at render (node_modules/@testing-library/react/dist/pure.js:292:10)
      at Object.<anonymous> (tests/__tests__/monaco-json-editor.test.tsx:324:13)

  console.error
    Failed to format JSON: TypeError: Converting circular structure to JSON
        --> starting at object with constructor 'Object'
        --- property 'self' closes the circle
        at JSON.stringify (<anonymous>)
        at formatJson (/Users/tanghehui/ExploreProject/pptxtojson/components/MonacoJsonEditor.tsx:54:19)
        at MonacoJsonEditor (/Users/tanghehui/ExploreProject/pptxtojson/components/MonacoJsonEditor.tsx:364:18)
        at renderWithHooks (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:15486:18)
        at updateFunctionComponent (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:19617:20)
        at beginWork (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:21640:16)
        at beginWork$1 (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:27465:14)
        at performUnitOfWork (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:26599:12)
        at workLoopSync (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:26505:5)
        at renderRootSync (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:26473:7)
        at recoverFromConcurrentError (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:25889:20)
        at performConcurrentWorkOnRoot (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:25789:22)
        at flushActQueue (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react/cjs/react.development.js:2667:24)
        at act (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react/cjs/react.development.js:2582:11)
        at /Users/tanghehui/ExploreProject/pptxtojson/node_modules/@testing-library/react/dist/act-compat.js:47:25
        at renderRoot (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/@testing-library/react/dist/pure.js:190:26)
        at render (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/@testing-library/react/dist/pure.js:292:10)
        at Object.<anonymous> (/Users/tanghehui/ExploreProject/pptxtojson/tests/__tests__/monaco-json-editor.test.tsx:324:13)
        at Promise.finally.completed (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1559:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1499:10)
        at _callCircusTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1009:40)
        at _runTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:949:3)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:839:13)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
        at run (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:757:3)
        at runAndTransformResultsToJestFormat (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1920:21)
        at jestAdapter (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/runner.js:101:19)
        at runTestInternal (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:272:16)
        at runTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:340:7)
        at Object.worker (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:494:12)

      54 |       return JSON.stringify(jsonData, null, 2);
      55 |     } catch (error) {
    > 56 |       console.error('Failed to format JSON:', error);
         |               ^
      57 |       return 'Error: Invalid JSON data';
      58 |     }
      59 |   };

      at formatJson (components/MonacoJsonEditor.tsx:56:15)
      at MonacoJsonEditor (components/MonacoJsonEditor.tsx:364:18)
      at renderWithHooks (node_modules/react-dom/cjs/react-dom.development.js:15486:18)
      at updateFunctionComponent (node_modules/react-dom/cjs/react-dom.development.js:19617:20)
      at beginWork (node_modules/react-dom/cjs/react-dom.development.js:21640:16)
      at beginWork$1 (node_modules/react-dom/cjs/react-dom.development.js:27465:14)
      at performUnitOfWork (node_modules/react-dom/cjs/react-dom.development.js:26599:12)
      at workLoopSync (node_modules/react-dom/cjs/react-dom.development.js:26505:5)
      at renderRootSync (node_modules/react-dom/cjs/react-dom.development.js:26473:7)
      at recoverFromConcurrentError (node_modules/react-dom/cjs/react-dom.development.js:25889:20)
      at performConcurrentWorkOnRoot (node_modules/react-dom/cjs/react-dom.development.js:25789:22)
      at flushActQueue (node_modules/react/cjs/react.development.js:2667:24)
      at act (node_modules/react/cjs/react.development.js:2582:11)
      at node_modules/@testing-library/react/dist/act-compat.js:47:25
      at renderRoot (node_modules/@testing-library/react/dist/pure.js:190:26)
      at render (node_modules/@testing-library/react/dist/pure.js:292:10)
      at Object.<anonymous> (tests/__tests__/monaco-json-editor.test.tsx:324:13)

  console.error
    Failed to format JSON: TypeError: Converting circular structure to JSON
        --> starting at object with constructor 'Object'
        --- property 'self' closes the circle
        at JSON.stringify (<anonymous>)
        at formatJson (/Users/tanghehui/ExploreProject/pptxtojson/components/MonacoJsonEditor.tsx:54:19)
        at MonacoJsonEditor (/Users/tanghehui/ExploreProject/pptxtojson/components/MonacoJsonEditor.tsx:364:18)
        at renderWithHooks (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:15486:18)
        at updateFunctionComponent (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:19617:20)
        at beginWork (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:21640:16)
        at HTMLUnknownElement.callCallback (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:4164:14)
        at HTMLUnknownElement.callTheUserObjectsOperation (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
        at innerInvokeEventListeners (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:350:25)
        at invokeEventListeners (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
        at HTMLUnknownElementImpl._dispatch (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
        at HTMLUnknownElementImpl.dispatchEvent (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
        at HTMLUnknownElement.dispatchEvent (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
        at Object.invokeGuardedCallbackDev (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:4213:16)
        at invokeGuardedCallback (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:4277:31)
        at beginWork$1 (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:27490:7)
        at performUnitOfWork (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:26599:12)
        at workLoopSync (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:26505:5)
        at renderRootSync (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:26473:7)
        at recoverFromConcurrentError (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:25889:20)
        at performConcurrentWorkOnRoot (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:25789:22)
        at flushActQueue (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react/cjs/react.development.js:2667:24)
        at act (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react/cjs/react.development.js:2582:11)
        at /Users/tanghehui/ExploreProject/pptxtojson/node_modules/@testing-library/react/dist/act-compat.js:47:25
        at renderRoot (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/@testing-library/react/dist/pure.js:190:26)
        at render (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/@testing-library/react/dist/pure.js:292:10)
        at Object.<anonymous> (/Users/tanghehui/ExploreProject/pptxtojson/tests/__tests__/monaco-json-editor.test.tsx:324:13)
        at Promise.finally.completed (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1559:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1499:10)
        at _callCircusTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1009:40)
        at _runTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:949:3)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:839:13)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
        at run (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:757:3)
        at runAndTransformResultsToJestFormat (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1920:21)
        at jestAdapter (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/runner.js:101:19)
        at runTestInternal (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:272:16)
        at runTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:340:7)
        at Object.worker (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:494:12)

      54 |       return JSON.stringify(jsonData, null, 2);
      55 |     } catch (error) {
    > 56 |       console.error('Failed to format JSON:', error);
         |               ^
      57 |       return 'Error: Invalid JSON data';
      58 |     }
      59 |   };

      at formatJson (components/MonacoJsonEditor.tsx:56:15)
      at MonacoJsonEditor (components/MonacoJsonEditor.tsx:364:18)
      at renderWithHooks (node_modules/react-dom/cjs/react-dom.development.js:15486:18)
      at updateFunctionComponent (node_modules/react-dom/cjs/react-dom.development.js:19617:20)
      at beginWork (node_modules/react-dom/cjs/react-dom.development.js:21640:16)
      at HTMLUnknownElement.callCallback (node_modules/react-dom/cjs/react-dom.development.js:4164:14)
      at HTMLUnknownElement.callTheUserObjectsOperation (node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
      at innerInvokeEventListeners (node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:350:25)
      at invokeEventListeners (node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
      at HTMLUnknownElementImpl._dispatch (node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
      at HTMLUnknownElementImpl.dispatchEvent (node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
      at HTMLUnknownElement.dispatchEvent (node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
      at Object.invokeGuardedCallbackDev (node_modules/react-dom/cjs/react-dom.development.js:4213:16)
      at invokeGuardedCallback (node_modules/react-dom/cjs/react-dom.development.js:4277:31)
      at beginWork$1 (node_modules/react-dom/cjs/react-dom.development.js:27490:7)
      at performUnitOfWork (node_modules/react-dom/cjs/react-dom.development.js:26599:12)
      at workLoopSync (node_modules/react-dom/cjs/react-dom.development.js:26505:5)
      at renderRootSync (node_modules/react-dom/cjs/react-dom.development.js:26473:7)
      at recoverFromConcurrentError (node_modules/react-dom/cjs/react-dom.development.js:25889:20)
      at performConcurrentWorkOnRoot (node_modules/react-dom/cjs/react-dom.development.js:25789:22)
      at flushActQueue (node_modules/react/cjs/react.development.js:2667:24)
      at act (node_modules/react/cjs/react.development.js:2582:11)
      at node_modules/@testing-library/react/dist/act-compat.js:47:25
      at renderRoot (node_modules/@testing-library/react/dist/pure.js:190:26)
      at render (node_modules/@testing-library/react/dist/pure.js:292:10)
      at Object.<anonymous> (tests/__tests__/monaco-json-editor.test.tsx:324:13)

  console.error
    Error: Uncaught [TypeError: Converting circular structure to JSON
        --> starting at object with constructor 'Object'
        --- property 'self' closes the circle]
        at reportException (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:66:24)
        at innerInvokeEventListeners (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:353:9)
        at invokeEventListeners (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
        at HTMLUnknownElementImpl._dispatch (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
        at HTMLUnknownElementImpl.dispatchEvent (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
        at HTMLUnknownElement.dispatchEvent (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
        at Object.invokeGuardedCallbackDev (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:4213:16)
        at invokeGuardedCallback (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:4277:31)
        at beginWork$1 (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:27490:7)
        at performUnitOfWork (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:26599:12)
        at workLoopSync (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:26505:5)
        at renderRootSync (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:26473:7)
        at recoverFromConcurrentError (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:25889:20)
        at performConcurrentWorkOnRoot (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:25789:22)
        at flushActQueue (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react/cjs/react.development.js:2667:24)
        at act (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react/cjs/react.development.js:2582:11)
        at /Users/tanghehui/ExploreProject/pptxtojson/node_modules/@testing-library/react/dist/act-compat.js:47:25
        at renderRoot (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/@testing-library/react/dist/pure.js:190:26)
        at render (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/@testing-library/react/dist/pure.js:292:10)
        at Object.<anonymous> (/Users/tanghehui/ExploreProject/pptxtojson/tests/__tests__/monaco-json-editor.test.tsx:324:13)
        at Promise.finally.completed (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1559:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1499:10)
        at _callCircusTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1009:40)
        at _runTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:949:3)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:839:13)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
        at run (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:757:3)
        at runAndTransformResultsToJestFormat (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1920:21)
        at jestAdapter (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/runner.js:101:19)
        at runTestInternal (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:272:16)
        at runTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:340:7)
        at Object.worker (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:494:12) {
      detail: TypeError: Converting circular structure to JSON
          --> starting at object with constructor 'Object'
          --- property 'self' closes the circle
          at JSON.stringify (<anonymous>)
          at MonacoJsonEditor (/Users/tanghehui/ExploreProject/pptxtojson/components/MonacoJsonEditor.tsx:391:26)
          at renderWithHooks (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:15486:18)
          at updateFunctionComponent (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:19617:20)
          at beginWork (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:21640:16)
          at HTMLUnknownElement.callCallback (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:4164:14)
          at HTMLUnknownElement.callTheUserObjectsOperation (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
          at innerInvokeEventListeners (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:350:25)
          at invokeEventListeners (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
          at HTMLUnknownElementImpl._dispatch (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
          at HTMLUnknownElementImpl.dispatchEvent (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
          at HTMLUnknownElement.dispatchEvent (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
          at Object.invokeGuardedCallbackDev (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:4213:16)
          at invokeGuardedCallback (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:4277:31)
          at beginWork$1 (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:27490:7)
          at performUnitOfWork (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:26599:12)
          at workLoopSync (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:26505:5)
          at renderRootSync (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:26473:7)
          at recoverFromConcurrentError (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:25889:20)
          at performConcurrentWorkOnRoot (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:25789:22)
          at flushActQueue (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react/cjs/react.development.js:2667:24)
          at act (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react/cjs/react.development.js:2582:11)
          at /Users/tanghehui/ExploreProject/pptxtojson/node_modules/@testing-library/react/dist/act-compat.js:47:25
          at renderRoot (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/@testing-library/react/dist/pure.js:190:26)
          at render (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/@testing-library/react/dist/pure.js:292:10)
          at Object.<anonymous> (/Users/tanghehui/ExploreProject/pptxtojson/tests/__tests__/monaco-json-editor.test.tsx:324:13)
          at Promise.finally.completed (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1559:28)
          at new Promise (<anonymous>)
          at callAsyncCircusFn (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1499:10)
          at _callCircusTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1009:40)
          at _runTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:949:3)
          at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:839:13)
          at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
          at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
          at run (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:757:3)
          at runAndTransformResultsToJestFormat (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1920:21)
          at jestAdapter (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/runner.js:101:19)
          at runTestInternal (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:272:16)
          at runTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:340:7)
          at Object.worker (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:494:12),
      type: 'unhandled exception'
    }

      322 |       circularData.self = circularData;
      323 |       
    > 324 |       render(<MonacoJsonEditor data={circularData} />);
          |             ^
      325 |       
      326 |       await waitFor(() => {
      327 |         const editor = screen.getByTestId('monaco-editor');

      at VirtualConsole.<anonymous> (node_modules/@jest/environment-jsdom-abstract/build/index.js:78:23)
      at reportException (node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:70:28)
      at innerInvokeEventListeners (node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:353:9)
      at invokeEventListeners (node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
      at HTMLUnknownElementImpl._dispatch (node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
      at HTMLUnknownElementImpl.dispatchEvent (node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
      at HTMLUnknownElement.dispatchEvent (node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
      at Object.invokeGuardedCallbackDev (node_modules/react-dom/cjs/react-dom.development.js:4213:16)
      at invokeGuardedCallback (node_modules/react-dom/cjs/react-dom.development.js:4277:31)
      at beginWork$1 (node_modules/react-dom/cjs/react-dom.development.js:27490:7)
      at performUnitOfWork (node_modules/react-dom/cjs/react-dom.development.js:26599:12)
      at workLoopSync (node_modules/react-dom/cjs/react-dom.development.js:26505:5)
      at renderRootSync (node_modules/react-dom/cjs/react-dom.development.js:26473:7)
      at recoverFromConcurrentError (node_modules/react-dom/cjs/react-dom.development.js:25889:20)
      at performConcurrentWorkOnRoot (node_modules/react-dom/cjs/react-dom.development.js:25789:22)
      at flushActQueue (node_modules/react/cjs/react.development.js:2667:24)
      at act (node_modules/react/cjs/react.development.js:2582:11)
      at node_modules/@testing-library/react/dist/act-compat.js:47:25
      at renderRoot (node_modules/@testing-library/react/dist/pure.js:190:26)
      at render (node_modules/@testing-library/react/dist/pure.js:292:10)
      at Object.<anonymous> (tests/__tests__/monaco-json-editor.test.tsx:324:13)

  console.error
    The above error occurred in the <MonacoJsonEditor> component:
    
        at MonacoJsonEditor (/Users/tanghehui/ExploreProject/pptxtojson/components/MonacoJsonEditor.tsx:36:3)
    
    Consider adding an error boundary to your tree to customize error handling behavior.
    Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.

      322 |       circularData.self = circularData;
      323 |       
    > 324 |       render(<MonacoJsonEditor data={circularData} />);
          |             ^
      325 |       
      326 |       await waitFor(() => {
      327 |         const editor = screen.getByTestId('monaco-editor');

      at logCapturedError (node_modules/react-dom/cjs/react-dom.development.js:18704:23)
      at update.callback (node_modules/react-dom/cjs/react-dom.development.js:18737:5)
      at callCallback (node_modules/react-dom/cjs/react-dom.development.js:15036:12)
      at commitUpdateQueue (node_modules/react-dom/cjs/react-dom.development.js:15057:9)
      at commitLayoutEffectOnFiber (node_modules/react-dom/cjs/react-dom.development.js:23430:13)
      at commitLayoutMountEffects_complete (node_modules/react-dom/cjs/react-dom.development.js:24727:9)
      at commitLayoutEffects_begin (node_modules/react-dom/cjs/react-dom.development.js:24713:7)
      at commitLayoutEffects (node_modules/react-dom/cjs/react-dom.development.js:24651:3)
      at commitRootImpl (node_modules/react-dom/cjs/react-dom.development.js:26862:5)
      at commitRoot (node_modules/react-dom/cjs/react-dom.development.js:26721:5)
      at finishConcurrentRender (node_modules/react-dom/cjs/react-dom.development.js:25931:9)
      at performConcurrentWorkOnRoot (node_modules/react-dom/cjs/react-dom.development.js:25848:7)
      at flushActQueue (node_modules/react/cjs/react.development.js:2667:24)
      at act (node_modules/react/cjs/react.development.js:2582:11)
      at node_modules/@testing-library/react/dist/act-compat.js:47:25
      at renderRoot (node_modules/@testing-library/react/dist/pure.js:190:26)
      at render (node_modules/@testing-library/react/dist/pure.js:292:10)
      at Object.<anonymous> (tests/__tests__/monaco-json-editor.test.tsx:324:13)

  console.log
    Loading JSON from URL: https://example.com/test.json

      at loadJson (components/MonacoJsonLoader.tsx:47:19)

  console.log
    Attempt 1/3 to fetch JSON from CDN

      at fetchWithTimeout (components/MonacoJsonLoader.tsx:53:25)

  console.warn
    Fetch attempt 1 failed: Error: Network error
        at Object.<anonymous> (/Users/tanghehui/ExploreProject/pptxtojson/tests/__tests__/monaco-json-loader.test.tsx:274:39)
        at Promise.finally.completed (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1559:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1499:10)
        at _callCircusTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1009:40)
        at runNextTicks (node:internal/process/task_queues:60:5)
        at listOnTimeout (node:internal/timers:540:9)
        at processTimers (node:internal/timers:514:7)
        at _runTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:949:3)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:839:13)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
        at run (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:757:3)
        at runAndTransformResultsToJestFormat (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1920:21)
        at jestAdapter (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/runner.js:101:19)
        at runTestInternal (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:272:16)
        at runTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:340:7)
        at Object.worker (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:494:12)

      73 |                 return response;
      74 |               } catch (error) {
    > 75 |                 console.warn(`Fetch attempt ${attempt} failed:`, error);
         |                         ^
      76 |                 
      77 |                 if (attempt === retries) {
      78 |                   // 为超时错误提供更详细的信息

      at fetchWithTimeout (components/MonacoJsonLoader.tsx:75:25)
      at loadJson (components/MonacoJsonLoader.tsx:100:28)

  console.log
    Retrying in 1000ms...

      at fetchWithTimeout (components/MonacoJsonLoader.tsx:93:25)

  console.log
    Attempt 2/3 to fetch JSON from CDN

      at fetchWithTimeout (components/MonacoJsonLoader.tsx:53:25)

  console.warn
    Fetch attempt 2 failed: Error [AbortError]: timeout
        at Object.<anonymous> (/Users/tanghehui/ExploreProject/pptxtojson/tests/__tests__/monaco-json-loader.test.tsx:256:28)
        at Promise.finally.completed (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1559:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1499:10)
        at _callCircusTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1009:40)
        at runNextTicks (node:internal/process/task_queues:60:5)
        at listOnTimeout (node:internal/timers:540:9)
        at processTimers (node:internal/timers:514:7)
        at _runTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:949:3)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:839:13)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
        at run (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:757:3)
        at runAndTransformResultsToJestFormat (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1920:21)
        at jestAdapter (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/runner.js:101:19)
        at runTestInternal (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:272:16)
        at runTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:340:7)
        at Object.worker (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:494:12)

      73 |                 return response;
      74 |               } catch (error) {
    > 75 |                 console.warn(`Fetch attempt ${attempt} failed:`, error);
         |                         ^
      76 |                 
      77 |                 if (attempt === retries) {
      78 |                   // 为超时错误提供更详细的信息

      at fetchWithTimeout (components/MonacoJsonLoader.tsx:75:25)
      at loadJson (components/MonacoJsonLoader.tsx:100:28)

  console.log
    Retrying in 2000ms...

      at fetchWithTimeout (components/MonacoJsonLoader.tsx:93:25)

  console.log
    Attempt 3/3 to fetch JSON from CDN

      at fetchWithTimeout (components/MonacoJsonLoader.tsx:53:25)

  console.warn
    Fetch attempt 3 failed: Error [AbortError]: timeout
        at Object.<anonymous> (/Users/tanghehui/ExploreProject/pptxtojson/tests/__tests__/monaco-json-loader.test.tsx:256:28)
        at Promise.finally.completed (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1559:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1499:10)
        at _callCircusTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1009:40)
        at runNextTicks (node:internal/process/task_queues:60:5)
        at listOnTimeout (node:internal/timers:540:9)
        at processTimers (node:internal/timers:514:7)
        at _runTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:949:3)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:839:13)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
        at run (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:757:3)
        at runAndTransformResultsToJestFormat (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1920:21)
        at jestAdapter (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/runner.js:101:19)
        at runTestInternal (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:272:16)
        at runTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:340:7)
        at Object.worker (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:494:12)

      73 |                 return response;
      74 |               } catch (error) {
    > 75 |                 console.warn(`Fetch attempt ${attempt} failed:`, error);
         |                         ^
      76 |                 
      77 |                 if (attempt === retries) {
      78 |                   // 为超时错误提供更详细的信息

      at fetchWithTimeout (components/MonacoJsonLoader.tsx:75:25)
      at loadJson (components/MonacoJsonLoader.tsx:100:28)

  console.error
    Failed to load JSON: Request timeout after 120s. This may be due to:
                        • Large file size (consider using smaller chunks)
                        • Slow network connection
                        • CDN server overload
                        • Network connectivity issues
                        
                        Try refreshing or using a smaller file.

      166 |       } catch (err) {
      167 |         const errorMessage = err instanceof Error ? err.message : String(err);
    > 168 |         console.error("Failed to load JSON:", errorMessage);
          |                 ^
      169 |         setError(`Failed to load JSON: ${errorMessage}`);
      170 |         setLoadedSource(source); // 保存source以便显示重试按钮
      171 |       } finally {

      at loadJson (components/MonacoJsonLoader.tsx:168:17)

  console.log
    Loading JSON from URL: https://example.com/test.json

      at loadJson (components/MonacoJsonLoader.tsx:47:19)

  console.log
    Attempt 1/3 to fetch JSON from CDN

      at fetchWithTimeout (components/MonacoJsonLoader.tsx:53:25)

  console.log
    Loading JSON file: 0.00MB

      at loadJson (components/MonacoJsonLoader.tsx:107:19)

  console.log
    Attempt 2/3 to fetch JSON from CDN

      at fetchWithTimeout (components/MonacoJsonLoader.tsx:53:25)

  console.log
    Loading JSON file: 0.00MB

      at loadJson (components/MonacoJsonLoader.tsx:107:19)

  console.log
    Loading JSON from URL: https://example.com/test.json

      at loadJson (components/MonacoJsonLoader.tsx:47:19)

  console.log
    Attempt 1/3 to fetch JSON from CDN

      at fetchWithTimeout (components/MonacoJsonLoader.tsx:53:25)

  console.log
    Loading JSON file: 0.00MB

      at loadJson (components/MonacoJsonLoader.tsx:107:19)

  console.log
    Loading JSON from URL: https://example.com/test.json

      at loadJson (components/MonacoJsonLoader.tsx:47:19)

  console.log
    Attempt 1/3 to fetch JSON from CDN

      at fetchWithTimeout (components/MonacoJsonLoader.tsx:53:25)

  console.log
    Loading JSON file: 0.00MB

      at loadJson (components/MonacoJsonLoader.tsx:107:19)

  console.log
    Loading JSON from URL: https://example.com/test.json

      at loadJson (components/MonacoJsonLoader.tsx:47:19)

  console.log
    Attempt 1/3 to fetch JSON from CDN

      at fetchWithTimeout (components/MonacoJsonLoader.tsx:53:25)

  console.log
    Loading JSON file: 0.00MB

      at loadJson (components/MonacoJsonLoader.tsx:107:19)

  console.log
    🔄 Manual refresh triggered for CDN URL

      at refreshFromUrl (components/MonacoJsonLoader.tsx:212:15)

  console.log
    Loading JSON from URL: https://example.com/test.json

      at loadJson (components/MonacoJsonLoader.tsx:47:19)

  console.log
    Attempt 1/3 to fetch JSON from CDN

      at fetchWithTimeout (components/MonacoJsonLoader.tsx:53:25)

  console.log
    Loading JSON file: 0.00MB

      at loadJson (components/MonacoJsonLoader.tsx:107:19)

  console.error
    Failed to copy JSON: Error: Clipboard error
        at Object.<anonymous> (/Users/tanghehui/ExploreProject/pptxtojson/tests/__tests__/monaco-json-loader.test.tsx:412:39)
        at Promise.finally.completed (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1559:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1499:10)
        at _callCircusTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1009:40)
        at _runTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:949:3)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:839:13)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
        at run (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:757:3)
        at runAndTransformResultsToJestFormat (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1920:21)
        at jestAdapter (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/runner.js:101:19)
        at runTestInternal (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:272:16)
        at runTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:340:7)
        at Object.worker (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:494:12)

      203 |       alert("JSON copied to clipboard!");
      204 |     } catch (err) {
    > 205 |       console.error("Failed to copy JSON:", err);
          |               ^
      206 |       alert("Failed to copy JSON to clipboard");
      207 |     }
      208 |   };

      at copyToClipboard (components/MonacoJsonLoader.tsx:205:15)

FAIL tests/__tests__/monaco-json-loader.test.tsx (6.956 s)
  MonacoJsonLoader Component
    Basic Rendering
      ✓ renders without source (216 ms)
      ✓ renders with default props (15 ms)
    Data Source Handling
      ✓ loads direct data source (27 ms)
      ✓ handles URL source loading (72 ms)
      ✕ shows loading state during fetch (18 ms)
      ✕ handles fetch errors (1016 ms)
    Large File Handling
      ✕ handles large files with optimized loading (1006 ms)
      ✕ shows progress for large file downloads (1007 ms)
    Retry Mechanism
      ✕ implements retry logic for failed requests (1005 ms)
      ✕ handles timeout errors with detailed message (1005 ms)
      ✕ allows manual retry from error state (1004 ms)
    Header Actions
      ✓ displays source information correctly (10 ms)
      ✓ allows copying URL to clipboard (10 ms)
      ✓ opens URL in new tab (8 ms)
      ✓ handles refresh action (12 ms)
    Copy and Download Actions
      ✓ copies JSON to clipboard (3 ms)
      ✓ handles copy failure gracefully (3 ms)
      ✕ downloads JSON file
    JSON Parsing
      ✕ handles invalid JSON gracefully
      ✕ handles malformed JSON in editor
    Component Updates
      ✕ reloads when source changes
      ✕ handles readonly prop changes
    Error Boundary
      ✕ handles component errors gracefully (3 ms)
      ✕ handles missing clipboard API
    Accessibility
      ✕ disables buttons during loading
      ✕ provides proper button states

  ● MonacoJsonLoader Component › Data Source Handling › shows loading state during fetch

    TestingLibraryElementError: Unable to find an element with the text: Loading JSON.... This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

    Ignored nodes: comments, script, style
    [36m<body>[39m
      [36m<div>[39m
        [36m<div[39m
          [33mclass[39m=[32m"monaco-json-loader"[39m
        [36m>[39m
          [36m<div[39m
            [33mclass[39m=[32m"loader-header"[39m
            [33mstyle[39m=[32m"display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px; padding: 10px; background-color: rgb(245, 245, 245); border-radius: 4px;"[39m
          [36m>[39m
            [36m<div[39m
              [33mclass[39m=[32m"source-info"[39m
            [36m/>[39m
            [36m<div[39m
              [33mclass[39m=[32m"header-actions"[39m
              [33mstyle[39m=[32m"display: flex; gap: 10px;"[39m
            [36m>[39m
              [36m<button[39m
                [33mdisabled[39m=[32m""[39m
                [33mstyle[39m=[32m"padding: 6px 12px; background-color: rgb(255, 152, 0); color: white; border-radius: 4px; cursor: not-allowed; font-size: 12px;"[39m
              [36m>[39m
                [0m📋 Copy[0m
              [36m</button>[39m
              [36m<button[39m
                [33mdisabled[39m=[32m""[39m
                [33mstyle[39m=[32m"padding: 6px 12px; background-color: rgb(76, 175, 80); color: white; border-radius: 4px; cursor: not-allowed; font-size: 12px;"[39m
              [36m>[39m
                [0m💾 Download[0m
              [36m</button>[39m
            [36m</div>[39m
          [36m</div>[39m
          [36m<div[39m
            [33mclass[39m=[32m"loading-indicator"[39m
            [33mstyle[39m=[32m"display: flex; align-items: center; justify-content: center; padding: 40px; background-color: rgb(249, 249, 249); border: 1px solid rgb(221, 221, 221); border-radius: 4px; margin-bottom: 10px;"[39m
          [36m>[39m
            [36m<div[39m
              [33mclass[39m=[32m"spinner"[39m
              [33mstyle[39m=[32m"width: 20px; height: 20px; border: 2px solid rgb(204, 204, 204); border-top: 2px solid rgb(33, 150, 243); border-radius: 50%; animation: spin 1s linear infinite; margin-right: 10px;"[39m
            [36m/>[39m
            [0mDownloading... (Attempt 1/3)[0m
          [36m</div>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      144 |       render(<MonacoJsonLoader source={source} />);
      145 |       
    > 146 |       expect(screen.getByText('Loading JSON...')).toBeInTheDocument();
          |                     ^
      147 |       
      148 |       // Resolve the promise
      149 |       resolvePromise!({

      at Object.getElementError (node_modules/@testing-library/dom/dist/config.js:37:19)
      at node_modules/@testing-library/dom/dist/query-helpers.js:76:38
      at node_modules/@testing-library/dom/dist/query-helpers.js:52:17
      at node_modules/@testing-library/dom/dist/query-helpers.js:95:19
      at Object.<anonymous> (tests/__tests__/monaco-json-loader.test.tsx:146:21)

  ● MonacoJsonLoader Component › Data Source Handling › handles fetch errors

    Unable to find an element with the text: ❌ Loading Error. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

    Ignored nodes: comments, script, style
    [36m<body>[39m
      [36m<div>[39m
        [36m<div[39m
          [33mclass[39m=[32m"monaco-json-loader"[39m
        [36m>[39m
          [36m<div[39m
            [33mclass[39m=[32m"loader-header"[39m
            [33mstyle[39m=[32m"display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px; padding: 10px; background-color: rgb(245, 245, 245); border-radius: 4px;"[39m
          [36m>[39m
            [36m<div[39m
              [33mclass[39m=[32m"source-info"[39m
            [36m/>[39m
            [36m<div[39m
              [33mclass[39m=[32m"header-actions"[39m
              [33mstyle[39m=[32m"display: flex; gap: 10px;"[39m
            [36m>[39m
              [36m<button[39m
                [33mdisabled[39m=[32m""[39m
                [33mstyle[39m=[32m"padding: 6px 12px; background-color: rgb(255, 152, 0); color: white; border-radius: 4px; cursor: not-allowed; font-size: 12px;"[39m
              [36m>[39m
                [0m📋 Copy[0m
              [36m</button>[39m
              [36m<button[39m
                [33mdisabled[39m=[32m""[39m
                [33mstyle[39m=[32m"padding: 6px 12px; background-color: rgb(76, 175, 80); color: white; border-radius: 4px; cursor: not-allowed; font-size: 12px;"[39m
              [36m>[39m
                [0m💾 Download[0m
              [36m</button>[39m
            [36m</div>[39m
          [36m</div>[39m
          [36m<div[39m
            [33mclass[39m=[32m"loading-indicator"[39m
            [33mstyle[39m=[32m"display: flex; align-items: center; justify-content: center; padding: 40px; background-color: rgb(249, 249, 249); border: 1px solid rgb(221, 221, 221); border-radius: 4px; margin-bottom: 10px;"[39m
          [36m>[39m
            [36m<div[39m
              [33mclass[39m=[32m"spinner"[39m
              [33mstyle[39m=[32m"width: 20px; height: 20px; border: 2px solid rgb(204, 204, 204); border-top: 2px solid rgb(33, 150, 243); border-radius: 50%; animation: spin 1s linear infinite; margin-right: 10px;"[39m
            [36m/>[39m
            [0mDownloading... (Attempt 1/3)[0m
          [36m</div>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      168 |       render(<MonacoJsonLoader source={source} />);
      169 |       
    > 170 |       await waitFor(() => {
          |                    ^
      171 |         expect(screen.getByText('❌ Loading Error')).toBeInTheDocument();
      172 |         expect(screen.getByText(/Network error/)).toBeInTheDocument();
      173 |         expect(screen.getByText('🔄 Retry Loading')).toBeInTheDocument();

      at waitForWrapper (node_modules/@testing-library/dom/dist/wait-for.js:163:27)
      at Object.<anonymous> (tests/__tests__/monaco-json-loader.test.tsx:170:20)

  ● MonacoJsonLoader Component › Large File Handling › handles large files with optimized loading

    Unable to find an element with the text: /Processing.*MB file/. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

    Ignored nodes: comments, script, style
    [36m<body>[39m
      [36m<div>[39m
        [36m<div[39m
          [33mclass[39m=[32m"monaco-json-loader"[39m
        [36m>[39m
          [36m<div[39m
            [33mclass[39m=[32m"loader-header"[39m
            [33mstyle[39m=[32m"display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px; padding: 10px; background-color: rgb(245, 245, 245); border-radius: 4px;"[39m
          [36m>[39m
            [36m<div[39m
              [33mclass[39m=[32m"source-info"[39m
            [36m>[39m
              [36m<div[39m
                [33mstyle[39m=[32m"font-size: 14px; color: rgb(102, 102, 102);"[39m
              [36m>[39m
                [36m<div>[39m
                  [36m<strong>[39m
                    [0mSource:[0m
                  [36m</strong>[39m
                  [0m [0m
                  [0mCDN URL[0m
                [36m</div>[39m
                [36m<div[39m
                  [33mstyle[39m=[32m"font-size: 12px; margin-top: 4px; display: flex; align-items: center; gap: 8px;"[39m
                [36m>[39m
                  [36m<strong>[39m
                    [0mURL:[0m
                  [36m</strong>[39m
                  [36m<div[39m
                    [33mstyle[39m=[32m"flex: 1 1 0%; font-family: monospace; font-size: 11px; background-color: rgb(248, 249, 250); border: 1px solid rgb(233, 236, 239); border-radius: 3px; padding: 2px 6px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap; max-width: 300px; cursor: pointer;"[39m
                    [33mtitle[39m=[32m"https://example.com/large-file.json"[39m
                  [36m>[39m
                    [0mhttps://example.com/large-file.json[0m
                  [36m</div>[39m
                  [36m<button[39m
                    [33mstyle[39m=[32m"padding: 2px 6px; background-color: rgb(0, 123, 255); color: white; border-radius: 3px; font-size: 10px; cursor: pointer;"[39m
                  [36m>[39m
                    [0m🔗[0m
                  [36m</button>[39m
                [36m</div>[39m
              [36m</div>[39m
            [36m</div>[39m
            [36m<div[39m
              [33mclass[39m=[32m"header-actions"[39m
              [33mstyle[39m=[32m"display: flex; gap: 10px;"[39m
            [36m>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; background-color: rgb(33, 150, 243); color: white; border-radius: 4px; cursor: pointer; font-size: 12px;"[39m
              [36m>[39m
                [0m🔄 Refresh[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; background-color: rgb(255, 152, 0); color: white; border-radius: 4px; cursor: pointer; font-size: 12px;"[39m
              [36m>[39m
                [0m📋 Copy[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; background-color: rgb(76, 175, 80); color: white; border-radius: 4px; cursor: pointer; font-size: 12px;"[39m
              [36m>[39m
                [0m💾 Download[0m
              [36m</button>[39m
            [36m</div>[39m
          [36m</div>[39m
          [36m<div[39m
            [33mdata-height[39m=[32m"600px"[39m
            [33mdata-readonly[39m=[32m"false"[39m
            [33mdata-testid[39m=[32m"monaco-json-editor"[39m
          [36m>[39m
            [36m<div>[39m
              [0mMonaco JSON Editor[0m
            [36m</div>[39m
            [36m<button>[39m
              [0mCopy[0m
            [36m</button>[39m
            [36m<pre>[39m
              [0m{
      "slides": [
        {
          "id": 1,
          "content": "Test slide"
        }
      ],
      "themeColors": [
        "#FF0000"
      ],
      "size": {
        "width": 1920,
        "height": 1080
      }
    }[0m
            [36m</pre>[39m
          [36m</div>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      192 |       render(<MonacoJsonLoader source={source} />);
      193 |       
    > 194 |       await waitFor(() => {
          |                    ^
      195 |         expect(screen.getByText(/Processing.*MB file/)).toBeInTheDocument();
      196 |       });
      197 |

      at waitForWrapper (node_modules/@testing-library/dom/dist/wait-for.js:163:27)
      at Object.<anonymous> (tests/__tests__/monaco-json-loader.test.tsx:194:20)

  ● MonacoJsonLoader Component › Large File Handling › shows progress for large file downloads

    Unable to find an element with the text: /Processing.*MB file/. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

    Ignored nodes: comments, script, style
    [36m<body>[39m
      [36m<div>[39m
        [36m<div[39m
          [33mclass[39m=[32m"monaco-json-loader"[39m
        [36m>[39m
          [36m<div[39m
            [33mclass[39m=[32m"loader-header"[39m
            [33mstyle[39m=[32m"display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px; padding: 10px; background-color: rgb(245, 245, 245); border-radius: 4px;"[39m
          [36m>[39m
            [36m<div[39m
              [33mclass[39m=[32m"source-info"[39m
            [36m>[39m
              [36m<div[39m
                [33mstyle[39m=[32m"font-size: 14px; color: rgb(102, 102, 102);"[39m
              [36m>[39m
                [36m<div>[39m
                  [36m<strong>[39m
                    [0mSource:[0m
                  [36m</strong>[39m
                  [0m [0m
                  [0mCDN URL[0m
                [36m</div>[39m
                [36m<div[39m
                  [33mstyle[39m=[32m"font-size: 12px; margin-top: 4px; display: flex; align-items: center; gap: 8px;"[39m
                [36m>[39m
                  [36m<strong>[39m
                    [0mURL:[0m
                  [36m</strong>[39m
                  [36m<div[39m
                    [33mstyle[39m=[32m"flex: 1 1 0%; font-family: monospace; font-size: 11px; background-color: rgb(248, 249, 250); border: 1px solid rgb(233, 236, 239); border-radius: 3px; padding: 2px 6px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap; max-width: 300px; cursor: pointer;"[39m
                    [33mtitle[39m=[32m"https://example.com/large-file.json"[39m
                  [36m>[39m
                    [0mhttps://example.com/large-file.json[0m
                  [36m</div>[39m
                  [36m<button[39m
                    [33mstyle[39m=[32m"padding: 2px 6px; background-color: rgb(0, 123, 255); color: white; border-radius: 3px; font-size: 10px; cursor: pointer;"[39m
                  [36m>[39m
                    [0m🔗[0m
                  [36m</button>[39m
                [36m</div>[39m
              [36m</div>[39m
            [36m</div>[39m
            [36m<div[39m
              [33mclass[39m=[32m"header-actions"[39m
              [33mstyle[39m=[32m"display: flex; gap: 10px;"[39m
            [36m>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; background-color: rgb(33, 150, 243); color: white; border-radius: 4px; cursor: pointer; font-size: 12px;"[39m
              [36m>[39m
                [0m🔄 Refresh[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; background-color: rgb(255, 152, 0); color: white; border-radius: 4px; cursor: pointer; font-size: 12px;"[39m
              [36m>[39m
                [0m📋 Copy[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; background-color: rgb(76, 175, 80); color: white; border-radius: 4px; cursor: pointer; font-size: 12px;"[39m
              [36m>[39m
                [0m💾 Download[0m
              [36m</button>[39m
            [36m</div>[39m
          [36m</div>[39m
          [36m<div[39m
            [33mdata-height[39m=[32m"600px"[39m
            [33mdata-readonly[39m=[32m"false"[39m
            [33mdata-testid[39m=[32m"monaco-json-editor"[39m
          [36m>[39m
            [36m<div>[39m
              [0mMonaco JSON Editor[0m
            [36m</div>[39m
            [36m<button>[39m
              [0mCopy[0m
            [36m</button>[39m
            [36m<pre>[39m
              [0m{
      "slides": [
        {
          "id": 1,
          "content": "Test slide"
        }
      ],
      "themeColors": [
        "#FF0000"
      ],
      "size": {
        "width": 1920,
        "height": 1080
      }
    }[0m
            [36m</pre>[39m
          [36m</div>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      216 |       render(<MonacoJsonLoader source={source} />);
      217 |       
    > 218 |       await waitFor(() => {
          |                    ^
      219 |         expect(screen.getByText(/Processing.*MB file/)).toBeInTheDocument();
      220 |       });
      221 |     });

      at waitForWrapper (node_modules/@testing-library/dom/dist/wait-for.js:163:27)
      at Object.<anonymous> (tests/__tests__/monaco-json-loader.test.tsx:218:20)

  ● MonacoJsonLoader Component › Retry Mechanism › implements retry logic for failed requests

    Unable to find an element by: [data-testid="monaco-json-editor"]

    Ignored nodes: comments, script, style
    [36m<body>[39m
      [36m<div>[39m
        [36m<div[39m
          [33mclass[39m=[32m"monaco-json-loader"[39m
        [36m>[39m
          [36m<div[39m
            [33mclass[39m=[32m"loader-header"[39m
            [33mstyle[39m=[32m"display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px; padding: 10px; background-color: rgb(245, 245, 245); border-radius: 4px;"[39m
          [36m>[39m
            [36m<div[39m
              [33mclass[39m=[32m"source-info"[39m
            [36m/>[39m
            [36m<div[39m
              [33mclass[39m=[32m"header-actions"[39m
              [33mstyle[39m=[32m"display: flex; gap: 10px;"[39m
            [36m>[39m
              [36m<button[39m
                [33mdisabled[39m=[32m""[39m
                [33mstyle[39m=[32m"padding: 6px 12px; background-color: rgb(255, 152, 0); color: white; border-radius: 4px; cursor: not-allowed; font-size: 12px;"[39m
              [36m>[39m
                [0m📋 Copy[0m
              [36m</button>[39m
              [36m<button[39m
                [33mdisabled[39m=[32m""[39m
                [33mstyle[39m=[32m"padding: 6px 12px; background-color: rgb(76, 175, 80); color: white; border-radius: 4px; cursor: not-allowed; font-size: 12px;"[39m
              [36m>[39m
                [0m💾 Download[0m
              [36m</button>[39m
            [36m</div>[39m
          [36m</div>[39m
          [36m<div[39m
            [33mclass[39m=[32m"loading-indicator"[39m
            [33mstyle[39m=[32m"display: flex; align-items: center; justify-content: center; padding: 40px; background-color: rgb(249, 249, 249); border: 1px solid rgb(221, 221, 221); border-radius: 4px; margin-bottom: 10px;"[39m
          [36m>[39m
            [36m<div[39m
              [33mclass[39m=[32m"spinner"[39m
              [33mstyle[39m=[32m"width: 20px; height: 20px; border: 2px solid rgb(204, 204, 204); border-top: 2px solid rgb(33, 150, 243); border-radius: 50%; animation: spin 1s linear infinite; margin-right: 10px;"[39m
            [36m/>[39m
            [0mDownloading... (Attempt 1/3)[0m
          [36m</div>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      240 |       render(<MonacoJsonLoader source={source} />);
      241 |       
    > 242 |       await waitFor(() => {
          |                    ^
      243 |         expect(screen.getByTestId('monaco-json-editor')).toBeInTheDocument();
      244 |       });
      245 |

      at waitForWrapper (node_modules/@testing-library/dom/dist/wait-for.js:163:27)
      at Object.<anonymous> (tests/__tests__/monaco-json-loader.test.tsx:242:20)

  ● MonacoJsonLoader Component › Retry Mechanism › handles timeout errors with detailed message

    Unable to find an element with the text: /Request timeout/. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

    Ignored nodes: comments, script, style
    [36m<body>[39m
      [36m<div>[39m
        [36m<div[39m
          [33mclass[39m=[32m"monaco-json-loader"[39m
        [36m>[39m
          [36m<div[39m
            [33mclass[39m=[32m"loader-header"[39m
            [33mstyle[39m=[32m"display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px; padding: 10px; background-color: rgb(245, 245, 245); border-radius: 4px;"[39m
          [36m>[39m
            [36m<div[39m
              [33mclass[39m=[32m"source-info"[39m
            [36m/>[39m
            [36m<div[39m
              [33mclass[39m=[32m"header-actions"[39m
              [33mstyle[39m=[32m"display: flex; gap: 10px;"[39m
            [36m>[39m
              [36m<button[39m
                [33mdisabled[39m=[32m""[39m
                [33mstyle[39m=[32m"padding: 6px 12px; background-color: rgb(255, 152, 0); color: white; border-radius: 4px; cursor: not-allowed; font-size: 12px;"[39m
              [36m>[39m
                [0m📋 Copy[0m
              [36m</button>[39m
              [36m<button[39m
                [33mdisabled[39m=[32m""[39m
                [33mstyle[39m=[32m"padding: 6px 12px; background-color: rgb(76, 175, 80); color: white; border-radius: 4px; cursor: not-allowed; font-size: 12px;"[39m
              [36m>[39m
                [0m💾 Download[0m
              [36m</button>[39m
            [36m</div>[39m
          [36m</div>[39m
          [36m<div[39m
            [33mclass[39m=[32m"loading-indicator"[39m
            [33mstyle[39m=[32m"display: flex; align-items: center; justify-content: center; padding: 40px; background-color: rgb(249, 249, 249); border: 1px solid rgb(221, 221, 221); border-radius: 4px; margin-bottom: 10px;"[39m
          [36m>[39m
            [36m<div[39m
              [33mclass[39m=[32m"spinner"[39m
              [33mstyle[39m=[32m"width: 20px; height: 20px; border: 2px solid rgb(204, 204, 204); border-top: 2px solid rgb(33, 150, 243); border-radius: 50%; animation: spin 1s linear infinite; margin-right: 10px;"[39m
            [36m/>[39m
            [0mDownloading... (Attempt 1/3)[0m
          [36m</div>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      260 |       render(<MonacoJsonLoader source={source} />);
      261 |       
    > 262 |       await waitFor(() => {
          |                    ^
      263 |         expect(screen.getByText(/Request timeout/)).toBeInTheDocument();
      264 |         expect(screen.getByText(/Large file size/)).toBeInTheDocument();
      265 |       });

      at waitForWrapper (node_modules/@testing-library/dom/dist/wait-for.js:163:27)
      at Object.<anonymous> (tests/__tests__/monaco-json-loader.test.tsx:262:20)

  ● MonacoJsonLoader Component › Retry Mechanism › allows manual retry from error state

    Unable to find an element with the text: 🔄 Retry Loading. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

    Ignored nodes: comments, script, style
    [36m<body>[39m
      [36m<div>[39m
        [36m<div[39m
          [33mclass[39m=[32m"monaco-json-loader"[39m
        [36m>[39m
          [36m<div[39m
            [33mclass[39m=[32m"loader-header"[39m
            [33mstyle[39m=[32m"display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px; padding: 10px; background-color: rgb(245, 245, 245); border-radius: 4px;"[39m
          [36m>[39m
            [36m<div[39m
              [33mclass[39m=[32m"source-info"[39m
            [36m/>[39m
            [36m<div[39m
              [33mclass[39m=[32m"header-actions"[39m
              [33mstyle[39m=[32m"display: flex; gap: 10px;"[39m
            [36m>[39m
              [36m<button[39m
                [33mdisabled[39m=[32m""[39m
                [33mstyle[39m=[32m"padding: 6px 12px; background-color: rgb(255, 152, 0); color: white; border-radius: 4px; cursor: not-allowed; font-size: 12px;"[39m
              [36m>[39m
                [0m📋 Copy[0m
              [36m</button>[39m
              [36m<button[39m
                [33mdisabled[39m=[32m""[39m
                [33mstyle[39m=[32m"padding: 6px 12px; background-color: rgb(76, 175, 80); color: white; border-radius: 4px; cursor: not-allowed; font-size: 12px;"[39m
              [36m>[39m
                [0m💾 Download[0m
              [36m</button>[39m
            [36m</div>[39m
          [36m</div>[39m
          [36m<div[39m
            [33mclass[39m=[32m"loading-indicator"[39m
            [33mstyle[39m=[32m"display: flex; align-items: center; justify-content: center; padding: 40px; background-color: rgb(249, 249, 249); border: 1px solid rgb(221, 221, 221); border-radius: 4px; margin-bottom: 10px;"[39m
          [36m>[39m
            [36m<div[39m
              [33mclass[39m=[32m"spinner"[39m
              [33mstyle[39m=[32m"width: 20px; height: 20px; border: 2px solid rgb(204, 204, 204); border-top: 2px solid rgb(33, 150, 243); border-radius: 50%; animation: spin 1s linear infinite; margin-right: 10px;"[39m
            [36m/>[39m
            [0mDownloading... (Attempt 1/3)[0m
          [36m</div>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      276 |       render(<MonacoJsonLoader source={source} />);
      277 |       
    > 278 |       await waitFor(() => {
          |                    ^
      279 |         expect(screen.getByText('🔄 Retry Loading')).toBeInTheDocument();
      280 |       });
      281 |

      at waitForWrapper (node_modules/@testing-library/dom/dist/wait-for.js:163:27)
      at Object.<anonymous> (tests/__tests__/monaco-json-loader.test.tsx:278:20)

  ● MonacoJsonLoader Component › Copy and Download Actions › downloads JSON file

    createRoot(...): Target container is not a DOM element.

      451 |       });
      452 |
    > 453 |       render(<MonacoJsonLoader source={source} />);
          |             ^
      454 |       
      455 |       await waitFor(() => {
      456 |         const downloadButton = screen.getByText('💾 Download');

      at createRoot (node_modules/react-dom/cjs/react-dom.development.js:29384:11)
      at Object.createRoot$1 [as createRoot] (node_modules/react-dom/cjs/react-dom.development.js:29855:10)
      at Object.exports.createRoot (node_modules/react-dom/client.js:12:16)
      at createConcurrentRoot (node_modules/@testing-library/react/dist/pure.js:147:27)
      at render (node_modules/@testing-library/react/dist/pure.js:266:12)
      at Object.<anonymous> (tests/__tests__/monaco-json-loader.test.tsx:453:13)

  ● MonacoJsonLoader Component › JSON Parsing › handles invalid JSON gracefully

    createRoot(...): Target container is not a DOM element.

      478 |       } as Response);
      479 |
    > 480 |       render(<MonacoJsonLoader source={source} />);
          |             ^
      481 |       
      482 |       await waitFor(() => {
      483 |         expect(screen.getByText(/Invalid JSON/)).toBeInTheDocument();

      at createRoot (node_modules/react-dom/cjs/react-dom.development.js:29384:11)
      at Object.createRoot$1 [as createRoot] (node_modules/react-dom/cjs/react-dom.development.js:29855:10)
      at Object.exports.createRoot (node_modules/react-dom/client.js:12:16)
      at createConcurrentRoot (node_modules/@testing-library/react/dist/pure.js:147:27)
      at render (node_modules/@testing-library/react/dist/pure.js:266:12)
      at Object.<anonymous> (tests/__tests__/monaco-json-loader.test.tsx:480:13)

  ● MonacoJsonLoader Component › JSON Parsing › handles malformed JSON in editor

    createRoot(...): Target container is not a DOM element.

      497 |       } as Response);
      498 |
    > 499 |       render(<MonacoJsonLoader source={source} />);
          |             ^
      500 |       
      501 |       await waitFor(() => {
      502 |         expect(screen.getByTestId('monaco-json-editor')).toBeInTheDocument();

      at createRoot (node_modules/react-dom/cjs/react-dom.development.js:29384:11)
      at Object.createRoot$1 [as createRoot] (node_modules/react-dom/cjs/react-dom.development.js:29855:10)
      at Object.exports.createRoot (node_modules/react-dom/client.js:12:16)
      at createConcurrentRoot (node_modules/@testing-library/react/dist/pure.js:147:27)
      at render (node_modules/@testing-library/react/dist/pure.js:266:12)
      at Object.<anonymous> (tests/__tests__/monaco-json-loader.test.tsx:499:13)

  ● MonacoJsonLoader Component › Component Updates › reloads when source changes

    createRoot(...): Target container is not a DOM element.

      517 |       };
      518 |
    > 519 |       const { rerender } = render(<MonacoJsonLoader source={source1} />);
          |                                  ^
      520 |       
      521 |       await waitFor(() => {
      522 |         expect(screen.getByText(/"slides"/)).toBeInTheDocument();

      at createRoot (node_modules/react-dom/cjs/react-dom.development.js:29384:11)
      at Object.createRoot$1 [as createRoot] (node_modules/react-dom/cjs/react-dom.development.js:29855:10)
      at Object.exports.createRoot (node_modules/react-dom/client.js:12:16)
      at createConcurrentRoot (node_modules/@testing-library/react/dist/pure.js:147:27)
      at render (node_modules/@testing-library/react/dist/pure.js:266:12)
      at Object.<anonymous> (tests/__tests__/monaco-json-loader.test.tsx:519:34)

  ● MonacoJsonLoader Component › Component Updates › handles readonly prop changes

    createRoot(...): Target container is not a DOM element.

      536 |       };
      537 |
    > 538 |       const { rerender } = render(<MonacoJsonLoader source={source} readonly={true} />);
          |                                  ^
      539 |       
      540 |       await waitFor(() => {
      541 |         const editor = screen.getByTestId('monaco-json-editor');

      at createRoot (node_modules/react-dom/cjs/react-dom.development.js:29384:11)
      at Object.createRoot$1 [as createRoot] (node_modules/react-dom/cjs/react-dom.development.js:29855:10)
      at Object.exports.createRoot (node_modules/react-dom/client.js:12:16)
      at createConcurrentRoot (node_modules/@testing-library/react/dist/pure.js:147:27)
      at render (node_modules/@testing-library/react/dist/pure.js:266:12)
      at Object.<anonymous> (tests/__tests__/monaco-json-loader.test.tsx:538:34)

  ● MonacoJsonLoader Component › Error Boundary › handles component errors gracefully

    expect(received).not.toThrow()

    Error name:    "Error"
    Error message: "createRoot(...): Target container is not a DOM element."

          560 |
          561 |       expect(() => {
        > 562 |         render(<MonacoJsonLoader source={source} />);
              |               ^
          563 |       }).not.toThrow();
          564 |     });
          565 |

      at createRoot (node_modules/react-dom/cjs/react-dom.development.js:29384:11)
      at Object.createRoot$1 [as createRoot] (node_modules/react-dom/cjs/react-dom.development.js:29855:10)
      at Object.exports.createRoot (node_modules/react-dom/client.js:12:16)
      at createConcurrentRoot (node_modules/@testing-library/react/dist/pure.js:147:27)
      at render (node_modules/@testing-library/react/dist/pure.js:266:12)
      at tests/__tests__/monaco-json-loader.test.tsx:562:15
      at Object.<anonymous> (node_modules/expect/build/index.js:1824:9)
      at Object.throwingMatcher [as toThrow] (node_modules/expect/build/index.js:2231:93)
      at Object.<anonymous> (tests/__tests__/monaco-json-loader.test.tsx:563:14)
      at Object.<anonymous> (tests/__tests__/monaco-json-loader.test.tsx:563:14)

  ● MonacoJsonLoader Component › Error Boundary › handles missing clipboard API

    createRoot(...): Target container is not a DOM element.

      573 |       };
      574 |
    > 575 |       render(<MonacoJsonLoader source={source} />);
          |             ^
      576 |       
      577 |       await waitFor(() => {
      578 |         const copyButton = screen.getByText('📋 Copy');

      at createRoot (node_modules/react-dom/cjs/react-dom.development.js:29384:11)
      at Object.createRoot$1 [as createRoot] (node_modules/react-dom/cjs/react-dom.development.js:29855:10)
      at Object.exports.createRoot (node_modules/react-dom/client.js:12:16)
      at createConcurrentRoot (node_modules/@testing-library/react/dist/pure.js:147:27)
      at render (node_modules/@testing-library/react/dist/pure.js:266:12)
      at Object.<anonymous> (tests/__tests__/monaco-json-loader.test.tsx:575:13)

  ● MonacoJsonLoader Component › Accessibility › disables buttons during loading

    createRoot(...): Target container is not a DOM element.

      604 |       mockFetch.mockReturnValue(fetchPromise as Promise<Response>);
      605 |
    > 606 |       render(<MonacoJsonLoader source={source} />);
          |             ^
      607 |       
      608 |       expect(screen.getByText('📋 Copy')).toBeDisabled();
      609 |       expect(screen.getByText('💾 Download')).toBeDisabled();

      at createRoot (node_modules/react-dom/cjs/react-dom.development.js:29384:11)
      at Object.createRoot$1 [as createRoot] (node_modules/react-dom/cjs/react-dom.development.js:29855:10)
      at Object.exports.createRoot (node_modules/react-dom/client.js:12:16)
      at createConcurrentRoot (node_modules/@testing-library/react/dist/pure.js:147:27)
      at render (node_modules/@testing-library/react/dist/pure.js:266:12)
      at Object.<anonymous> (tests/__tests__/monaco-json-loader.test.tsx:606:13)

  ● MonacoJsonLoader Component › Accessibility › provides proper button states

    createRoot(...): Target container is not a DOM element.

      617 |       };
      618 |
    > 619 |       render(<MonacoJsonLoader source={source} />);
          |             ^
      620 |       
      621 |       await waitFor(() => {
      622 |         expect(screen.getByText('📋 Copy')).not.toBeDisabled();

      at createRoot (node_modules/react-dom/cjs/react-dom.development.js:29384:11)
      at Object.createRoot$1 [as createRoot] (node_modules/react-dom/cjs/react-dom.development.js:29855:10)
      at Object.exports.createRoot (node_modules/react-dom/client.js:12:16)
      at createConcurrentRoot (node_modules/@testing-library/react/dist/pure.js:147:27)
      at render (node_modules/@testing-library/react/dist/pure.js:266:12)
      at Object.<anonymous> (tests/__tests__/monaco-json-loader.test.tsx:619:13)

  console.log
    Attempt 3/3 to fetch JSON from CDN

      at fetchWithTimeout (components/MonacoJsonLoader.tsx:53:25)

  console.warn
    Fetch attempt 3 failed: Error: Network timeout
        at Object.<anonymous> (/Users/tanghehui/ExploreProject/pptxtojson/tests/__tests__/monaco-json-loader-large-files.test.tsx:153:46)
        at Promise.finally.completed (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1559:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1499:10)
        at _callCircusTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1009:40)
        at _runTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:949:3)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:839:13)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
        at run (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:757:3)
        at runAndTransformResultsToJestFormat (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1920:21)
        at jestAdapter (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/runner.js:101:19)
        at runTestInternal (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:272:16)
        at runTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:340:7)
        at Object.worker (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:494:12)

      73 |                 return response;
      74 |               } catch (error) {
    > 75 |                 console.warn(`Fetch attempt ${attempt} failed:`, error);
         |                         ^
      76 |                 
      77 |                 if (attempt === retries) {
      78 |                   // 为超时错误提供更详细的信息

      at fetchWithTimeout (components/MonacoJsonLoader.tsx:75:25)
      at loadJson (components/MonacoJsonLoader.tsx:100:28)

  console.error
    Failed to load JSON: Request timeout after 120s. This may be due to:
                        • Large file size (consider using smaller chunks)
                        • Slow network connection
                        • CDN server overload
                        • Network connectivity issues
                        
                        Try refreshing or using a smaller file.

      166 |       } catch (err) {
      167 |         const errorMessage = err instanceof Error ? err.message : String(err);
    > 168 |         console.error("Failed to load JSON:", errorMessage);
          |                 ^
      169 |         setError(`Failed to load JSON: ${errorMessage}`);
      170 |         setLoadedSource(source); // 保存source以便显示重试按钮
      171 |       } finally {

      at loadJson (components/MonacoJsonLoader.tsx:168:17)

  console.log
    Loading JSON from URL: https://example.com/test.json

      at loadJson (components/MonacoJsonLoader.tsx:47:19)

  console.log
    Attempt 1/3 to fetch JSON from CDN

      at fetchWithTimeout (components/MonacoJsonLoader.tsx:53:25)

  console.warn
    Fetch attempt 1 failed: Error: Network timeout
        at Object.<anonymous> (/Users/tanghehui/ExploreProject/pptxtojson/tests/__tests__/monaco-json-loader-large-files.test.tsx:153:46)
        at Promise.finally.completed (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1559:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1499:10)
        at _callCircusTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1009:40)
        at _runTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:949:3)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:839:13)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
        at run (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:757:3)
        at runAndTransformResultsToJestFormat (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1920:21)
        at jestAdapter (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/runner.js:101:19)
        at runTestInternal (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:272:16)
        at runTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:340:7)
        at Object.worker (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:494:12)

      73 |                 return response;
      74 |               } catch (error) {
    > 75 |                 console.warn(`Fetch attempt ${attempt} failed:`, error);
         |                         ^
      76 |                 
      77 |                 if (attempt === retries) {
      78 |                   // 为超时错误提供更详细的信息

      at fetchWithTimeout (components/MonacoJsonLoader.tsx:75:25)
      at loadJson (components/MonacoJsonLoader.tsx:100:28)

  console.log
    Retrying in 1000ms...

      at fetchWithTimeout (components/MonacoJsonLoader.tsx:93:25)

  console.log
    Loading JSON from URL: https://example.com/progress-test.json

      at loadJson (components/MonacoJsonLoader.tsx:47:19)

  console.log
    Attempt 1/3 to fetch JSON from CDN

      at fetchWithTimeout (components/MonacoJsonLoader.tsx:53:25)

  console.log
    Loading JSON file: 5.00MB

      at loadJson (components/MonacoJsonLoader.tsx:107:19)

  console.log
    Loading JSON from URL: https://example.com/retry-test.json

      at loadJson (components/MonacoJsonLoader.tsx:47:19)

  console.log
    Attempt 1/3 to fetch JSON from CDN

      at fetchWithTimeout (components/MonacoJsonLoader.tsx:53:25)

  console.warn
    Fetch attempt 1 failed: Error: Network error
        at /Users/tanghehui/ExploreProject/pptxtojson/tests/__tests__/monaco-json-loader-large-files.test.tsx:300:33
        at /Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-mock/build/index.js:305:39
        at /Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-mock/build/index.js:312:13
        at mockConstructor (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-mock/build/index.js:102:19)
        at fetchWithTimeout (/Users/tanghehui/ExploreProject/pptxtojson/components/MonacoJsonLoader.tsx:59:40)
        at loadJson (/Users/tanghehui/ExploreProject/pptxtojson/components/MonacoJsonLoader.tsx:100:34)
        at /Users/tanghehui/ExploreProject/pptxtojson/components/MonacoJsonLoader.tsx:177:5
        at commitHookEffectListMount (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:23189:26)
        at commitPassiveMountOnFiber (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:24970:11)
        at commitPassiveMountEffects_complete (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:24930:9)
        at commitPassiveMountEffects_begin (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:24917:7)
        at commitPassiveMountEffects (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:24905:3)
        at flushPassiveEffectsImpl (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:27078:3)
        at flushPassiveEffects (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:27023:14)
        at /Users/tanghehui/ExploreProject/pptxtojson/node_modules/react-dom/cjs/react-dom.development.js:26808:9
        at flushActQueue (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react/cjs/react.development.js:2667:24)
        at act (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/react/cjs/react.development.js:2582:11)
        at /Users/tanghehui/ExploreProject/pptxtojson/node_modules/@testing-library/react/dist/act-compat.js:47:25
        at renderRoot (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/@testing-library/react/dist/pure.js:190:26)
        at render (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/@testing-library/react/dist/pure.js:292:10)
        at Object.<anonymous> (/Users/tanghehui/ExploreProject/pptxtojson/tests/__tests__/monaco-json-loader-large-files.test.tsx:315:13)
        at Promise.finally.completed (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1559:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1499:10)
        at _callCircusTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1009:40)
        at _runTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:949:3)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:839:13)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
        at run (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:757:3)
        at runAndTransformResultsToJestFormat (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1920:21)
        at jestAdapter (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/runner.js:101:19)
        at runTestInternal (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:272:16)
        at runTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:340:7)
        at Object.worker (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:494:12)

      73 |                 return response;
      74 |               } catch (error) {
    > 75 |                 console.warn(`Fetch attempt ${attempt} failed:`, error);
         |                         ^
      76 |                 
      77 |                 if (attempt === retries) {
      78 |                   // 为超时错误提供更详细的信息

      at fetchWithTimeout (components/MonacoJsonLoader.tsx:75:25)
      at loadJson (components/MonacoJsonLoader.tsx:100:28)

  console.log
    Retrying in 1000ms...

      at fetchWithTimeout (components/MonacoJsonLoader.tsx:93:25)

  console.log
    Attempt 2/3 to fetch JSON from CDN

      at fetchWithTimeout (components/MonacoJsonLoader.tsx:53:25)

  console.warn
    Fetch attempt 2 failed: Error: Network error
        at /Users/tanghehui/ExploreProject/pptxtojson/tests/__tests__/monaco-json-loader-large-files.test.tsx:300:33
        at /Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-mock/build/index.js:305:39
        at /Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-mock/build/index.js:312:13
        at mockConstructor (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-mock/build/index.js:102:19)
        at fetchWithTimeout (/Users/tanghehui/ExploreProject/pptxtojson/components/MonacoJsonLoader.tsx:59:40)
        at loadJson (/Users/tanghehui/ExploreProject/pptxtojson/components/MonacoJsonLoader.tsx:100:28)

      73 |                 return response;
      74 |               } catch (error) {
    > 75 |                 console.warn(`Fetch attempt ${attempt} failed:`, error);
         |                         ^
      76 |                 
      77 |                 if (attempt === retries) {
      78 |                   // 为超时错误提供更详细的信息

      at fetchWithTimeout (components/MonacoJsonLoader.tsx:75:25)
      at loadJson (components/MonacoJsonLoader.tsx:100:28)

  console.log
    Retrying in 2000ms...

      at fetchWithTimeout (components/MonacoJsonLoader.tsx:93:25)

  console.log
    Attempt 2/3 to fetch JSON from CDN

      at fetchWithTimeout (components/MonacoJsonLoader.tsx:53:25)

  console.log
    Loading JSON file: 0.00MB

      at loadJson (components/MonacoJsonLoader.tsx:107:19)

  console.log
    Loading JSON from URL: https://example.com/always-fail.json

      at loadJson (components/MonacoJsonLoader.tsx:47:19)

  console.log
    Attempt 1/3 to fetch JSON from CDN

      at fetchWithTimeout (components/MonacoJsonLoader.tsx:53:25)

  console.warn
    Fetch attempt 1 failed: Error: Persistent network error
        at Object.<anonymous> (/Users/tanghehui/ExploreProject/pptxtojson/tests/__tests__/monaco-json-loader-large-files.test.tsx:326:46)
        at Promise.finally.completed (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1559:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1499:10)
        at _callCircusTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1009:40)
        at runNextTicks (node:internal/process/task_queues:60:5)
        at listOnTimeout (node:internal/timers:540:9)
        at processTimers (node:internal/timers:514:7)
        at _runTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:949:3)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:839:13)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
        at run (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:757:3)
        at runAndTransformResultsToJestFormat (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1920:21)
        at jestAdapter (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/runner.js:101:19)
        at runTestInternal (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:272:16)
        at runTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:340:7)
        at Object.worker (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:494:12)

      73 |                 return response;
      74 |               } catch (error) {
    > 75 |                 console.warn(`Fetch attempt ${attempt} failed:`, error);
         |                         ^
      76 |                 
      77 |                 if (attempt === retries) {
      78 |                   // 为超时错误提供更详细的信息

      at fetchWithTimeout (components/MonacoJsonLoader.tsx:75:25)
      at loadJson (components/MonacoJsonLoader.tsx:100:28)

  console.log
    Retrying in 1000ms...

      at fetchWithTimeout (components/MonacoJsonLoader.tsx:93:25)

  console.log
    Attempt 2/3 to fetch JSON from CDN

      at fetchWithTimeout (components/MonacoJsonLoader.tsx:53:25)

  console.warn
    Fetch attempt 2 failed: Error: Persistent network error
        at Object.<anonymous> (/Users/tanghehui/ExploreProject/pptxtojson/tests/__tests__/monaco-json-loader-large-files.test.tsx:326:46)
        at Promise.finally.completed (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1559:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1499:10)
        at _callCircusTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1009:40)
        at runNextTicks (node:internal/process/task_queues:60:5)
        at listOnTimeout (node:internal/timers:540:9)
        at processTimers (node:internal/timers:514:7)
        at _runTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:949:3)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:839:13)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
        at run (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:757:3)
        at runAndTransformResultsToJestFormat (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1920:21)
        at jestAdapter (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/runner.js:101:19)
        at runTestInternal (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:272:16)
        at runTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:340:7)
        at Object.worker (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:494:12)

      73 |                 return response;
      74 |               } catch (error) {
    > 75 |                 console.warn(`Fetch attempt ${attempt} failed:`, error);
         |                         ^
      76 |                 
      77 |                 if (attempt === retries) {
      78 |                   // 为超时错误提供更详细的信息

      at fetchWithTimeout (components/MonacoJsonLoader.tsx:75:25)
      at loadJson (components/MonacoJsonLoader.tsx:100:28)

  console.log
    Retrying in 2000ms...

      at fetchWithTimeout (components/MonacoJsonLoader.tsx:93:25)

  console.log
    Attempt 3/3 to fetch JSON from CDN

      at fetchWithTimeout (components/MonacoJsonLoader.tsx:53:25)

  console.warn
    Fetch attempt 3 failed: Error: Persistent network error
        at Object.<anonymous> (/Users/tanghehui/ExploreProject/pptxtojson/tests/__tests__/monaco-json-loader-large-files.test.tsx:326:46)
        at Promise.finally.completed (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1559:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1499:10)
        at _callCircusTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1009:40)
        at runNextTicks (node:internal/process/task_queues:60:5)
        at listOnTimeout (node:internal/timers:540:9)
        at processTimers (node:internal/timers:514:7)
        at _runTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:949:3)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:839:13)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
        at run (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:757:3)
        at runAndTransformResultsToJestFormat (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1920:21)
        at jestAdapter (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/runner.js:101:19)
        at runTestInternal (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:272:16)
        at runTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:340:7)
        at Object.worker (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:494:12)

      73 |                 return response;
      74 |               } catch (error) {
    > 75 |                 console.warn(`Fetch attempt ${attempt} failed:`, error);
         |                         ^
      76 |                 
      77 |                 if (attempt === retries) {
      78 |                   // 为超时错误提供更详细的信息

      at fetchWithTimeout (components/MonacoJsonLoader.tsx:75:25)
      at loadJson (components/MonacoJsonLoader.tsx:100:28)

  console.error
    Failed to load JSON: Persistent network error

      166 |       } catch (err) {
      167 |         const errorMessage = err instanceof Error ? err.message : String(err);
    > 168 |         console.error("Failed to load JSON:", errorMessage);
          |                 ^
      169 |         setError(`Failed to load JSON: ${errorMessage}`);
      170 |         setLoadedSource(source); // 保存source以便显示重试按钮
      171 |       } finally {

      at loadJson (components/MonacoJsonLoader.tsx:168:17)

FAIL tests/__tests__/monaco-json-editor.test.tsx (10.922 s)
  MonacoJsonEditor Component
    Basic Rendering
      ✓ renders empty state when no data is provided (81 ms)
      ✕ renders editor with data (1131 ms)
      ✓ shows loading state during client-side initialization (3 ms)
      ✕ renders with default props (1007 ms)
    Props Handling
      ✓ applies custom height prop (7 ms)
      ✕ applies readOnly prop correctly (1011 ms)
      ✕ applies theme prop correctly (1005 ms)
      ✓ handles onCopy callback (6 ms)
    Toolbar Functionality
      ✓ renders all toolbar buttons (6 ms)
      ✓ handles format button click (6 ms)
      ✓ handles search button click (5 ms)
      ✓ handles fold/unfold button clicks (4 ms)
      ✓ shows button hover effects (17 ms)
    Copy Functionality
      ✓ copies JSON to clipboard successfully (6 ms)
      ✓ handles copy failure gracefully (18 ms)
      ✓ shows copying state during copy operation (8 ms)
      ✓ disables copy button during copying (3 ms)
      ✓ does not copy when no data is provided (1 ms)
    JSON Formatting
      ✕ formats JSON data correctly (1003 ms)
      ✕ handles invalid JSON data gracefully (36 ms)
      ✕ formats complex nested data (1005 ms)
    Statistics Footer
      ✓ displays correct statistics (10 ms)
      ✓ handles missing statistics gracefully (6 ms)
      ✓ displays file size information (5 ms)
    Keyboard Shortcuts
      ✕ sets up keyboard shortcuts on mount (1006 ms)
      ✓ includes keyboard shortcut hints in tooltips (12 ms)
    Component Lifecycle
      ✕ updates editor content when data changes (1005 ms)
      ✕ maintains editor configuration across re-renders (1005 ms)
    Error Handling
      ✕ handles editor mount errors gracefully (1005 ms)
      ✓ handles missing editor actions gracefully (5 ms)
    Accessibility
      ✓ has proper heading structure (9 ms)
      ✓ has accessible button labels (4 ms)
      ✕ provides loading feedback for screen readers (3 ms)

  ● MonacoJsonEditor Component › Basic Rendering › renders editor with data

    Unable to find an element by: [data-testid="monaco-editor"]

    Ignored nodes: comments, script, style
    [36m<body>[39m
      [36m<div>[39m
        [36m<div[39m
          [33mstyle[39m=[32m"height: 100%; width: 100%; display: flex; flex-direction: column; background-color: rgb(255, 255, 255); border: 1px solid rgb(225, 229, 233); border-radius: 8px; overflow: hidden;"[39m
        [36m>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"display: flex; align-items: center; justify-content: space-between; padding: 12px 16px; border-bottom: 1px solid rgb(225, 229, 233); background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%); box-shadow: 0 2px 4px rgba(0,0,0,0.05);"[39m
          [36m>[39m
            [36m<h3[39m
              [33mstyle[39m=[32m"font-size: 16px; font-weight: bold; color: rgb(51, 51, 51); margin: 0px; display: flex; align-items: center; gap: 8px;"[39m
            [36m>[39m
              [0m🖥️ Monaco JSON Editor[0m
            [36m</h3>[39m
            [36m<div[39m
              [33mstyle[39m=[32m"display: flex; gap: 8px; align-items: center;"[39m
            [36m>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"格式化 JSON (Ctrl+Shift+I)"[39m
              [36m>[39m
                [0m✨ 格式化[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"搜索 (Ctrl+Shift+F)"[39m
              [36m>[39m
                [0m🔍 搜索[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"折叠所有"[39m
              [36m>[39m
                [0m📁 折叠[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"展开所有"[39m
              [36m>[39m
                [0m📂 展开[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(209, 68, 36); color: white; border: 1px solid transparent; border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"复制 JSON 到剪贴板"[39m
              [36m>[39m
                [0m📋 复制[0m
              [36m</button>[39m
            [36m</div>[39m
          [36m</div>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"flex: 1 1 0%; position: relative;"[39m
          [36m>[39m
            [36m<div[39m
              [33mstyle[39m=[32m"display: flex; align-items: center; justify-content: center; height: 400px; color: rgb(102, 102, 102); font-size: 14px; flex-direction: column; gap: 12px;"[39m
            [36m>[39m
              [36m<div[39m
                [33mstyle[39m=[32m"font-size: 24px;"[39m
              [36m>[39m
                [0m⚡[0m
              [36m</div>[39m
              [36m<div>[39m
                [0m正在加载 Monaco Editor...[0m
              [36m</div>[39m
            [36m</div>[39m
          [36m</div>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"padding: 8px 16px; background-color: rgb(248, 249, 250); border-top: 1px solid rgb(225, 229, 233); font-size: 12px; color: rgb(102, 102, 102); display: flex; gap: 16px; flex-wrap: wrap;"[39m
          [36m>[39m
            [36m<span>[39m
              [36m<strong>[39m
                [0m📊 数据统计:[0m
              [36m</strong>[39m
            [36m</span>[39m
            [36m<span>[39m
              [0m幻灯片: [0m
              [0m1[0m
              [0m 个[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m主题颜色: [0m
              [0m2[0m
              [0m 个[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m尺寸: [0m
              [0m1920 × 1080[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m字符数: [0m
              [0m113[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m大小: [0m
              [0m0.1[0m
              [0m KB[0m
            [36m</span>[39m
          [36m</div>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

       96 |       render(<MonacoJsonEditor data={sampleData} />);
       97 |       
    >  98 |       await waitFor(() => {
          |                    ^
       99 |         expect(screen.getByTestId('monaco-editor')).toBeInTheDocument();
      100 |       });
      101 |     });

      at waitForWrapper (node_modules/@testing-library/dom/dist/wait-for.js:163:27)
      at Object.<anonymous> (tests/__tests__/monaco-json-editor.test.tsx:98:20)

  ● MonacoJsonEditor Component › Basic Rendering › renders with default props

    Unable to find an element by: [data-testid="monaco-editor"]

    Ignored nodes: comments, script, style
    [36m<body>[39m
      [36m<div>[39m
        [36m<div[39m
          [33mstyle[39m=[32m"height: 100%; width: 100%; display: flex; flex-direction: column; background-color: rgb(255, 255, 255); border: 1px solid rgb(225, 229, 233); border-radius: 8px; overflow: hidden;"[39m
        [36m>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"display: flex; align-items: center; justify-content: space-between; padding: 12px 16px; border-bottom: 1px solid rgb(225, 229, 233); background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%); box-shadow: 0 2px 4px rgba(0,0,0,0.05);"[39m
          [36m>[39m
            [36m<h3[39m
              [33mstyle[39m=[32m"font-size: 16px; font-weight: bold; color: rgb(51, 51, 51); margin: 0px; display: flex; align-items: center; gap: 8px;"[39m
            [36m>[39m
              [0m🖥️ Monaco JSON Editor[0m
            [36m</h3>[39m
            [36m<div[39m
              [33mstyle[39m=[32m"display: flex; gap: 8px; align-items: center;"[39m
            [36m>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"格式化 JSON (Ctrl+Shift+I)"[39m
              [36m>[39m
                [0m✨ 格式化[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"搜索 (Ctrl+Shift+F)"[39m
              [36m>[39m
                [0m🔍 搜索[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"折叠所有"[39m
              [36m>[39m
                [0m📁 折叠[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"展开所有"[39m
              [36m>[39m
                [0m📂 展开[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(209, 68, 36); color: white; border: 1px solid transparent; border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"复制 JSON 到剪贴板"[39m
              [36m>[39m
                [0m📋 复制[0m
              [36m</button>[39m
            [36m</div>[39m
          [36m</div>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"flex: 1 1 0%; position: relative;"[39m
          [36m>[39m
            [36m<div[39m
              [33mstyle[39m=[32m"display: flex; align-items: center; justify-content: center; height: 400px; color: rgb(102, 102, 102); font-size: 14px; flex-direction: column; gap: 12px;"[39m
            [36m>[39m
              [36m<div[39m
                [33mstyle[39m=[32m"font-size: 24px;"[39m
              [36m>[39m
                [0m⚡[0m
              [36m</div>[39m
              [36m<div>[39m
                [0m正在加载 Monaco Editor...[0m
              [36m</div>[39m
            [36m</div>[39m
          [36m</div>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"padding: 8px 16px; background-color: rgb(248, 249, 250); border-top: 1px solid rgb(225, 229, 233); font-size: 12px; color: rgb(102, 102, 102); display: flex; gap: 16px; flex-wrap: wrap;"[39m
          [36m>[39m
            [36m<span>[39m
              [36m<strong>[39m
                [0m📊 数据统计:[0m
              [36m</strong>[39m
            [36m</span>[39m
            [36m<span>[39m
              [0m幻灯片: [0m
              [0m1[0m
              [0m 个[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m主题颜色: [0m
              [0m2[0m
              [0m 个[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m尺寸: [0m
              [0m1920 × 1080[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m字符数: [0m
              [0m113[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m大小: [0m
              [0m0.1[0m
              [0m KB[0m
            [36m</span>[39m
          [36m</div>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      116 |       render(<MonacoJsonEditor data={sampleData} />);
      117 |       
    > 118 |       await waitFor(() => {
          |                    ^
      119 |         const editor = screen.getByTestId('monaco-editor');
      120 |         expect(editor).toHaveAttribute('data-readonly', 'true');
      121 |         expect(editor).toHaveAttribute('data-theme', 'vs');

      at waitForWrapper (node_modules/@testing-library/dom/dist/wait-for.js:163:27)
      at Object.<anonymous> (tests/__tests__/monaco-json-editor.test.tsx:118:20)

  ● MonacoJsonEditor Component › Props Handling › applies readOnly prop correctly

    Unable to find an element by: [data-testid="monaco-editor"]

    Ignored nodes: comments, script, style
    [36m<body>[39m
      [36m<div>[39m
        [36m<div[39m
          [33mstyle[39m=[32m"height: 100%; width: 100%; display: flex; flex-direction: column; background-color: rgb(255, 255, 255); border: 1px solid rgb(225, 229, 233); border-radius: 8px; overflow: hidden;"[39m
        [36m>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"display: flex; align-items: center; justify-content: space-between; padding: 12px 16px; border-bottom: 1px solid rgb(225, 229, 233); background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%); box-shadow: 0 2px 4px rgba(0,0,0,0.05);"[39m
          [36m>[39m
            [36m<h3[39m
              [33mstyle[39m=[32m"font-size: 16px; font-weight: bold; color: rgb(51, 51, 51); margin: 0px; display: flex; align-items: center; gap: 8px;"[39m
            [36m>[39m
              [0m🖥️ Monaco JSON Editor[0m
            [36m</h3>[39m
            [36m<div[39m
              [33mstyle[39m=[32m"display: flex; gap: 8px; align-items: center;"[39m
            [36m>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"格式化 JSON (Ctrl+Shift+I)"[39m
              [36m>[39m
                [0m✨ 格式化[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"搜索 (Ctrl+Shift+F)"[39m
              [36m>[39m
                [0m🔍 搜索[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"折叠所有"[39m
              [36m>[39m
                [0m📁 折叠[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"展开所有"[39m
              [36m>[39m
                [0m📂 展开[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(209, 68, 36); color: white; border: 1px solid transparent; border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"复制 JSON 到剪贴板"[39m
              [36m>[39m
                [0m📋 复制[0m
              [36m</button>[39m
            [36m</div>[39m
          [36m</div>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"flex: 1 1 0%; position: relative;"[39m
          [36m>[39m
            [36m<div[39m
              [33mstyle[39m=[32m"display: flex; align-items: center; justify-content: center; height: 400px; color: rgb(102, 102, 102); font-size: 14px; flex-direction: column; gap: 12px;"[39m
            [36m>[39m
              [36m<div[39m
                [33mstyle[39m=[32m"font-size: 24px;"[39m
              [36m>[39m
                [0m⚡[0m
              [36m</div>[39m
              [36m<div>[39m
                [0m正在加载 Monaco Editor...[0m
              [36m</div>[39m
            [36m</div>[39m
          [36m</div>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"padding: 8px 16px; background-color: rgb(248, 249, 250); border-top: 1px solid rgb(225, 229, 233); font-size: 12px; color: rgb(102, 102, 102); display: flex; gap: 16px; flex-wrap: wrap;"[39m
          [36m>[39m
            [36m<span>[39m
              [36m<strong>[39m
                [0m📊 数据统计:[0m
              [36m</strong>[39m
            [36m</span>[39m
            [36m<span>[39m
              [0m幻灯片: [0m
              [0m1[0m
              [0m 个[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m主题颜色: [0m
              [0m2[0m
              [0m 个[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m尺寸: [0m
              [0m1920 × 1080[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m字符数: [0m
              [0m113[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m大小: [0m
              [0m0.1[0m
              [0m KB[0m
            [36m</span>[39m
          [36m</div>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      139 |       render(<MonacoJsonEditor data={sampleData} readOnly={false} />);
      140 |       
    > 141 |       await waitFor(() => {
          |                    ^
      142 |         const editor = screen.getByTestId('monaco-editor');
      143 |         expect(editor).toHaveAttribute('data-readonly', 'false');
      144 |       });

      at waitForWrapper (node_modules/@testing-library/dom/dist/wait-for.js:163:27)
      at Object.<anonymous> (tests/__tests__/monaco-json-editor.test.tsx:141:20)

  ● MonacoJsonEditor Component › Props Handling › applies theme prop correctly

    Unable to find an element by: [data-testid="monaco-editor"]

    Ignored nodes: comments, script, style
    [36m<body>[39m
      [36m<div>[39m
        [36m<div[39m
          [33mstyle[39m=[32m"height: 100%; width: 100%; display: flex; flex-direction: column; background-color: rgb(255, 255, 255); border: 1px solid rgb(225, 229, 233); border-radius: 8px; overflow: hidden;"[39m
        [36m>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"display: flex; align-items: center; justify-content: space-between; padding: 12px 16px; border-bottom: 1px solid rgb(225, 229, 233); background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%); box-shadow: 0 2px 4px rgba(0,0,0,0.05);"[39m
          [36m>[39m
            [36m<h3[39m
              [33mstyle[39m=[32m"font-size: 16px; font-weight: bold; color: rgb(51, 51, 51); margin: 0px; display: flex; align-items: center; gap: 8px;"[39m
            [36m>[39m
              [0m🖥️ Monaco JSON Editor[0m
            [36m</h3>[39m
            [36m<div[39m
              [33mstyle[39m=[32m"display: flex; gap: 8px; align-items: center;"[39m
            [36m>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"格式化 JSON (Ctrl+Shift+I)"[39m
              [36m>[39m
                [0m✨ 格式化[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"搜索 (Ctrl+Shift+F)"[39m
              [36m>[39m
                [0m🔍 搜索[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"折叠所有"[39m
              [36m>[39m
                [0m📁 折叠[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"展开所有"[39m
              [36m>[39m
                [0m📂 展开[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(209, 68, 36); color: white; border: 1px solid transparent; border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"复制 JSON 到剪贴板"[39m
              [36m>[39m
                [0m📋 复制[0m
              [36m</button>[39m
            [36m</div>[39m
          [36m</div>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"flex: 1 1 0%; position: relative;"[39m
          [36m>[39m
            [36m<div[39m
              [33mstyle[39m=[32m"display: flex; align-items: center; justify-content: center; height: 400px; color: rgb(102, 102, 102); font-size: 14px; flex-direction: column; gap: 12px;"[39m
            [36m>[39m
              [36m<div[39m
                [33mstyle[39m=[32m"font-size: 24px;"[39m
              [36m>[39m
                [0m⚡[0m
              [36m</div>[39m
              [36m<div>[39m
                [0m正在加载 Monaco Editor...[0m
              [36m</div>[39m
            [36m</div>[39m
          [36m</div>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"padding: 8px 16px; background-color: rgb(248, 249, 250); border-top: 1px solid rgb(225, 229, 233); font-size: 12px; color: rgb(102, 102, 102); display: flex; gap: 16px; flex-wrap: wrap;"[39m
          [36m>[39m
            [36m<span>[39m
              [36m<strong>[39m
                [0m📊 数据统计:[0m
              [36m</strong>[39m
            [36m</span>[39m
            [36m<span>[39m
              [0m幻灯片: [0m
              [0m1[0m
              [0m 个[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m主题颜色: [0m
              [0m2[0m
              [0m 个[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m尺寸: [0m
              [0m1920 × 1080[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m字符数: [0m
              [0m113[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m大小: [0m
              [0m0.1[0m
              [0m KB[0m
            [36m</span>[39m
          [36m</div>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      148 |       render(<MonacoJsonEditor data={sampleData} theme="dark" />);
      149 |       
    > 150 |       await waitFor(() => {
          |                    ^
      151 |         const editor = screen.getByTestId('monaco-editor');
      152 |         expect(editor).toHaveAttribute('data-theme', 'vs-dark');
      153 |       });

      at waitForWrapper (node_modules/@testing-library/dom/dist/wait-for.js:163:27)
      at Object.<anonymous> (tests/__tests__/monaco-json-editor.test.tsx:150:20)

  ● MonacoJsonEditor Component › JSON Formatting › formats JSON data correctly

    Unable to find an element by: [data-testid="monaco-editor"]

    Ignored nodes: comments, script, style
    [36m<body>[39m
      [36m<div>[39m
        [36m<div[39m
          [33mstyle[39m=[32m"height: 100%; width: 100%; display: flex; flex-direction: column; background-color: rgb(255, 255, 255); border: 1px solid rgb(225, 229, 233); border-radius: 8px; overflow: hidden;"[39m
        [36m>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"display: flex; align-items: center; justify-content: space-between; padding: 12px 16px; border-bottom: 1px solid rgb(225, 229, 233); background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%); box-shadow: 0 2px 4px rgba(0,0,0,0.05);"[39m
          [36m>[39m
            [36m<h3[39m
              [33mstyle[39m=[32m"font-size: 16px; font-weight: bold; color: rgb(51, 51, 51); margin: 0px; display: flex; align-items: center; gap: 8px;"[39m
            [36m>[39m
              [0m🖥️ Monaco JSON Editor[0m
            [36m</h3>[39m
            [36m<div[39m
              [33mstyle[39m=[32m"display: flex; gap: 8px; align-items: center;"[39m
            [36m>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"格式化 JSON (Ctrl+Shift+I)"[39m
              [36m>[39m
                [0m✨ 格式化[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"搜索 (Ctrl+Shift+F)"[39m
              [36m>[39m
                [0m🔍 搜索[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"折叠所有"[39m
              [36m>[39m
                [0m📁 折叠[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"展开所有"[39m
              [36m>[39m
                [0m📂 展开[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(209, 68, 36); color: white; border: 1px solid transparent; border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"复制 JSON 到剪贴板"[39m
              [36m>[39m
                [0m📋 复制[0m
              [36m</button>[39m
            [36m</div>[39m
          [36m</div>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"flex: 1 1 0%; position: relative;"[39m
          [36m>[39m
            [36m<div[39m
              [33mstyle[39m=[32m"display: flex; align-items: center; justify-content: center; height: 400px; color: rgb(102, 102, 102); font-size: 14px; flex-direction: column; gap: 12px;"[39m
            [36m>[39m
              [36m<div[39m
                [33mstyle[39m=[32m"font-size: 24px;"[39m
              [36m>[39m
                [0m⚡[0m
              [36m</div>[39m
              [36m<div>[39m
                [0m正在加载 Monaco Editor...[0m
              [36m</div>[39m
            [36m</div>[39m
          [36m</div>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"padding: 8px 16px; background-color: rgb(248, 249, 250); border-top: 1px solid rgb(225, 229, 233); font-size: 12px; color: rgb(102, 102, 102); display: flex; gap: 16px; flex-wrap: wrap;"[39m
          [36m>[39m
            [36m<span>[39m
              [36m<strong>[39m
                [0m📊 数据统计:[0m
              [36m</strong>[39m
            [36m</span>[39m
            [36m<span>[39m
              [0m幻灯片: [0m
              [0m1[0m
              [0m 个[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m主题颜色: [0m
              [0m2[0m
              [0m 个[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m尺寸: [0m
              [0m1920 × 1080[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m字符数: [0m
              [0m113[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m大小: [0m
              [0m0.1[0m
              [0m KB[0m
            [36m</span>[39m
          [36m</div>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      311 |       render(<MonacoJsonEditor data={sampleData} />);
      312 |       
    > 313 |       await waitFor(() => {
          |                    ^
      314 |         const editor = screen.getByTestId('monaco-editor');
      315 |         const expectedJson = JSON.stringify(sampleData, null, 2);
      316 |         expect(editor).toHaveAttribute('data-value', expectedJson);

      at waitForWrapper (node_modules/@testing-library/dom/dist/wait-for.js:163:27)
      at Object.<anonymous> (tests/__tests__/monaco-json-editor.test.tsx:313:20)

  ● MonacoJsonEditor Component › JSON Formatting › handles invalid JSON data gracefully

    TypeError: Converting circular structure to JSON
        --> starting at object with constructor 'Object'
        --- property 'self' closes the circle
        at JSON.stringify (<anonymous>)

      389 |           尺寸: {data?.size ? `${data.size.width} × ${data.size.height}` : '未知'}
      390 |         </span>
    > 391 |         <span>字符数: {JSON.stringify(data).length.toLocaleString()}</span>
          |                          ^
      392 |         <span>大小: {(JSON.stringify(data).length / 1024).toFixed(1)} KB</span>
      393 |       </div>
      394 |     </div>

      at MonacoJsonEditor (components/MonacoJsonEditor.tsx:391:26)
      at renderWithHooks (node_modules/react-dom/cjs/react-dom.development.js:15486:18)
      at updateFunctionComponent (node_modules/react-dom/cjs/react-dom.development.js:19617:20)
      at beginWork (node_modules/react-dom/cjs/react-dom.development.js:21640:16)
      at beginWork$1 (node_modules/react-dom/cjs/react-dom.development.js:27465:14)
      at performUnitOfWork (node_modules/react-dom/cjs/react-dom.development.js:26599:12)
      at workLoopSync (node_modules/react-dom/cjs/react-dom.development.js:26505:5)
      at renderRootSync (node_modules/react-dom/cjs/react-dom.development.js:26473:7)
      at recoverFromConcurrentError (node_modules/react-dom/cjs/react-dom.development.js:25889:20)
      at performConcurrentWorkOnRoot (node_modules/react-dom/cjs/react-dom.development.js:25789:22)
      at flushActQueue (node_modules/react/cjs/react.development.js:2667:24)
      at act (node_modules/react/cjs/react.development.js:2582:11)
      at node_modules/@testing-library/react/dist/act-compat.js:47:25
      at renderRoot (node_modules/@testing-library/react/dist/pure.js:190:26)
      at render (node_modules/@testing-library/react/dist/pure.js:292:10)
      at Object.<anonymous> (tests/__tests__/monaco-json-editor.test.tsx:324:13)

  ● MonacoJsonEditor Component › JSON Formatting › formats complex nested data

    Unable to find an element by: [data-testid="monaco-editor"]

    Ignored nodes: comments, script, style
    [36m<body>[39m
      [36m<div>[39m
        [36m<div[39m
          [33mstyle[39m=[32m"height: 100%; width: 100%; display: flex; flex-direction: column; background-color: rgb(255, 255, 255); border: 1px solid rgb(225, 229, 233); border-radius: 8px; overflow: hidden;"[39m
        [36m>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"display: flex; align-items: center; justify-content: space-between; padding: 12px 16px; border-bottom: 1px solid rgb(225, 229, 233); background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%); box-shadow: 0 2px 4px rgba(0,0,0,0.05);"[39m
          [36m>[39m
            [36m<h3[39m
              [33mstyle[39m=[32m"font-size: 16px; font-weight: bold; color: rgb(51, 51, 51); margin: 0px; display: flex; align-items: center; gap: 8px;"[39m
            [36m>[39m
              [0m🖥️ Monaco JSON Editor[0m
            [36m</h3>[39m
            [36m<div[39m
              [33mstyle[39m=[32m"display: flex; gap: 8px; align-items: center;"[39m
            [36m>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"格式化 JSON (Ctrl+Shift+I)"[39m
              [36m>[39m
                [0m✨ 格式化[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"搜索 (Ctrl+Shift+F)"[39m
              [36m>[39m
                [0m🔍 搜索[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"折叠所有"[39m
              [36m>[39m
                [0m📁 折叠[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"展开所有"[39m
              [36m>[39m
                [0m📂 展开[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(209, 68, 36); color: white; border: 1px solid transparent; border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"复制 JSON 到剪贴板"[39m
              [36m>[39m
                [0m📋 复制[0m
              [36m</button>[39m
            [36m</div>[39m
          [36m</div>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"flex: 1 1 0%; position: relative;"[39m
          [36m>[39m
            [36m<div[39m
              [33mstyle[39m=[32m"display: flex; align-items: center; justify-content: center; height: 400px; color: rgb(102, 102, 102); font-size: 14px; flex-direction: column; gap: 12px;"[39m
            [36m>[39m
              [36m<div[39m
                [33mstyle[39m=[32m"font-size: 24px;"[39m
              [36m>[39m
                [0m⚡[0m
              [36m</div>[39m
              [36m<div>[39m
                [0m正在加载 Monaco Editor...[0m
              [36m</div>[39m
            [36m</div>[39m
          [36m</div>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"padding: 8px 16px; background-color: rgb(248, 249, 250); border-top: 1px solid rgb(225, 229, 233); font-size: 12px; color: rgb(102, 102, 102); display: flex; gap: 16px; flex-wrap: wrap;"[39m
          [36m>[39m
            [36m<span>[39m
              [36m<strong>[39m
                [0m📊 数据统计:[0m
              [36m</strong>[39m
            [36m</span>[39m
            [36m<span>[39m
              [0m幻灯片: [0m
              [0m0[0m
              [0m 个[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m主题颜色: [0m
              [0m0[0m
              [0m 个[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m尺寸: [0m
              [0m未知[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m字符数: [0m
              [0m80[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m大小: [0m
              [0m0.1[0m
              [0m KB[0m
            [36m</span>[39m
          [36m</div>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      343 |       render(<MonacoJsonEditor data={complexData} />);
      344 |       
    > 345 |       await waitFor(() => {
          |                    ^
      346 |         const editor = screen.getByTestId('monaco-editor');
      347 |         const expectedJson = JSON.stringify(complexData, null, 2);
      348 |         expect(editor).toHaveAttribute('data-value', expectedJson);

      at waitForWrapper (node_modules/@testing-library/dom/dist/wait-for.js:163:27)
      at Object.<anonymous> (tests/__tests__/monaco-json-editor.test.tsx:345:20)

  ● MonacoJsonEditor Component › Keyboard Shortcuts › sets up keyboard shortcuts on mount

    Unable to find an element by: [data-testid="monaco-editor"]

    Ignored nodes: comments, script, style
    [36m<body>[39m
      [36m<div>[39m
        [36m<div[39m
          [33mstyle[39m=[32m"height: 100%; width: 100%; display: flex; flex-direction: column; background-color: rgb(255, 255, 255); border: 1px solid rgb(225, 229, 233); border-radius: 8px; overflow: hidden;"[39m
        [36m>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"display: flex; align-items: center; justify-content: space-between; padding: 12px 16px; border-bottom: 1px solid rgb(225, 229, 233); background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%); box-shadow: 0 2px 4px rgba(0,0,0,0.05);"[39m
          [36m>[39m
            [36m<h3[39m
              [33mstyle[39m=[32m"font-size: 16px; font-weight: bold; color: rgb(51, 51, 51); margin: 0px; display: flex; align-items: center; gap: 8px;"[39m
            [36m>[39m
              [0m🖥️ Monaco JSON Editor[0m
            [36m</h3>[39m
            [36m<div[39m
              [33mstyle[39m=[32m"display: flex; gap: 8px; align-items: center;"[39m
            [36m>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"格式化 JSON (Ctrl+Shift+I)"[39m
              [36m>[39m
                [0m✨ 格式化[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"搜索 (Ctrl+Shift+F)"[39m
              [36m>[39m
                [0m🔍 搜索[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"折叠所有"[39m
              [36m>[39m
                [0m📁 折叠[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"展开所有"[39m
              [36m>[39m
                [0m📂 展开[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(209, 68, 36); color: white; border: 1px solid transparent; border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"复制 JSON 到剪贴板"[39m
              [36m>[39m
                [0m📋 复制[0m
              [36m</button>[39m
            [36m</div>[39m
          [36m</div>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"flex: 1 1 0%; position: relative;"[39m
          [36m>[39m
            [36m<div[39m
              [33mstyle[39m=[32m"display: flex; align-items: center; justify-content: center; height: 400px; color: rgb(102, 102, 102); font-size: 14px; flex-direction: column; gap: 12px;"[39m
            [36m>[39m
              [36m<div[39m
                [33mstyle[39m=[32m"font-size: 24px;"[39m
              [36m>[39m
                [0m⚡[0m
              [36m</div>[39m
              [36m<div>[39m
                [0m正在加载 Monaco Editor...[0m
              [36m</div>[39m
            [36m</div>[39m
          [36m</div>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"padding: 8px 16px; background-color: rgb(248, 249, 250); border-top: 1px solid rgb(225, 229, 233); font-size: 12px; color: rgb(102, 102, 102); display: flex; gap: 16px; flex-wrap: wrap;"[39m
          [36m>[39m
            [36m<span>[39m
              [36m<strong>[39m
                [0m📊 数据统计:[0m
              [36m</strong>[39m
            [36m</span>[39m
            [36m<span>[39m
              [0m幻灯片: [0m
              [0m1[0m
              [0m 个[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m主题颜色: [0m
              [0m2[0m
              [0m 个[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m尺寸: [0m
              [0m1920 × 1080[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m字符数: [0m
              [0m113[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m大小: [0m
              [0m0.1[0m
              [0m KB[0m
            [36m</span>[39m
          [36m</div>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      392 |       render(<MonacoJsonEditor data={sampleData} />);
      393 |       
    > 394 |       await waitFor(() => {
          |                    ^
      395 |         expect(screen.getByTestId('monaco-editor')).toBeInTheDocument();
      396 |         // The Monaco editor mock should have received addCommand calls
      397 |       });

      at waitForWrapper (node_modules/@testing-library/dom/dist/wait-for.js:163:27)
      at Object.<anonymous> (tests/__tests__/monaco-json-editor.test.tsx:394:20)

  ● MonacoJsonEditor Component › Component Lifecycle › updates editor content when data changes

    Unable to find an element by: [data-testid="monaco-editor"]

    Ignored nodes: comments, script, style
    [36m<body>[39m
      [36m<div>[39m
        [36m<div[39m
          [33mstyle[39m=[32m"height: 100%; width: 100%; display: flex; flex-direction: column; background-color: rgb(255, 255, 255); border: 1px solid rgb(225, 229, 233); border-radius: 8px; overflow: hidden;"[39m
        [36m>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"display: flex; align-items: center; justify-content: space-between; padding: 12px 16px; border-bottom: 1px solid rgb(225, 229, 233); background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%); box-shadow: 0 2px 4px rgba(0,0,0,0.05);"[39m
          [36m>[39m
            [36m<h3[39m
              [33mstyle[39m=[32m"font-size: 16px; font-weight: bold; color: rgb(51, 51, 51); margin: 0px; display: flex; align-items: center; gap: 8px;"[39m
            [36m>[39m
              [0m🖥️ Monaco JSON Editor[0m
            [36m</h3>[39m
            [36m<div[39m
              [33mstyle[39m=[32m"display: flex; gap: 8px; align-items: center;"[39m
            [36m>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"格式化 JSON (Ctrl+Shift+I)"[39m
              [36m>[39m
                [0m✨ 格式化[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"搜索 (Ctrl+Shift+F)"[39m
              [36m>[39m
                [0m🔍 搜索[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"折叠所有"[39m
              [36m>[39m
                [0m📁 折叠[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"展开所有"[39m
              [36m>[39m
                [0m📂 展开[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(209, 68, 36); color: white; border: 1px solid transparent; border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"复制 JSON 到剪贴板"[39m
              [36m>[39m
                [0m📋 复制[0m
              [36m</button>[39m
            [36m</div>[39m
          [36m</div>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"flex: 1 1 0%; position: relative;"[39m
          [36m>[39m
            [36m<div[39m
              [33mstyle[39m=[32m"display: flex; align-items: center; justify-content: center; height: 400px; color: rgb(102, 102, 102); font-size: 14px; flex-direction: column; gap: 12px;"[39m
            [36m>[39m
              [36m<div[39m
                [33mstyle[39m=[32m"font-size: 24px;"[39m
              [36m>[39m
                [0m⚡[0m
              [36m</div>[39m
              [36m<div>[39m
                [0m正在加载 Monaco Editor...[0m
              [36m</div>[39m
            [36m</div>[39m
          [36m</div>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"padding: 8px 16px; background-color: rgb(248, 249, 250); border-top: 1px solid rgb(225, 229, 233); font-size: 12px; color: rgb(102, 102, 102); display: flex; gap: 16px; flex-wrap: wrap;"[39m
          [36m>[39m
            [36m<span>[39m
              [36m<strong>[39m
                [0m📊 数据统计:[0m
              [36m</strong>[39m
            [36m</span>[39m
            [36m<span>[39m
              [0m幻灯片: [0m
              [0m1[0m
              [0m 个[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m主题颜色: [0m
              [0m2[0m
              [0m 个[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m尺寸: [0m
              [0m1920 × 1080[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m字符数: [0m
              [0m113[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m大小: [0m
              [0m0.1[0m
              [0m KB[0m
            [36m</span>[39m
          [36m</div>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      415 |       const { rerender } = render(<MonacoJsonEditor data={sampleData} />);
      416 |       
    > 417 |       await waitFor(() => {
          |                    ^
      418 |         expect(screen.getByTestId('monaco-editor')).toBeInTheDocument();
      419 |       });
      420 |       

      at waitForWrapper (node_modules/@testing-library/dom/dist/wait-for.js:163:27)
      at Object.<anonymous> (tests/__tests__/monaco-json-editor.test.tsx:417:20)

  ● MonacoJsonEditor Component › Component Lifecycle › maintains editor configuration across re-renders

    Unable to find an element by: [data-testid="monaco-editor"]

    Ignored nodes: comments, script, style
    [36m<body>[39m
      [36m<div>[39m
        [36m<div[39m
          [33mstyle[39m=[32m"height: 100%; width: 100%; display: flex; flex-direction: column; background-color: rgb(255, 255, 255); border: 1px solid rgb(225, 229, 233); border-radius: 8px; overflow: hidden;"[39m
        [36m>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"display: flex; align-items: center; justify-content: space-between; padding: 12px 16px; border-bottom: 1px solid rgb(225, 229, 233); background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%); box-shadow: 0 2px 4px rgba(0,0,0,0.05);"[39m
          [36m>[39m
            [36m<h3[39m
              [33mstyle[39m=[32m"font-size: 16px; font-weight: bold; color: rgb(51, 51, 51); margin: 0px; display: flex; align-items: center; gap: 8px;"[39m
            [36m>[39m
              [0m🖥️ Monaco JSON Editor[0m
            [36m</h3>[39m
            [36m<div[39m
              [33mstyle[39m=[32m"display: flex; gap: 8px; align-items: center;"[39m
            [36m>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"格式化 JSON (Ctrl+Shift+I)"[39m
              [36m>[39m
                [0m✨ 格式化[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"搜索 (Ctrl+Shift+F)"[39m
              [36m>[39m
                [0m🔍 搜索[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"折叠所有"[39m
              [36m>[39m
                [0m📁 折叠[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"展开所有"[39m
              [36m>[39m
                [0m📂 展开[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(209, 68, 36); color: white; border: 1px solid transparent; border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"复制 JSON 到剪贴板"[39m
              [36m>[39m
                [0m📋 复制[0m
              [36m</button>[39m
            [36m</div>[39m
          [36m</div>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"flex: 1 1 0%; position: relative;"[39m
          [36m>[39m
            [36m<div[39m
              [33mstyle[39m=[32m"display: flex; align-items: center; justify-content: center; height: 400px; color: rgb(102, 102, 102); font-size: 14px; flex-direction: column; gap: 12px;"[39m
            [36m>[39m
              [36m<div[39m
                [33mstyle[39m=[32m"font-size: 24px;"[39m
              [36m>[39m
                [0m⚡[0m
              [36m</div>[39m
              [36m<div>[39m
                [0m正在加载 Monaco Editor...[0m
              [36m</div>[39m
            [36m</div>[39m
          [36m</div>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"padding: 8px 16px; background-color: rgb(248, 249, 250); border-top: 1px solid rgb(225, 229, 233); font-size: 12px; color: rgb(102, 102, 102); display: flex; gap: 16px; flex-wrap: wrap;"[39m
          [36m>[39m
            [36m<span>[39m
              [36m<strong>[39m
                [0m📊 数据统计:[0m
              [36m</strong>[39m
            [36m</span>[39m
            [36m<span>[39m
              [0m幻灯片: [0m
              [0m1[0m
              [0m 个[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m主题颜色: [0m
              [0m2[0m
              [0m 个[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m尺寸: [0m
              [0m1920 × 1080[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m字符数: [0m
              [0m113[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m大小: [0m
              [0m0.1[0m
              [0m KB[0m
            [36m</span>[39m
          [36m</div>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      431 |       const { rerender } = render(<MonacoJsonEditor data={sampleData} readOnly={true} />);
      432 |       
    > 433 |       await waitFor(() => {
          |                    ^
      434 |         const editor = screen.getByTestId('monaco-editor');
      435 |         expect(editor).toHaveAttribute('data-readonly', 'true');
      436 |       });

      at waitForWrapper (node_modules/@testing-library/dom/dist/wait-for.js:163:27)
      at Object.<anonymous> (tests/__tests__/monaco-json-editor.test.tsx:433:20)

  ● MonacoJsonEditor Component › Error Handling › handles editor mount errors gracefully

    Unable to find an element by: [data-testid="monaco-editor"]

    Ignored nodes: comments, script, style
    [36m<body>[39m
      [36m<div>[39m
        [36m<div[39m
          [33mstyle[39m=[32m"height: 100%; width: 100%; display: flex; flex-direction: column; background-color: rgb(255, 255, 255); border: 1px solid rgb(225, 229, 233); border-radius: 8px; overflow: hidden;"[39m
        [36m>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"display: flex; align-items: center; justify-content: space-between; padding: 12px 16px; border-bottom: 1px solid rgb(225, 229, 233); background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%); box-shadow: 0 2px 4px rgba(0,0,0,0.05);"[39m
          [36m>[39m
            [36m<h3[39m
              [33mstyle[39m=[32m"font-size: 16px; font-weight: bold; color: rgb(51, 51, 51); margin: 0px; display: flex; align-items: center; gap: 8px;"[39m
            [36m>[39m
              [0m🖥️ Monaco JSON Editor[0m
            [36m</h3>[39m
            [36m<div[39m
              [33mstyle[39m=[32m"display: flex; gap: 8px; align-items: center;"[39m
            [36m>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"格式化 JSON (Ctrl+Shift+I)"[39m
              [36m>[39m
                [0m✨ 格式化[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"搜索 (Ctrl+Shift+F)"[39m
              [36m>[39m
                [0m🔍 搜索[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"折叠所有"[39m
              [36m>[39m
                [0m📁 折叠[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"展开所有"[39m
              [36m>[39m
                [0m📂 展开[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(209, 68, 36); color: white; border: 1px solid transparent; border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"复制 JSON 到剪贴板"[39m
              [36m>[39m
                [0m📋 复制[0m
              [36m</button>[39m
            [36m</div>[39m
          [36m</div>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"flex: 1 1 0%; position: relative;"[39m
          [36m>[39m
            [36m<div[39m
              [33mstyle[39m=[32m"display: flex; align-items: center; justify-content: center; height: 400px; color: rgb(102, 102, 102); font-size: 14px; flex-direction: column; gap: 12px;"[39m
            [36m>[39m
              [36m<div[39m
                [33mstyle[39m=[32m"font-size: 24px;"[39m
              [36m>[39m
                [0m⚡[0m
              [36m</div>[39m
              [36m<div>[39m
                [0m正在加载 Monaco Editor...[0m
              [36m</div>[39m
            [36m</div>[39m
          [36m</div>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"padding: 8px 16px; background-color: rgb(248, 249, 250); border-top: 1px solid rgb(225, 229, 233); font-size: 12px; color: rgb(102, 102, 102); display: flex; gap: 16px; flex-wrap: wrap;"[39m
          [36m>[39m
            [36m<span>[39m
              [36m<strong>[39m
                [0m📊 数据统计:[0m
              [36m</strong>[39m
            [36m</span>[39m
            [36m<span>[39m
              [0m幻灯片: [0m
              [0m1[0m
              [0m 个[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m主题颜色: [0m
              [0m2[0m
              [0m 个[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m尺寸: [0m
              [0m1920 × 1080[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m字符数: [0m
              [0m113[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m大小: [0m
              [0m0.1[0m
              [0m KB[0m
            [36m</span>[39m
          [36m</div>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      451 |       render(<MonacoJsonEditor data={sampleData} />);
      452 |       
    > 453 |       await waitFor(() => {
          |                    ^
      454 |         expect(screen.getByTestId('monaco-editor')).toBeInTheDocument();
      455 |       });
      456 |       

      at waitForWrapper (node_modules/@testing-library/dom/dist/wait-for.js:163:27)
      at Object.<anonymous> (tests/__tests__/monaco-json-editor.test.tsx:453:20)

  ● MonacoJsonEditor Component › Accessibility › provides loading feedback for screen readers

    TestingLibraryElementError: Unable to find an element with the text: 正在初始化 Monaco Editor.... This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

    Ignored nodes: comments, script, style
    [36m<body>[39m
      [36m<div>[39m
        [36m<div[39m
          [33mstyle[39m=[32m"height: 100%; width: 100%; display: flex; flex-direction: column; background-color: rgb(255, 255, 255); border: 1px solid rgb(225, 229, 233); border-radius: 8px; overflow: hidden;"[39m
        [36m>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"display: flex; align-items: center; justify-content: space-between; padding: 12px 16px; border-bottom: 1px solid rgb(225, 229, 233); background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%); box-shadow: 0 2px 4px rgba(0,0,0,0.05);"[39m
          [36m>[39m
            [36m<h3[39m
              [33mstyle[39m=[32m"font-size: 16px; font-weight: bold; color: rgb(51, 51, 51); margin: 0px; display: flex; align-items: center; gap: 8px;"[39m
            [36m>[39m
              [0m🖥️ Monaco JSON Editor[0m
            [36m</h3>[39m
            [36m<div[39m
              [33mstyle[39m=[32m"display: flex; gap: 8px; align-items: center;"[39m
            [36m>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"格式化 JSON (Ctrl+Shift+I)"[39m
              [36m>[39m
                [0m✨ 格式化[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"搜索 (Ctrl+Shift+F)"[39m
              [36m>[39m
                [0m🔍 搜索[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"折叠所有"[39m
              [36m>[39m
                [0m📁 折叠[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"展开所有"[39m
              [36m>[39m
                [0m📂 展开[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(209, 68, 36); color: white; border: 1px solid transparent; border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"复制 JSON 到剪贴板"[39m
              [36m>[39m
                [0m📋 复制[0m
              [36m</button>[39m
            [36m</div>[39m
          [36m</div>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"flex: 1 1 0%; position: relative;"[39m
          [36m>[39m
            [36m<div[39m
              [33mstyle[39m=[32m"display: flex; align-items: center; justify-content: center; height: 400px; color: rgb(102, 102, 102); font-size: 14px; flex-direction: column; gap: 12px;"[39m
            [36m>[39m
              [36m<div[39m
                [33mstyle[39m=[32m"font-size: 24px;"[39m
              [36m>[39m
                [0m⚡[0m
              [36m</div>[39m
              [36m<div>[39m
                [0m正在加载 Monaco Editor...[0m
              [36m</div>[39m
            [36m</div>[39m
          [36m</div>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"padding: 8px 16px; background-color: rgb(248, 249, 250); border-top: 1px solid rgb(225, 229, 233); font-size: 12px; color: rgb(102, 102, 102); display: flex; gap: 16px; flex-wrap: wrap;"[39m
          [36m>[39m
            [36m<span>[39m
              [36m<strong>[39m
                [0m📊 数据统计:[0m
              [36m</strong>[39m
            [36m</span>[39m
            [36m<span>[39m
              [0m幻灯片: [0m
              [0m1[0m
              [0m 个[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m主题颜色: [0m
              [0m2[0m
              [0m 个[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m尺寸: [0m
              [0m1920 × 1080[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m字符数: [0m
              [0m113[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m大小: [0m
              [0m0.1[0m
              [0m KB[0m
            [36m</span>[39m
          [36m</div>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      491 |       render(<MonacoJsonEditor data={sampleData} />);
      492 |       
    > 493 |       const loadingText = screen.getByText('正在初始化 Monaco Editor...');
          |                                  ^
      494 |       expect(loadingText).toBeInTheDocument();
      495 |     });
      496 |   });

      at Object.getElementError (node_modules/@testing-library/dom/dist/config.js:37:19)
      at node_modules/@testing-library/dom/dist/query-helpers.js:76:38
      at node_modules/@testing-library/dom/dist/query-helpers.js:52:17
      at node_modules/@testing-library/dom/dist/query-helpers.js:95:19
      at Object.<anonymous> (tests/__tests__/monaco-json-editor.test.tsx:493:34)

  console.log
    Attempt 3/3 to fetch JSON from CDN

      at fetchWithTimeout (components/MonacoJsonLoader.tsx:53:25)

  console.warn
    Fetch attempt 3 failed: Error: Persistent network error
        at Object.<anonymous> (/Users/tanghehui/ExploreProject/pptxtojson/tests/__tests__/monaco-json-loader-large-files.test.tsx:326:46)
        at Promise.finally.completed (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1559:28)
        at new Promise (<anonymous>)
        at callAsyncCircusFn (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1499:10)
        at _callCircusTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1009:40)
        at runNextTicks (node:internal/process/task_queues:60:5)
        at listOnTimeout (node:internal/timers:540:9)
        at processTimers (node:internal/timers:514:7)
        at _runTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:949:3)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:839:13)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
        at _runTestsForDescribeBlock (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:829:11)
        at run (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:757:3)
        at runAndTransformResultsToJestFormat (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/jestAdapterInit.js:1920:21)
        at jestAdapter (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-circus/build/runner.js:101:19)
        at runTestInternal (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:272:16)
        at runTest (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:340:7)
        at Object.worker (/Users/tanghehui/ExploreProject/pptxtojson/node_modules/jest-runner/build/testWorker.js:494:12)

      73 |                 return response;
      74 |               } catch (error) {
    > 75 |                 console.warn(`Fetch attempt ${attempt} failed:`, error);
         |                         ^
      76 |                 
      77 |                 if (attempt === retries) {
      78 |                   // 为超时错误提供更详细的信息

      at fetchWithTimeout (components/MonacoJsonLoader.tsx:75:25)
      at loadJson (components/MonacoJsonLoader.tsx:100:28)

  console.error
    Failed to load JSON: Persistent network error

      166 |       } catch (err) {
      167 |         const errorMessage = err instanceof Error ? err.message : String(err);
    > 168 |         console.error("Failed to load JSON:", errorMessage);
          |                 ^
      169 |         setError(`Failed to load JSON: ${errorMessage}`);
      170 |         setLoadedSource(source); // 保存source以便显示重试按钮
      171 |       } finally {

      at loadJson (components/MonacoJsonLoader.tsx:168:17)

PASS tests/__tests__/monaco-json-loader-large-files.test.tsx (10.869 s)
  MonacoJsonLoader Large File Handling
    Large File Optimizations
      ✓ detects large files and uses optimized loading (167 ms)
      ✓ shows detailed progress for large files (22 ms)
      ✓ uses minimized format for large files (43 ms)
    Timeout Handling
      ✓ handles timeouts with detailed error messages (3366 ms)
      ✓ shows retry button for timeout errors (3044 ms)
      ✓ uses 120-second timeout for large files (5 ms)
    Progress Indicators
      ✓ shows different progress messages during loading (32 ms)
      ✓ displays file size information (7 ms)
    Performance Warnings
      ✓ logs performance suggestions for large files (7 ms)
    Retry Mechanism
      ✓ retries failed requests with exponential backoff (1024 ms)
      ✓ fails after maximum retry attempts (3023 ms)

FAIL tests/__tests__/json-viewer.test.tsx (12.719 s)
  JsonViewer Component
    Empty State
      ✓ renders empty state when no data is provided (101 ms)
      ✓ displays correct empty state icon and styling (21 ms)
      ✓ renders header even in empty state (17 ms)
    Data Display
      ✕ renders Monaco Editor when data is provided (1029 ms)
      ✕ passes correct props to Monaco Editor (1005 ms)
      ✕ displays the JSON data in the editor (1004 ms)
    Client-Side Rendering
      ✓ shows initialization message before client-side hydration (2 ms)
      ✕ transitions from loading to loaded state (1004 ms)
    Copy Functionality
      ✕ calls onCopy callback when copy button is clicked (1005 ms)
      ✕ handles missing onCopy callback gracefully (1006 ms)
    Layout and Styling
      ✓ renders with correct container structure (6 ms)
      ✓ renders header with correct styling (5 ms)
      ✓ centers header title (4 ms)
    Dynamic Import Loading
      ✓ shows loading component during dynamic import (2 ms)
    Edge Cases
      ✓ handles undefined data same as null (2 ms)
      ✕ handles empty object data (1002 ms)
      ✕ handles complex nested data (1003 ms)
      ✕ handles data with special characters (1004 ms)
    Component Updates
      ✕ updates when data prop changes (1004 ms)
      ✕ transitions from data to empty state (1003 ms)
      ✕ updates onCopy callback (1010 ms)
    Accessibility
      ✓ has proper heading structure (13 ms)
      ✓ provides descriptive text for empty state (2 ms)

  ● JsonViewer Component › Data Display › renders Monaco Editor when data is provided

    Unable to find an element by: [data-testid="monaco-json-editor"]

    Ignored nodes: comments, script, style
    [36m<body>[39m
      [36m<div>[39m
        [36m<div[39m
          [33mstyle[39m=[32m"height: 100%; width: 100%; display: flex; flex-direction: column; background-color: rgb(255, 255, 255);"[39m
        [36m>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"padding: 12px 16px; border-bottom: 1px solid rgb(225, 229, 233); background-color: rgb(248, 249, 250); display: flex; justify-content: center; align-items: center;"[39m
          [36m>[39m
            [36m<h3[39m
              [33mstyle[39m=[32m"margin: 0px; font-size: 16px; font-weight: bold; color: rgb(51, 51, 51);"[39m
            [36m>[39m
              [0m🖥️ Monaco JSON Editor[0m
            [36m</h3>[39m
          [36m</div>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"flex: 1 1 0%; overflow: hidden;"[39m
          [36m>[39m
            [36m<div[39m
              [33mdata[39m=[32m"[object Object]"[39m
              [33mdata-testid[39m=[32m"monaco-editor-mock"[39m
              [33mheight[39m=[32m"100%"[39m
              [33mreadonly[39m=[32m""[39m
              [33mtheme[39m=[32m"light"[39m
            [36m>[39m
              [0mMonaco Editor Mock[0m
            [36m</div>[39m
          [36m</div>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      81 |       render(<JsonViewer data={sampleData} onCopy={mockOnCopy} />);
      82 |       
    > 83 |       await waitFor(() => {
         |                    ^
      84 |         expect(screen.getByTestId('monaco-json-editor')).toBeInTheDocument();
      85 |       });
      86 |     });

      at waitForWrapper (node_modules/@testing-library/dom/dist/wait-for.js:163:27)
      at Object.<anonymous> (tests/__tests__/json-viewer.test.tsx:83:20)

  ● JsonViewer Component › Data Display › passes correct props to Monaco Editor

    Unable to find an element by: [data-testid="monaco-json-editor"]

    Ignored nodes: comments, script, style
    [36m<body>[39m
      [36m<div>[39m
        [36m<div[39m
          [33mstyle[39m=[32m"height: 100%; width: 100%; display: flex; flex-direction: column; background-color: rgb(255, 255, 255);"[39m
        [36m>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"padding: 12px 16px; border-bottom: 1px solid rgb(225, 229, 233); background-color: rgb(248, 249, 250); display: flex; justify-content: center; align-items: center;"[39m
          [36m>[39m
            [36m<h3[39m
              [33mstyle[39m=[32m"margin: 0px; font-size: 16px; font-weight: bold; color: rgb(51, 51, 51);"[39m
            [36m>[39m
              [0m🖥️ Monaco JSON Editor[0m
            [36m</h3>[39m
          [36m</div>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"flex: 1 1 0%; overflow: hidden;"[39m
          [36m>[39m
            [36m<div[39m
              [33mdata[39m=[32m"[object Object]"[39m
              [33mdata-testid[39m=[32m"monaco-editor-mock"[39m
              [33mheight[39m=[32m"100%"[39m
              [33mreadonly[39m=[32m""[39m
              [33mtheme[39m=[32m"light"[39m
            [36m>[39m
              [0mMonaco Editor Mock[0m
            [36m</div>[39m
          [36m</div>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      89 |       render(<JsonViewer data={sampleData} onCopy={mockOnCopy} />);
      90 |       
    > 91 |       await waitFor(() => {
         |                    ^
      92 |         const editor = screen.getByTestId('monaco-json-editor');
      93 |         expect(editor).toHaveAttribute('data-height', '100%');
      94 |         expect(editor).toHaveAttribute('data-readonly', 'true');

      at waitForWrapper (node_modules/@testing-library/dom/dist/wait-for.js:163:27)
      at Object.<anonymous> (tests/__tests__/json-viewer.test.tsx:91:20)

  ● JsonViewer Component › Data Display › displays the JSON data in the editor

    Unable to find an element with the text: /"slides":/. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

    Ignored nodes: comments, script, style
    [36m<body>[39m
      [36m<div>[39m
        [36m<div[39m
          [33mstyle[39m=[32m"height: 100%; width: 100%; display: flex; flex-direction: column; background-color: rgb(255, 255, 255);"[39m
        [36m>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"padding: 12px 16px; border-bottom: 1px solid rgb(225, 229, 233); background-color: rgb(248, 249, 250); display: flex; justify-content: center; align-items: center;"[39m
          [36m>[39m
            [36m<h3[39m
              [33mstyle[39m=[32m"margin: 0px; font-size: 16px; font-weight: bold; color: rgb(51, 51, 51);"[39m
            [36m>[39m
              [0m🖥️ Monaco JSON Editor[0m
            [36m</h3>[39m
          [36m</div>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"flex: 1 1 0%; overflow: hidden;"[39m
          [36m>[39m
            [36m<div[39m
              [33mdata[39m=[32m"[object Object]"[39m
              [33mdata-testid[39m=[32m"monaco-editor-mock"[39m
              [33mheight[39m=[32m"100%"[39m
              [33mreadonly[39m=[32m""[39m
              [33mtheme[39m=[32m"light"[39m
            [36m>[39m
              [0mMonaco Editor Mock[0m
            [36m</div>[39m
          [36m</div>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      100 |       render(<JsonViewer data={sampleData} onCopy={mockOnCopy} />);
      101 |       
    > 102 |       await waitFor(() => {
          |                    ^
      103 |         const jsonContent = screen.getByText(/"slides":/);
      104 |         expect(jsonContent).toBeInTheDocument();
      105 |       });

      at waitForWrapper (node_modules/@testing-library/dom/dist/wait-for.js:163:27)
      at Object.<anonymous> (tests/__tests__/json-viewer.test.tsx:102:20)

  ● JsonViewer Component › Client-Side Rendering › transitions from loading to loaded state

    Unable to find an element by: [data-testid="monaco-json-editor"]

    Ignored nodes: comments, script, style
    [36m<body>[39m
      [36m<div>[39m
        [36m<div[39m
          [33mstyle[39m=[32m"height: 100%; width: 100%; display: flex; flex-direction: column; background-color: rgb(255, 255, 255);"[39m
        [36m>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"padding: 12px 16px; border-bottom: 1px solid rgb(225, 229, 233); background-color: rgb(248, 249, 250); display: flex; justify-content: center; align-items: center;"[39m
          [36m>[39m
            [36m<h3[39m
              [33mstyle[39m=[32m"margin: 0px; font-size: 16px; font-weight: bold; color: rgb(51, 51, 51);"[39m
            [36m>[39m
              [0m🖥️ Monaco JSON Editor[0m
            [36m</h3>[39m
          [36m</div>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"flex: 1 1 0%; overflow: hidden;"[39m
          [36m>[39m
            [36m<div[39m
              [33mdata[39m=[32m"[object Object]"[39m
              [33mdata-testid[39m=[32m"monaco-editor-mock"[39m
              [33mheight[39m=[32m"100%"[39m
              [33mreadonly[39m=[32m""[39m
              [33mtheme[39m=[32m"light"[39m
            [36m>[39m
              [0mMonaco Editor Mock[0m
            [36m</div>[39m
          [36m</div>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      118 |       
      119 |       // Should show the editor
    > 120 |       await waitFor(() => {
          |                    ^
      121 |         expect(screen.getByTestId('monaco-json-editor')).toBeInTheDocument();
      122 |       });
      123 |     });

      at waitForWrapper (node_modules/@testing-library/dom/dist/wait-for.js:163:27)
      at Object.<anonymous> (tests/__tests__/json-viewer.test.tsx:120:20)

  ● JsonViewer Component › Copy Functionality › calls onCopy callback when copy button is clicked

    Unable to find an element with the text: Copy. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

    Ignored nodes: comments, script, style
    [36m<body>[39m
      [36m<div>[39m
        [36m<div[39m
          [33mstyle[39m=[32m"height: 100%; width: 100%; display: flex; flex-direction: column; background-color: rgb(255, 255, 255);"[39m
        [36m>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"padding: 12px 16px; border-bottom: 1px solid rgb(225, 229, 233); background-color: rgb(248, 249, 250); display: flex; justify-content: center; align-items: center;"[39m
          [36m>[39m
            [36m<h3[39m
              [33mstyle[39m=[32m"margin: 0px; font-size: 16px; font-weight: bold; color: rgb(51, 51, 51);"[39m
            [36m>[39m
              [0m🖥️ Monaco JSON Editor[0m
            [36m</h3>[39m
          [36m</div>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"flex: 1 1 0%; overflow: hidden;"[39m
          [36m>[39m
            [36m<div[39m
              [33mdata[39m=[32m"[object Object]"[39m
              [33mdata-testid[39m=[32m"monaco-editor-mock"[39m
              [33mheight[39m=[32m"100%"[39m
              [33mreadonly[39m=[32m""[39m
              [33mtheme[39m=[32m"light"[39m
            [36m>[39m
              [0mMonaco Editor Mock[0m
            [36m</div>[39m
          [36m</div>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      128 |       render(<JsonViewer data={sampleData} onCopy={mockOnCopy} />);
      129 |       
    > 130 |       await waitFor(() => {
          |                    ^
      131 |         const copyButton = screen.getByText('Copy');
      132 |         copyButton.click();
      133 |       });

      at waitForWrapper (node_modules/@testing-library/dom/dist/wait-for.js:163:27)
      at Object.<anonymous> (tests/__tests__/json-viewer.test.tsx:130:20)

  ● JsonViewer Component › Copy Functionality › handles missing onCopy callback gracefully

    Unable to find an element with the text: Copy. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

    Ignored nodes: comments, script, style
    [36m<body>[39m
      [36m<div>[39m
        [36m<div[39m
          [33mstyle[39m=[32m"height: 100%; width: 100%; display: flex; flex-direction: column; background-color: rgb(255, 255, 255);"[39m
        [36m>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"padding: 12px 16px; border-bottom: 1px solid rgb(225, 229, 233); background-color: rgb(248, 249, 250); display: flex; justify-content: center; align-items: center;"[39m
          [36m>[39m
            [36m<h3[39m
              [33mstyle[39m=[32m"margin: 0px; font-size: 16px; font-weight: bold; color: rgb(51, 51, 51);"[39m
            [36m>[39m
              [0m🖥️ Monaco JSON Editor[0m
            [36m</h3>[39m
          [36m</div>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"flex: 1 1 0%; overflow: hidden;"[39m
          [36m>[39m
            [36m<div[39m
              [33mdata[39m=[32m"[object Object]"[39m
              [33mdata-testid[39m=[32m"monaco-editor-mock"[39m
              [33mheight[39m=[32m"100%"[39m
              [33mreadonly[39m=[32m""[39m
              [33mtheme[39m=[32m"light"[39m
            [36m>[39m
              [0mMonaco Editor Mock[0m
            [36m</div>[39m
          [36m</div>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      139 |       render(<JsonViewer data={sampleData} />);
      140 |       
    > 141 |       await waitFor(() => {
          |                    ^
      142 |         const copyButton = screen.getByText('Copy');
      143 |         expect(() => copyButton.click()).not.toThrow();
      144 |       });

      at waitForWrapper (node_modules/@testing-library/dom/dist/wait-for.js:163:27)
      at Object.<anonymous> (tests/__tests__/json-viewer.test.tsx:141:20)

  ● JsonViewer Component › Edge Cases › handles empty object data

    Unable to find an element by: [data-testid="monaco-json-editor"]

    Ignored nodes: comments, script, style
    [36m<body>[39m
      [36m<div>[39m
        [36m<div[39m
          [33mstyle[39m=[32m"height: 100%; width: 100%; display: flex; flex-direction: column; background-color: rgb(255, 255, 255);"[39m
        [36m>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"padding: 12px 16px; border-bottom: 1px solid rgb(225, 229, 233); background-color: rgb(248, 249, 250); display: flex; justify-content: center; align-items: center;"[39m
          [36m>[39m
            [36m<h3[39m
              [33mstyle[39m=[32m"margin: 0px; font-size: 16px; font-weight: bold; color: rgb(51, 51, 51);"[39m
            [36m>[39m
              [0m🖥️ Monaco JSON Editor[0m
            [36m</h3>[39m
          [36m</div>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"flex: 1 1 0%; overflow: hidden;"[39m
          [36m>[39m
            [36m<div[39m
              [33mdata[39m=[32m"[object Object]"[39m
              [33mdata-testid[39m=[32m"monaco-editor-mock"[39m
              [33mheight[39m=[32m"100%"[39m
              [33mreadonly[39m=[32m""[39m
              [33mtheme[39m=[32m"light"[39m
            [36m>[39m
              [0mMonaco Editor Mock[0m
            [36m</div>[39m
          [36m</div>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      204 |       render(<JsonViewer data={{}} onCopy={mockOnCopy} />);
      205 |       
    > 206 |       await waitFor(() => {
          |                    ^
      207 |         expect(screen.getByTestId('monaco-json-editor')).toBeInTheDocument();
      208 |         expect(screen.getByText('{}')).toBeInTheDocument();
      209 |       });

      at waitForWrapper (node_modules/@testing-library/dom/dist/wait-for.js:163:27)
      at Object.<anonymous> (tests/__tests__/json-viewer.test.tsx:206:20)

  ● JsonViewer Component › Edge Cases › handles complex nested data

    Unable to find an element by: [data-testid="monaco-json-editor"]

    Ignored nodes: comments, script, style
    [36m<body>[39m
      [36m<div>[39m
        [36m<div[39m
          [33mstyle[39m=[32m"height: 100%; width: 100%; display: flex; flex-direction: column; background-color: rgb(255, 255, 255);"[39m
        [36m>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"padding: 12px 16px; border-bottom: 1px solid rgb(225, 229, 233); background-color: rgb(248, 249, 250); display: flex; justify-content: center; align-items: center;"[39m
          [36m>[39m
            [36m<h3[39m
              [33mstyle[39m=[32m"margin: 0px; font-size: 16px; font-weight: bold; color: rgb(51, 51, 51);"[39m
            [36m>[39m
              [0m🖥️ Monaco JSON Editor[0m
            [36m</h3>[39m
          [36m</div>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"flex: 1 1 0%; overflow: hidden;"[39m
          [36m>[39m
            [36m<div[39m
              [33mdata[39m=[32m"[object Object]"[39m
              [33mdata-testid[39m=[32m"monaco-editor-mock"[39m
              [33mheight[39m=[32m"100%"[39m
              [33mreadonly[39m=[32m""[39m
              [33mtheme[39m=[32m"light"[39m
            [36m>[39m
              [0mMonaco Editor Mock[0m
            [36m</div>[39m
          [36m</div>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      224 |       render(<JsonViewer data={complexData} />);
      225 |       
    > 226 |       await waitFor(() => {
          |                    ^
      227 |         expect(screen.getByTestId('monaco-json-editor')).toBeInTheDocument();
      228 |         expect(screen.getByText(/"deepValue":/)).toBeInTheDocument();
      229 |       });

      at waitForWrapper (node_modules/@testing-library/dom/dist/wait-for.js:163:27)
      at Object.<anonymous> (tests/__tests__/json-viewer.test.tsx:226:20)

  ● JsonViewer Component › Edge Cases › handles data with special characters

    Unable to find an element by: [data-testid="monaco-json-editor"]

    Ignored nodes: comments, script, style
    [36m<body>[39m
      [36m<div>[39m
        [36m<div[39m
          [33mstyle[39m=[32m"height: 100%; width: 100%; display: flex; flex-direction: column; background-color: rgb(255, 255, 255);"[39m
        [36m>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"padding: 12px 16px; border-bottom: 1px solid rgb(225, 229, 233); background-color: rgb(248, 249, 250); display: flex; justify-content: center; align-items: center;"[39m
          [36m>[39m
            [36m<h3[39m
              [33mstyle[39m=[32m"margin: 0px; font-size: 16px; font-weight: bold; color: rgb(51, 51, 51);"[39m
            [36m>[39m
              [0m🖥️ Monaco JSON Editor[0m
            [36m</h3>[39m
          [36m</div>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"flex: 1 1 0%; overflow: hidden;"[39m
          [36m>[39m
            [36m<div[39m
              [33mdata[39m=[32m"[object Object]"[39m
              [33mdata-testid[39m=[32m"monaco-editor-mock"[39m
              [33mheight[39m=[32m"100%"[39m
              [33mreadonly[39m=[32m""[39m
              [33mtheme[39m=[32m"light"[39m
            [36m>[39m
              [0mMonaco Editor Mock[0m
            [36m</div>[39m
          [36m</div>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      239 |       render(<JsonViewer data={specialData} />);
      240 |       
    > 241 |       await waitFor(() => {
          |                    ^
      242 |         expect(screen.getByTestId('monaco-json-editor')).toBeInTheDocument();
      243 |       });
      244 |     });

      at waitForWrapper (node_modules/@testing-library/dom/dist/wait-for.js:163:27)
      at Object.<anonymous> (tests/__tests__/json-viewer.test.tsx:241:20)

  ● JsonViewer Component › Component Updates › updates when data prop changes

    Unable to find an element with the text: /"slides":/. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

    Ignored nodes: comments, script, style
    [36m<body>[39m
      [36m<div>[39m
        [36m<div[39m
          [33mstyle[39m=[32m"height: 100%; width: 100%; display: flex; flex-direction: column; background-color: rgb(255, 255, 255);"[39m
        [36m>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"padding: 12px 16px; border-bottom: 1px solid rgb(225, 229, 233); background-color: rgb(248, 249, 250); display: flex; justify-content: center; align-items: center;"[39m
          [36m>[39m
            [36m<h3[39m
              [33mstyle[39m=[32m"margin: 0px; font-size: 16px; font-weight: bold; color: rgb(51, 51, 51);"[39m
            [36m>[39m
              [0m🖥️ Monaco JSON Editor[0m
            [36m</h3>[39m
          [36m</div>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"flex: 1 1 0%; overflow: hidden;"[39m
          [36m>[39m
            [36m<div[39m
              [33mdata[39m=[32m"[object Object]"[39m
              [33mdata-testid[39m=[32m"monaco-editor-mock"[39m
              [33mheight[39m=[32m"100%"[39m
              [33mreadonly[39m=[32m""[39m
              [33mtheme[39m=[32m"light"[39m
            [36m>[39m
              [0mMonaco Editor Mock[0m
            [36m</div>[39m
          [36m</div>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      249 |       const { rerender } = render(<JsonViewer data={sampleData} />);
      250 |       
    > 251 |       await waitFor(() => {
          |                    ^
      252 |         expect(screen.getByText(/"slides":/)).toBeInTheDocument();
      253 |       });
      254 |       

      at waitForWrapper (node_modules/@testing-library/dom/dist/wait-for.js:163:27)
      at Object.<anonymous> (tests/__tests__/json-viewer.test.tsx:251:20)

  ● JsonViewer Component › Component Updates › transitions from data to empty state

    Unable to find an element by: [data-testid="monaco-json-editor"]

    Ignored nodes: comments, script, style
    [36m<body>[39m
      [36m<div>[39m
        [36m<div[39m
          [33mstyle[39m=[32m"height: 100%; width: 100%; display: flex; flex-direction: column; background-color: rgb(255, 255, 255);"[39m
        [36m>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"padding: 12px 16px; border-bottom: 1px solid rgb(225, 229, 233); background-color: rgb(248, 249, 250); display: flex; justify-content: center; align-items: center;"[39m
          [36m>[39m
            [36m<h3[39m
              [33mstyle[39m=[32m"margin: 0px; font-size: 16px; font-weight: bold; color: rgb(51, 51, 51);"[39m
            [36m>[39m
              [0m🖥️ Monaco JSON Editor[0m
            [36m</h3>[39m
          [36m</div>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"flex: 1 1 0%; overflow: hidden;"[39m
          [36m>[39m
            [36m<div[39m
              [33mdata[39m=[32m"[object Object]"[39m
              [33mdata-testid[39m=[32m"monaco-editor-mock"[39m
              [33mheight[39m=[32m"100%"[39m
              [33mreadonly[39m=[32m""[39m
              [33mtheme[39m=[32m"light"[39m
            [36m>[39m
              [0mMonaco Editor Mock[0m
            [36m</div>[39m
          [36m</div>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      264 |       const { rerender } = render(<JsonViewer data={sampleData} />);
      265 |       
    > 266 |       await waitFor(() => {
          |                    ^
      267 |         expect(screen.getByTestId('monaco-json-editor')).toBeInTheDocument();
      268 |       });
      269 |       

      at waitForWrapper (node_modules/@testing-library/dom/dist/wait-for.js:163:27)
      at Object.<anonymous> (tests/__tests__/json-viewer.test.tsx:266:20)

  ● JsonViewer Component › Component Updates › updates onCopy callback

    Unable to find an element by: [data-testid="monaco-json-editor"]

    Ignored nodes: comments, script, style
    [36m<body>[39m
      [36m<div>[39m
        [36m<div[39m
          [33mstyle[39m=[32m"height: 100%; width: 100%; display: flex; flex-direction: column; background-color: rgb(255, 255, 255);"[39m
        [36m>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"padding: 12px 16px; border-bottom: 1px solid rgb(225, 229, 233); background-color: rgb(248, 249, 250); display: flex; justify-content: center; align-items: center;"[39m
          [36m>[39m
            [36m<h3[39m
              [33mstyle[39m=[32m"margin: 0px; font-size: 16px; font-weight: bold; color: rgb(51, 51, 51);"[39m
            [36m>[39m
              [0m🖥️ Monaco JSON Editor[0m
            [36m</h3>[39m
          [36m</div>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"flex: 1 1 0%; overflow: hidden;"[39m
          [36m>[39m
            [36m<div[39m
              [33mdata[39m=[32m"[object Object]"[39m
              [33mdata-testid[39m=[32m"monaco-editor-mock"[39m
              [33mheight[39m=[32m"100%"[39m
              [33mreadonly[39m=[32m""[39m
              [33mtheme[39m=[32m"light"[39m
            [36m>[39m
              [0mMonaco Editor Mock[0m
            [36m</div>[39m
          [36m</div>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      277 |       const { rerender } = render(<JsonViewer data={sampleData} onCopy={mockOnCopy} />);
      278 |       
    > 279 |       await waitFor(() => {
          |                    ^
      280 |         expect(screen.getByTestId('monaco-json-editor')).toBeInTheDocument();
      281 |       });
      282 |       

      at waitForWrapper (node_modules/@testing-library/dom/dist/wait-for.js:163:27)
      at Object.<anonymous> (tests/__tests__/json-viewer.test.tsx:279:20)

Summary of all failing tests
FAIL tests/__tests__/line-processor-comprehensive.test.ts
  ● LineProcessor 综合测试 › LineProcessor 类测试 › process 方法测试 › 应该正确提取尺寸信息

    expect(received).toEqual(expected) // deep equality

    - Expected  - 2
    + Received  + 2

      Object {
    -   "height": 7.2,
    -   "width": 14.4,
    +   "height": 96,
    +   "width": 192,
      }

      360 |         
      361 |         // 验证尺寸设置
    > 362 |         expect(result.getSize()).toEqual({
          |                                  ^
      363 |           width: 14.4, // 1828800 EMU 转为点
      364 |           height: 7.2, // 914400 EMU 转为点
      365 |         });

      at Object.<anonymous> (tests/__tests__/line-processor-comprehensive.test.ts:362:34)

  ● LineProcessor 综合测试 › LineProcessor 类测试 › process 方法测试 › 应该正确提取线条宽度

    expect(received).toBe(expected) // Object.is equality

    Expected: 2
    Received: 2.67

      384 |         const result = await processor.process(spNode, mockProcessingContext);
      385 |         
    > 386 |         expect(result.toJSON().width).toBe(2);
          |                                       ^
      387 |       });
      388 |
      389 |       it("应该正确提取线条颜色", async () => {

      at Object.<anonymous> (tests/__tests__/line-processor-comprehensive.test.ts:386:39)

  ● LineProcessor 综合测试 › LineProcessor 类测试 › process 方法测试 › 应该正确提取线条颜色

    expect(received).toBe(expected) // Object.is equality

    Expected: "rgba(255, 0, 0, 1)"
    Received: "rgba(255,0,0,1)"

      393 |         const result = await processor.process(spNode, mockProcessingContext);
      394 |         
    > 395 |         expect(result.toJSON().color).toBe("rgba(255, 0, 0, 1)");
          |                                       ^
      396 |       });
      397 |
      398 |       it("应该正确处理虚线样式", async () => {

      at Object.<anonymous> (tests/__tests__/line-processor-comprehensive.test.ts:395:39)

  ● LineProcessor 综合测试 › LineProcessor 类测试 › process 方法测试 › 应该正确处理箭头

    expect(received).toEqual(expected) // deep equality

    - Expected  - 1
    + Received  + 1

      Array [
        "arrow",
    -   "diamond",
    +   "arrow",
      ]

      423 |         const result = await processor.process(spNode, mockProcessingContext);
      424 |         
    > 425 |         expect(result.toJSON().points).toEqual(["arrow", "diamond"]);
          |                                        ^
      426 |       });
      427 |
      428 |       it("应该正确计算线条端点 - 默认方向", async () => {

      at Object.<anonymous> (tests/__tests__/line-processor-comprehensive.test.ts:425:40)

  ● LineProcessor 综合测试 › LineProcessor 类测试 › process 方法测试 › 应该正确计算线条端点 - 默认方向

    expect(received).toEqual(expected) // deep equality

    - Expected  - 2
    + Received  + 2

      Array [
    -   14.4,
    -   7.2,
    +   192,
    +   96,
      ]

      435 |         // 默认从左上到右下
      436 |         expect(json.start).toEqual([0, 0]); // 相对于位置
    > 437 |         expect(json.end).toEqual([14.4, 7.2]); // 相对于位置，使用尺寸
          |                          ^
      438 |       });
      439 |
      440 |       it("应该正确计算线条端点 - 水平翻转", async () => {

      at Object.<anonymous> (tests/__tests__/line-processor-comprehensive.test.ts:437:26)

  ● LineProcessor 综合测试 › LineProcessor 类测试 › process 方法测试 › 应该正确计算线条端点 - 水平翻转

    expect(received).toEqual(expected) // deep equality

    - Expected  - 1
    + Received  + 1

      Array [
    -   14.4,
    +   192,
        0,
      ]

      446 |         
      447 |         // 水平翻转：从右上到左下
    > 448 |         expect(json.start).toEqual([14.4, 0]); // 相对于位置
          |                            ^
      449 |         expect(json.end).toEqual([0, 7.2]); // 相对于位置
      450 |       });
      451 |

      at Object.<anonymous> (tests/__tests__/line-processor-comprehensive.test.ts:448:28)

  ● LineProcessor 综合测试 › LineProcessor 类测试 › process 方法测试 › 应该正确计算线条端点 - 垂直翻转

    expect(received).toEqual(expected) // deep equality

    - Expected  - 1
    + Received  + 1

      Array [
        0,
    -   7.2,
    +   96,
      ]

      458 |         
      459 |         // 垂直翻转：从左下到右上
    > 460 |         expect(json.start).toEqual([0, 7.2]); // 相对于位置
          |                            ^
      461 |         expect(json.end).toEqual([14.4, 0]); // 相对于位置
      462 |       });
      463 |

      at Object.<anonymous> (tests/__tests__/line-processor-comprehensive.test.ts:460:28)

  ● LineProcessor 综合测试 › LineProcessor 类测试 › process 方法测试 › 应该正确计算线条端点 - 双重翻转

    expect(received).toEqual(expected) // deep equality

    - Expected  - 2
    + Received  + 2

      Array [
    -   14.4,
    -   7.2,
    +   192,
    +   96,
      ]

      470 |         
      471 |         // 双重翻转：从右下到左上
    > 472 |         expect(json.start).toEqual([14.4, 7.2]); // 相对于位置
          |                            ^
      473 |         expect(json.end).toEqual([0, 0]); // 相对于位置
      474 |       });
      475 |

      at Object.<anonymous> (tests/__tests__/line-processor-comprehensive.test.ts:472:28)

  ● LineProcessor 综合测试 › LineProcessor 类测试 › process 方法测试 › 应该处理主题颜色

    expect(received).toBe(expected) // Object.is equality

    Expected: "rgba(255, 87, 51, 1)"
    Received: "rgba(0,0,0,1)"

      497 |         const result = await processor.process(spNode, mockProcessingContext);
      498 |         
    > 499 |         expect(result.toJSON().color).toBe("rgba(255, 87, 51, 1)");
          |                                       ^
      500 |       });
      501 |
      502 |       it("应该处理缺少位置信息的情况", async () => {

      at Object.<anonymous> (tests/__tests__/line-processor-comprehensive.test.ts:499:39)

  ● LineProcessor 综合测试 › LineProcessor 类测试 › process 方法测试 › 应该处理无效的颜色值

    expect(received).toBe(expected) // Object.is equality

    Expected: "#000000"
    Received: "rgba(0,0,0,1)"

      559 |         
      560 |         // 应该回退到默认颜色
    > 561 |         expect(result.toJSON().color).toBe("#000000");
          |                                       ^
      562 |       });
      563 |
      564 |       it("应该处理无效的线宽值", async () => {

      at Object.<anonymous> (tests/__tests__/line-processor-comprehensive.test.ts:561:39)

  ● LineProcessor 综合测试 › LineProcessor 类测试 › process 方法测试 › 应该处理无效的线宽值

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: NaN

      569 |         
      570 |         // 应该使用默认线宽
    > 571 |         expect(result.toJSON().width).toBe(1);
          |                                       ^
      572 |       });
      573 |     });
      574 |

      at Object.<anonymous> (tests/__tests__/line-processor-comprehensive.test.ts:571:39)

  ● LineProcessor 综合测试 › LineProcessor 类测试 › extractColor 私有方法测试 › 应该处理RGB颜色

    expect(received).toBe(expected) // Object.is equality

    Expected: "rgba(255, 0, 0, 1)"
    Received: "rgba(255,0,0,1)"

      586 |         const result = await processor.process(spNode, mockProcessingContext);
      587 |         
    > 588 |         expect(result.toJSON().color).toBe("rgba(255, 0, 0, 1)");
          |                                       ^
      589 |       });
      590 |
      591 |       it("应该处理主题颜色", async () => {

      at Object.<anonymous> (tests/__tests__/line-processor-comprehensive.test.ts:588:39)

  ● LineProcessor 综合测试 › LineProcessor 类测试 › extractColor 私有方法测试 › 应该处理主题颜色

    expect(received).toBe(expected) // Object.is equality

    Expected: "rgba(0, 255, 0, 1)"
    Received: "rgba(0,0,0,1)"

      611 |         const result = await processor.process(spNode, mockProcessingContext);
      612 |         
    > 613 |         expect(result.toJSON().color).toBe("rgba(0, 255, 0, 1)");
          |                                       ^
      614 |       });
      615 |
      616 |       it("应该处理缺少主题的情况", async () => {

      at Object.<anonymous> (tests/__tests__/line-processor-comprehensive.test.ts:613:39)

  ● LineProcessor 综合测试 › LineProcessor 类测试 › extractColor 私有方法测试 › 应该处理缺少主题的情况

    expect(received).toBe(expected) // Object.is equality

    Expected: "#000000"
    Received: "rgba(0,0,0,1)"

      627 |         
      628 |         // 应该回退到默认黑色
    > 629 |         expect(result.toJSON().color).toBe("#000000");
          |                                       ^
      630 |       });
      631 |     });
      632 |   });

      at Object.<anonymous> (tests/__tests__/line-processor-comprehensive.test.ts:629:39)

FAIL tests/__tests__/api-route-parse-pptx.test.ts
  ● API Route - /api/parse-pptx › 背景格式参数处理 › 应该处理legacy格式参数

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 400

      272 |
      273 |       const response = await POST(request);
    > 274 |       expect(response.status).toBe(200);
          |                               ^
      275 |
      276 |       expect(pptxParser.parseToJSON).toHaveBeenCalledWith(
      277 |         expect.any(ArrayBuffer),

      at Object.<anonymous> (tests/__tests__/api-route-parse-pptx.test.ts:274:31)

  ● API Route - /api/parse-pptx › 背景格式参数处理 › 应该处理pptist格式参数

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 400

      291 |
      292 |       const response = await POST(request);
    > 293 |       expect(response.status).toBe(200);
          |                               ^
      294 |
      295 |       expect(pptxParser.parseToJSON).toHaveBeenCalledWith(
      296 |         expect.any(ArrayBuffer),

      at Object.<anonymous> (tests/__tests__/api-route-parse-pptx.test.ts:293:31)

  ● API Route - /api/parse-pptx › 背景格式参数处理 › 应该默认使用legacy格式

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 400

      308 |
      309 |       const response = await POST(request);
    > 310 |       expect(response.status).toBe(200);
          |                               ^
      311 |
      312 |       expect(pptxParser.parseToJSON).toHaveBeenCalledWith(
      313 |         expect.any(ArrayBuffer),

      at Object.<anonymous> (tests/__tests__/api-route-parse-pptx.test.ts:310:31)

  ● API Route - /api/parse-pptx › 调试模式功能 › 应该处理调试模式启用

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 400

      340 |
      341 |       const response = await POST(request);
    > 342 |       expect(response.status).toBe(200);
          |                               ^
      343 |
      344 |       expect(pptxParser.parseToJSON).toHaveBeenCalledWith(
      345 |         expect.any(ArrayBuffer),

      at Object.<anonymous> (tests/__tests__/api-route-parse-pptx.test.ts:342:31)

  ● API Route - /api/parse-pptx › 调试模式功能 › 应该处理无效的调试选项JSON

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 400

      364 |
      365 |       const response = await POST(request);
    > 366 |       expect(response.status).toBe(200);
          |                               ^
      367 |
      368 |       expect(pptxParser.parseToJSON).toHaveBeenCalledWith(
      369 |         expect.any(ArrayBuffer),

      at Object.<anonymous> (tests/__tests__/api-route-parse-pptx.test.ts:366:31)

  ● API Route - /api/parse-pptx › CDN存储功能 › 应该成功上传到CDN

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 400

      411 |
      412 |       const response = await POST(request);
    > 413 |       expect(response.status).toBe(200);
          |                               ^
      414 |
      415 |       const responseData = await response.json();
      416 |       expect(responseData.success).toBe(true);

      at Object.<anonymous> (tests/__tests__/api-route-parse-pptx.test.ts:413:31)

  ● API Route - /api/parse-pptx › CDN存储功能 › 应该处理CDN不可用的情况

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 400

      434 |
      435 |       const response = await POST(request);
    > 436 |       expect(response.status).toBe(200);
          |                               ^
      437 |
      438 |       const responseData = await response.json();
      439 |       expect(responseData.success).toBe(true);

      at Object.<anonymous> (tests/__tests__/api-route-parse-pptx.test.ts:436:31)

  ● API Route - /api/parse-pptx › CDN存储功能 › 应该处理CDN上传失败

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 400

      458 |
      459 |       const response = await POST(request);
    > 460 |       expect(response.status).toBe(200);
          |                               ^
      461 |
      462 |       const responseData = await response.json();
      463 |       expect(responseData.success).toBe(true);

      at Object.<anonymous> (tests/__tests__/api-route-parse-pptx.test.ts:460:31)

  ● API Route - /api/parse-pptx › 错误处理 › 应该处理解析器错误

    expect(received).toBe(expected) // Object.is equality

    Expected: 500
    Received: 400

      479 |
      480 |       const response = await POST(request);
    > 481 |       expect(response.status).toBe(500);
          |                               ^
      482 |
      483 |       const responseData = await response.json();
      484 |       expect(responseData.error).toBe("Failed to parse PPTX file");

      at Object.<anonymous> (tests/__tests__/api-route-parse-pptx.test.ts:481:31)

  ● API Route - /api/parse-pptx › 响应格式验证 › 应该返回正确的响应结构

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 400

      524 |
      525 |       const response = await POST(request);
    > 526 |       expect(response.status).toBe(200);
          |                               ^
      527 |
      528 |       const responseData = await response.json();
      529 |       

      at Object.<anonymous> (tests/__tests__/api-route-parse-pptx.test.ts:526:31)

  ● API Route - /api/parse-pptx › 响应格式验证 › 应该包含调试信息

    TypeError: Cannot read properties of undefined (reading 'fileSize')

      552 |       const responseData = await response.json();
      553 |
    > 554 |       expect(responseData.debug.fileSize).toBe(12); // "test content".length
          |                                 ^
      555 |       expect(responseData.debug.resultKeys).toContain("width");
      556 |       expect(responseData.debug.resultKeys).toContain("height");
      557 |       expect(responseData.debug.resultKeys).toContain("slides");

      at Object.<anonymous> (tests/__tests__/api-route-parse-pptx.test.ts:554:33)

  ● API Route - /api/parse-pptx › 参数组合测试 › 应该处理所有参数的组合

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 400

      593 |
      594 |       const response = await POST(request);
    > 595 |       expect(response.status).toBe(200);
          |                               ^
      596 |
      597 |       // 验证所有参数都被正确传递
      598 |       expect(pptxParser.parseToJSON).toHaveBeenCalledWith(

      at Object.<anonymous> (tests/__tests__/api-route-parse-pptx.test.ts:595:31)

  ● API Route - /api/parse-pptx › 边界情况测试 › 应该处理空文件

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 400

      621 |
      622 |       const response = await POST(request);
    > 623 |       expect(response.status).toBe(200);
          |                               ^
      624 |
      625 |       const responseData = await response.json();
      626 |       expect(responseData.debug.fileSize).toBe(0);

      at Object.<anonymous> (tests/__tests__/api-route-parse-pptx.test.ts:623:31)

  ● API Route - /api/parse-pptx › 边界情况测试 › 应该处理非常大的文件名

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 400

      638 |
      639 |       const response = await POST(request);
    > 640 |       expect(response.status).toBe(200);
          |                               ^
      641 |
      642 |       const responseData = await response.json();
      643 |       expect(responseData.filename).toBe(longName);

      at Object.<anonymous> (tests/__tests__/api-route-parse-pptx.test.ts:640:31)

  ● API Route - /api/parse-pptx › 大文件处理 › 应该成功处理大文件（100MB）

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 400

      675 |
      676 |       const response = await POST(request);
    > 677 |       expect(response.status).toBe(200);
          |                               ^
      678 |
      679 |       const responseData = await response.json();
      680 |       expect(responseData.success).toBe(true);

      at Object.<anonymous> (tests/__tests__/api-route-parse-pptx.test.ts:677:31)

  ● API Route - /api/parse-pptx › 大文件处理 › 应该处理解析大文件时的内存错误

    expect(received).toBe(expected) // Object.is equality

    Expected: 500
    Received: 400

      701 |
      702 |       const response = await POST(request);
    > 703 |       expect(response.status).toBe(500);
          |                               ^
      704 |
      705 |       const responseData = await response.json();
      706 |       expect(responseData.error).toBe("Failed to parse PPTX file");

      at Object.<anonymous> (tests/__tests__/api-route-parse-pptx.test.ts:703:31)

  ● API Route - /api/parse-pptx › 大文件处理 › 应该处理CDN上传大文件

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 400

      740 |
      741 |       const response = await POST(request);
    > 742 |       expect(response.status).toBe(200);
          |                               ^
      743 |
      744 |       const responseData = await response.json();
      745 |       expect(responseData.success).toBe(true);

      at Object.<anonymous> (tests/__tests__/api-route-parse-pptx.test.ts:742:31)

  ● API Route - /api/parse-pptx › 并发请求处理 › 应该正确处理多个并发请求

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 400

      778 |       // 验证所有请求都成功
      779 |       responses.forEach((response) => {
    > 780 |         expect(response.status).toBe(200);
          |                                 ^
      781 |       });
      782 |
      783 |       // 验证每个请求返回不同的数据

      at tests/__tests__/api-route-parse-pptx.test.ts:780:33
          at Array.forEach (<anonymous>)
      at Object.<anonymous> (tests/__tests__/api-route-parse-pptx.test.ts:779:17)

  ● API Route - /api/parse-pptx › 并发请求处理 › 应该处理并发CDN请求

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 400

      831 |       // 验证所有请求都成功
      832 |       responses.forEach((response) => {
    > 833 |         expect(response.status).toBe(200);
          |                                 ^
      834 |       });
      835 |
      836 |       // 验证CDN上传被调用了正确的次数

      at tests/__tests__/api-route-parse-pptx.test.ts:833:33
          at Array.forEach (<anonymous>)
      at Object.<anonymous> (tests/__tests__/api-route-parse-pptx.test.ts:832:17)

  ● API Route - /api/parse-pptx › 并发请求处理 › 应该处理并发请求中的部分失败

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 400

      867 |
      868 |       // 验证第一个和第三个请求成功
    > 869 |       expect(responses[0].status).toBe(200);
          |                                   ^
      870 |       expect(responses[2].status).toBe(200);
      871 |
      872 |       // 验证第二个请求失败

      at Object.<anonymous> (tests/__tests__/api-route-parse-pptx.test.ts:869:35)

  ● API Route - /api/parse-pptx › 内存和性能测试 › 应该清理解析后的临时数据

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 400

      970 |
      971 |       const response = await POST(request);
    > 972 |       expect(response.status).toBe(200);
          |                               ^
      973 |
      974 |       // 验证解析器只被调用一次
      975 |       expect(pptxParser.parseToJSON).toHaveBeenCalledTimes(1);

      at Object.<anonymous> (tests/__tests__/api-route-parse-pptx.test.ts:972:31)

  ● API Route - /api/parse-pptx › 内存和性能测试 › 应该处理解析超时情况

    expect(received).toBe(expected) // Object.is equality

    Expected: 500
    Received: 400

       996 |
       997 |       const response = await POST(request);
    >  998 |       expect(response.status).toBe(500);
           |                               ^
       999 |
      1000 |       const responseData = await response.json();
      1001 |       expect(responseData.error).toBe("Failed to parse PPTX file");

      at Object.<anonymous> (tests/__tests__/api-route-parse-pptx.test.ts:998:31)

FAIL tests/__tests__/html-converter-comprehensive.test.ts
  ● HtmlConverter - Comprehensive Test Suite › Single Paragraph Conversion › should convert simple text content to HTML

    expect(received).toBe(expected) // Object.is equality

    Expected: "<div style=\"\"><p style=\"\"><span style=\"\">Hello World</span></p></div>"
    Received: "<div  style=\"\"><p  style=\"\"><span  style=\"\">Hello World</span></p></div>"

      15 |       
      16 |       const html = HtmlConverter.convertSingleParagraphToHtml(content);
    > 17 |       expect(html).toBe('<div style=""><p style=""><span style="">Hello World</span></p></div>');
         |                    ^
      18 |     });
      19 |
      20 |     it('should handle text with basic styling', () => {

      at Object.<anonymous> (tests/__tests__/html-converter-comprehensive.test.ts:17:20)

  ● HtmlConverter - Comprehensive Test Suite › Single Paragraph Conversion › should handle multiple text runs in a paragraph

    expect(received).toContain(expected) // indexOf

    Expected substring: "<span style=\"\">Normal </span>"
    Received string:    "<div  style=\"\"><p  style=\"\"><span  style=\"\">Normal </span><span  style=\"font-weight:bold\">Bold </span><span  style=\"font-style:italic\">Italic</span></p></div>"

      78 |       
      79 |       const html = HtmlConverter.convertSingleParagraphToHtml(content);
    > 80 |       expect(html).toContain('<span style="">Normal </span>');
         |                    ^
      81 |       expect(html).toContain('<span style="font-weight:bold">Bold </span>');
      82 |       expect(html).toContain('<span style="font-style:italic">Italic</span>');
      83 |     });

      at Object.<anonymous> (tests/__tests__/html-converter-comprehensive.test.ts:80:20)

  ● HtmlConverter - Comprehensive Test Suite › Single Paragraph Conversion › should handle options without wrapping div

    expect(received).toBe(expected) // Object.is equality

    Expected: "<p style=\"\"><span style=\"\">No Wrapper</span></p>"
    Received: "<p  style=\"\"><span  style=\"\">No Wrapper</span></p>"

      90 |       const options: HtmlConversionOptions = { wrapInDiv: false };
      91 |       const html = HtmlConverter.convertSingleParagraphToHtml(content, options);
    > 92 |       expect(html).toBe('<p style=""><span style="">No Wrapper</span></p>');
         |                    ^
      93 |     });
      94 |
      95 |     it('should handle custom div style', () => {

      at Object.<anonymous> (tests/__tests__/html-converter-comprehensive.test.ts:92:20)

  ● HtmlConverter - Comprehensive Test Suite › Single Paragraph Conversion › should handle custom paragraph style

    expect(received).toContain(expected) // indexOf

    Expected substring: "<p style=\"line-height: 1.5\">"
    Received string:    "<div  style=\"\"><p  style=\"line-height: 1.5\"><span  style=\"\">Custom Paragraph</span></p></div>"

      110 |       const options: HtmlConversionOptions = { paragraphStyle: 'line-height: 1.5' };
      111 |       const html = HtmlConverter.convertSingleParagraphToHtml(content, options);
    > 112 |       expect(html).toContain('<p style="line-height: 1.5">');
          |                    ^
      113 |     });
      114 |
      115 |     it('should handle text alignment', () => {

      at Object.<anonymous> (tests/__tests__/html-converter-comprehensive.test.ts:112:20)

  ● HtmlConverter - Comprehensive Test Suite › Multiple Paragraphs Conversion › should convert multiple paragraphs to HTML

    expect(received).toContain(expected) // indexOf

    Expected substring: "<p style=\"\"><span style=\"\">First paragraph</span></p>"
    Received string:    "<div  style=\"\"><p  style=\"\"><span  style=\"\">First paragraph</span></p><p  style=\"\"><span  style=\"\">Second paragraph</span></p><p  style=\"\"><span  style=\"\">Third paragraph</span></p></div>"

      142 |       
      143 |       const html = HtmlConverter.convertParagraphsToHtml(paragraphs);
    > 144 |       expect(html).toContain('<p style=""><span style="">First paragraph</span></p>');
          |                    ^
      145 |       expect(html).toContain('<p style=""><span style="">Second paragraph</span></p>');
      146 |       expect(html).toContain('<p style=""><span style="">Third paragraph</span></p>');
      147 |     });

      at Object.<anonymous> (tests/__tests__/html-converter-comprehensive.test.ts:144:20)

  ● HtmlConverter - Comprehensive Test Suite › Multiple Paragraphs Conversion › should handle mixed paragraph styles

    expect(received).toContain(expected) // indexOf

    Expected substring: "<span style=\"\">Normal</span>"
    Received string:    "<div  style=\"\"><p  style=\"\"><span  style=\"\">Normal</span></p><p  style=\"\"><span  style=\"font-weight:bold\">Bold</span></p><p  style=\"\"><span  style=\"font-style:italic\">Italic</span></p></div>"

      155 |       
      156 |       const html = HtmlConverter.convertParagraphsToHtml(paragraphs);
    > 157 |       expect(html).toContain('<span style="">Normal</span>');
          |                    ^
      158 |       expect(html).toContain('<span style="font-weight:bold">Bold</span>');
      159 |       expect(html).toContain('<span style="font-style:italic">Italic</span>');
      160 |     });

      at Object.<anonymous> (tests/__tests__/html-converter-comprehensive.test.ts:157:20)

  ● HtmlConverter - Comprehensive Test Suite › Multiple Paragraphs Conversion › should handle options without wrapping div for multiple paragraphs

    expect(received).toBe(expected) // Object.is equality

    Expected: "<p style=\"\"><span style=\"\">Para 1</span></p><p style=\"\"><span style=\"\">Para 2</span></p>"
    Received: "<p  style=\"\"><span  style=\"\">Para 1</span></p><p  style=\"\"><span  style=\"\">Para 2</span></p>"

      194 |       const options: HtmlConversionOptions = { wrapInDiv: false };
      195 |       const html = HtmlConverter.convertParagraphsToHtml(paragraphs, options);
    > 196 |       expect(html).toBe('<p style=""><span style="">Para 1</span></p><p style=""><span style="">Para 2</span></p>');
          |                    ^
      197 |     });
      198 |   });
      199 |

      at Object.<anonymous> (tests/__tests__/html-converter-comprehensive.test.ts:196:20)

  ● HtmlConverter - Comprehensive Test Suite › HTML Escaping › should handle null and undefined text gracefully

    expect(received).toContain(expected) // indexOf

    Expected substring: "<span style=\"\"></span>"
    Received string:    "<div  style=\"\"><p  style=\"\"><span  style=\"\"></span></p></div>"

      308 |       const options: HtmlConversionOptions = { escapeHtml: true };
      309 |       const html = HtmlConverter.convertSingleParagraphToHtml(content, options);
    > 310 |       expect(html).toContain('<span style=""></span>');
          |                    ^
      311 |     });
      312 |   });
      313 |

      at Object.<anonymous> (tests/__tests__/html-converter-comprehensive.test.ts:310:20)

  ● HtmlConverter - Comprehensive Test Suite › Edge Cases and Error Handling › should handle content with only empty text

    expect(received).toBe(expected) // Object.is equality

    Expected: "<div style=\"\"><p style=\"\"><span style=\"\"></span></p></div>"
    Received: "<div  style=\"\"><p  style=\"\"><span  style=\"\"></span></p></div>"

      448 |       
      449 |       const html = HtmlConverter.convertSingleParagraphToHtml(content);
    > 450 |       expect(html).toBe('<div style=""><p style=""><span style=""></span></p></div>');
          |                    ^
      451 |     });
      452 |
      453 |     it('should handle content with only whitespace', () => {

      at Object.<anonymous> (tests/__tests__/html-converter-comprehensive.test.ts:450:20)

  ● HtmlConverter - Comprehensive Test Suite › Edge Cases and Error Handling › should handle content with only whitespace

    expect(received).toContain(expected) // indexOf

    Expected substring: "<span style=\"\">   </span>"
    Received string:    "<div  style=\"\"><p  style=\"\"><span  style=\"\">   </span></p></div>"

      457 |       
      458 |       const html = HtmlConverter.convertSingleParagraphToHtml(content);
    > 459 |       expect(html).toContain('<span style="">   </span>');
          |                    ^
      460 |     });
      461 |
      462 |     it('should handle very long text content', () => {

      at Object.<anonymous> (tests/__tests__/html-converter-comprehensive.test.ts:459:20)

FAIL tests/__tests__/text-validator-comprehensive.test.ts
  ● TextValidator - Comprehensive Test Suite › extractTextFromHtml Function › Edge Cases and Error Handling › should handle malformed HTML

    expect(received).toBe(expected) // Object.is equality

    Expected: "brackets"
    Received: "> brackets"

      299 |         expect(extractTextFromHtml('Text <unopened tag')).toBe('Text <unopened tag');
      300 |         expect(extractTextFromHtml('<>Empty brackets</>')).toBe('Empty brackets');
    > 301 |         expect(extractTextFromHtml('<<double>> brackets')).toBe('brackets');
          |                                                            ^
      302 |       });
      303 |
      304 |       it('should handle HTML with no text content', () => {

      at Object.<anonymous> (tests/__tests__/text-validator-comprehensive.test.ts:301:60)

FAIL tests/__tests__/api-route-parse-pptx-comprehensive.test.ts
  ● API Route Comprehensive Tests - /api/parse-pptx › 大文件处理测试 › 应该处理大文件（10MB）的上传

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 400

      94 |       const responseData = await response.json();
      95 |
    > 96 |       expect(response.status).toBe(200);
         |                               ^
      97 |       expect(responseData.success).toBe(true);
      98 |       expect(responseData.debug.fileSize).toBe(10 * 1024 * 1024);
      99 |     });

      at Object.<anonymous> (tests/__tests__/api-route-parse-pptx-comprehensive.test.ts:96:31)

  ● API Route Comprehensive Tests - /api/parse-pptx › 大文件处理测试 › 应该处理内存不足错误

    expect(received).toBe(expected) // Object.is equality

    Expected: 500
    Received: 400

      111 |       const responseData = await response.json();
      112 |
    > 113 |       expect(response.status).toBe(500);
          |                               ^
      114 |       expect(responseData.error).toBe("Failed to parse PPTX file");
      115 |       expect(responseData.details).toContain("not enough memory");
      116 |     });

      at Object.<anonymous> (tests/__tests__/api-route-parse-pptx-comprehensive.test.ts:113:31)

  ● API Route Comprehensive Tests - /api/parse-pptx › 并发请求处理测试 › 应该正确处理多个并发请求

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 400

      141 |       // 验证所有请求都成功
      142 |       requests.forEach((response) => {
    > 143 |         expect(response.status).toBe(200);
          |                                 ^
      144 |       });
      145 |
      146 |       // 验证解析器被调用了正确的次数

      at tests/__tests__/api-route-parse-pptx-comprehensive.test.ts:143:33
          at Array.forEach (<anonymous>)
      at Object.<anonymous> (tests/__tests__/api-route-parse-pptx-comprehensive.test.ts:142:16)

  ● API Route Comprehensive Tests - /api/parse-pptx › 并发请求处理测试 › 应该处理并发请求中的部分失败

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 400

      165 |
      166 |       // 验证第一个和第三个请求成功
    > 167 |       expect(requests[0].status).toBe(200);
          |                                  ^
      168 |       expect(requests[2].status).toBe(200);
      169 |
      170 |       // 验证第二个请求失败

      at Object.<anonymous> (tests/__tests__/api-route-parse-pptx-comprehensive.test.ts:167:34)

  ● API Route Comprehensive Tests - /api/parse-pptx › CDN存储并发测试 › 应该处理并发CDN上传

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 400

      210 |       // 验证所有请求都成功
      211 |       requests.forEach((response) => {
    > 212 |         expect(response.status).toBe(200);
          |                                 ^
      213 |       });
      214 |
      215 |       // 验证CDN上传被调用了正确的次数

      at tests/__tests__/api-route-parse-pptx-comprehensive.test.ts:212:33
          at Array.forEach (<anonymous>)
      at Object.<anonymous> (tests/__tests__/api-route-parse-pptx-comprehensive.test.ts:211:16)

  ● API Route Comprehensive Tests - /api/parse-pptx › 边界情况和性能测试 › 应该处理空文件

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 400

      230 |       const responseData = await response.json();
      231 |
    > 232 |       expect(response.status).toBe(200);
          |                               ^
      233 |       expect(responseData.debug.fileSize).toBe(0);
      234 |     });
      235 |

      at Object.<anonymous> (tests/__tests__/api-route-parse-pptx-comprehensive.test.ts:232:31)

  ● API Route Comprehensive Tests - /api/parse-pptx › 边界情况和性能测试 › 应该处理非常长的文件名

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 400

      246 |       const responseData = await response.json();
      247 |
    > 248 |       expect(response.status).toBe(200);
          |                               ^
      249 |       expect(responseData.filename).toBe(longName);
      250 |     });
      251 |

      at Object.<anonymous> (tests/__tests__/api-route-parse-pptx-comprehensive.test.ts:248:31)

  ● API Route Comprehensive Tests - /api/parse-pptx › 边界情况和性能测试 › 应该处理解析超时

    expect(received).toBe(expected) // Object.is equality

    Expected: 500
    Received: 400

      266 |       const responseData = await response.json();
      267 |
    > 268 |       expect(response.status).toBe(500);
          |                               ^
      269 |       expect(responseData.error).toBe("Failed to parse PPTX file");
      270 |       expect(responseData.details).toContain("timeout");
      271 |     });

      at Object.<anonymous> (tests/__tests__/api-route-parse-pptx-comprehensive.test.ts:268:31)

  ● API Route Comprehensive Tests - /api/parse-pptx › 调试和日志测试 › 应该在调试模式下提供详细信息

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 400

      338 |       const responseData = await response.json();
      339 |
    > 340 |       expect(response.status).toBe(200);
          |                               ^
      341 |       expect(responseData.debug.debugMode).toBe(true);
      342 |       expect(pptxParser.parseToJSON).toHaveBeenCalledWith(
      343 |         expect.any(ArrayBuffer),

      at Object.<anonymous> (tests/__tests__/api-route-parse-pptx-comprehensive.test.ts:340:31)

  ● API Route Comprehensive Tests - /api/parse-pptx › 背景格式测试 › 应该正确传递legacy背景格式

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: Any<ArrayBuffer>, ObjectContaining {"backgroundFormat": "legacy"}

    Number of calls: 0

      367 |       await POST(request);
      368 |
    > 369 |       expect(pptxParser.parseToJSON).toHaveBeenCalledWith(
          |                                      ^
      370 |         expect.any(ArrayBuffer),
      371 |         expect.objectContaining({
      372 |           backgroundFormat: "legacy",

      at Object.<anonymous> (tests/__tests__/api-route-parse-pptx-comprehensive.test.ts:369:38)

  ● API Route Comprehensive Tests - /api/parse-pptx › 背景格式测试 › 应该正确传递pptist背景格式

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    Expected: Any<ArrayBuffer>, ObjectContaining {"backgroundFormat": "pptist"}

    Number of calls: 0

      384 |       await POST(request);
      385 |
    > 386 |       expect(pptxParser.parseToJSON).toHaveBeenCalledWith(
          |                                      ^
      387 |         expect.any(ArrayBuffer),
      388 |         expect.objectContaining({
      389 |           backgroundFormat: "pptist",

      at Object.<anonymous> (tests/__tests__/api-route-parse-pptx-comprehensive.test.ts:386:38)

FAIL tests/__tests__/unit-converter-comprehensive.test.ts
  ● UnitConverter - Comprehensive Test Suite › EMU to Points Conversions › emuToPointsRounded (integer output) › should handle rounding edge cases

    expect(received).toBe(expected) // Object.is equality

    Expected: 3
    Received: 2

      87 |         // Test cases that should round properly
      88 |         expect(UnitConverter.emuToPointsRounded(9525)).toBe(1); // Should round to 1
    > 89 |         expect(UnitConverter.emuToPointsRounded(19050)).toBe(3); // Should round to 3
         |                                                         ^
      90 |       });
      91 |
      92 |       it('should handle negative values with proper rounding', () => {

      at Object.<anonymous> (tests/__tests__/unit-converter-comprehensive.test.ts:89:57)

FAIL tests/__tests__/font-size-calculator-comprehensive.test.ts
  ● FontSizeCalculator - Comprehensive Test Suite › convertPowerPointToWebSize › Standard Conversions › should convert typical PowerPoint font sizes correctly

    expect(received).toBeCloseTo(expected, precision)

    Expected: 24
    Received: 23.99

    Expected precision:    2
    Expected difference: < 0.005
    Received difference:   0.010000000000001563

      25 |         testCases.forEach(({ input, expected }) => {
      26 |           const result = FontSizeCalculator.convertPowerPointToWebSize(input);
    > 27 |           expect(result).toBeCloseTo(expected, 2);
         |                          ^
      28 |         });
      29 |       });
      30 |

      at tests/__tests__/font-size-calculator-comprehensive.test.ts:27:26
          at Array.forEach (<anonymous>)
      at Object.<anonymous> (tests/__tests__/font-size-calculator-comprehensive.test.ts:25:19)

  ● FontSizeCalculator - Comprehensive Test Suite › convertPowerPointToWebSize › Standard Conversions › should handle string inputs correctly

    expect(received).toBeCloseTo(expected, precision)

    Expected: 24
    Received: 23.99

    Expected precision:    2
    Expected difference: < 0.005
    Received difference:   0.010000000000001563

      31 |       it('should handle string inputs correctly', () => {
      32 |         expect(FontSizeCalculator.convertPowerPointToWebSize('1200')).toBeCloseTo(16.00, 2);
    > 33 |         expect(FontSizeCalculator.convertPowerPointToWebSize('1800')).toBeCloseTo(24.00, 2);
         |                                                                       ^
      34 |         expect(FontSizeCalculator.convertPowerPointToWebSize('2400')).toBeCloseTo(32.00, 2);
      35 |       });
      36 |

      at Object.<anonymous> (tests/__tests__/font-size-calculator-comprehensive.test.ts:33:71)

  ● FontSizeCalculator - Comprehensive Test Suite › convertPowerPointToWebSize › Standard Conversions › should handle decimal inputs

    expect(received).toBeCloseTo(expected, precision)

    Expected: 19.33
    Received: 19.34

    Expected precision:    2
    Expected difference: < 0.005
    Received difference:   0.010000000000001563

      37 |       it('should handle decimal inputs', () => {
      38 |         expect(FontSizeCalculator.convertPowerPointToWebSize(1250)).toBeCloseTo(16.66, 2);
    > 39 |         expect(FontSizeCalculator.convertPowerPointToWebSize('1450.5')).toBeCloseTo(19.33, 2);
         |                                                                         ^
      40 |         expect(FontSizeCalculator.convertPowerPointToWebSize(1333.33)).toBeCloseTo(17.77, 2);
      41 |       });
      42 |

      at Object.<anonymous> (tests/__tests__/font-size-calculator-comprehensive.test.ts:39:73)

  ● FontSizeCalculator - Comprehensive Test Suite › convertPowerPointToWebSize › Edge Cases › should handle zero and negative values

    expect(received).toBeCloseTo(expected, precision)

    Expected: -24
    Received: -23.99

    Expected precision:    2
    Expected difference: < 0.005
    Received difference:   0.010000000000001563

      75 |         expect(FontSizeCalculator.convertPowerPointToWebSize(0)).toBe(0);
      76 |         expect(FontSizeCalculator.convertPowerPointToWebSize(-1200)).toBeCloseTo(-16.00, 2);
    > 77 |         expect(FontSizeCalculator.convertPowerPointToWebSize('-1800')).toBeCloseTo(-24.00, 2);
         |                                                                        ^
      78 |       });
      79 |
      80 |       it('should handle scientific notation', () => {

      at Object.<anonymous> (tests/__tests__/font-size-calculator-comprehensive.test.ts:77:72)

  ● FontSizeCalculator - Comprehensive Test Suite › convertPowerPointToWebSize › Edge Cases › should handle scientific notation

    expect(received).toBeCloseTo(expected, precision)

    Expected: 24
    Received: 23.99

    Expected precision:    2
    Expected difference: < 0.005
    Received difference:   0.010000000000001563

      80 |       it('should handle scientific notation', () => {
      81 |         expect(FontSizeCalculator.convertPowerPointToWebSize('1.2e3')).toBeCloseTo(16.00, 2);
    > 82 |         expect(FontSizeCalculator.convertPowerPointToWebSize('1.8e3')).toBeCloseTo(24.00, 2);
         |                                                                        ^
      83 |         expect(FontSizeCalculator.convertPowerPointToWebSize(1.5e4)).toBeCloseTo(199.95, 2);
      84 |       });
      85 |

      at Object.<anonymous> (tests/__tests__/font-size-calculator-comprehensive.test.ts:82:72)

  ● FontSizeCalculator - Comprehensive Test Suite › convertPowerPointToWebSize › Rounding Behavior › should round to 2 decimal places using ROUND_HALF_UP

    expect(received).toBe(expected) // Object.is equality

    Expected: 16.07
    Received: 16.06

      103 |         roundingCases.forEach(({ input, expected }) => {
      104 |           const result = FontSizeCalculator.convertPowerPointToWebSize(input);
    > 105 |           expect(result).toBe(expected);
          |                          ^
      106 |         });
      107 |       });
      108 |

      at tests/__tests__/font-size-calculator-comprehensive.test.ts:105:26
          at Array.forEach (<anonymous>)
      at Object.<anonymous> (tests/__tests__/font-size-calculator-comprehensive.test.ts:103:23)

  ● FontSizeCalculator - Comprehensive Test Suite › convertPowerPointToWebSize › Rounding Behavior › should handle exact half values consistently

    expect(received).toBeCloseTo(expected, precision)

    Expected: 25
    Received: 24.99

    Expected precision:    2
    Expected difference: < 0.005
    Received difference:   0.010000000000001563

      116 |         halfValueCases.forEach(({ input, expected }) => {
      117 |           const result = FontSizeCalculator.convertPowerPointToWebSize(input);
    > 118 |           expect(result).toBeCloseTo(expected, 2);
          |                          ^
      119 |         });
      120 |       });
      121 |

      at tests/__tests__/font-size-calculator-comprehensive.test.ts:118:26
          at Array.forEach (<anonymous>)
      at Object.<anonymous> (tests/__tests__/font-size-calculator-comprehensive.test.ts:116:24)

  ● FontSizeCalculator - Comprehensive Test Suite › convertPowerPointToWebSize › Error Handling › should handle special numeric values

    expect(received).toThrow()

    Received function did not throw

      145 |
      146 |       it('should handle special numeric values', () => {
    > 147 |         expect(() => FontSizeCalculator.convertPowerPointToWebSize(NaN)).toThrow();
          |                                                                          ^
      148 |         expect(() => FontSizeCalculator.convertPowerPointToWebSize(Infinity)).toThrow();
      149 |         expect(() => FontSizeCalculator.convertPowerPointToWebSize(-Infinity)).toThrow();
      150 |       });

      at Object.<anonymous> (tests/__tests__/font-size-calculator-comprehensive.test.ts:147:74)

  ● FontSizeCalculator - Comprehensive Test Suite › batchConvert › should convert arrays of font sizes correctly

    expect(received).toBeCloseTo(expected, precision)

    Expected: 24
    Received: 23.99

    Expected precision:    2
    Expected difference: < 0.005
    Received difference:   0.010000000000001563

      161 |       expect(results[1]).toBeCloseTo(18.66, 2);
      162 |       expect(results[2]).toBeCloseTo(21.33, 2);
    > 163 |       expect(results[3]).toBeCloseTo(24.00, 2);
          |                          ^
      164 |     });
      165 |
      166 |     it('should handle mixed string and number inputs', () => {

      at Object.<anonymous> (tests/__tests__/font-size-calculator-comprehensive.test.ts:163:26)

  ● FontSizeCalculator - Comprehensive Test Suite › batchConvert › should handle mixed string and number inputs

    expect(received).toBeCloseTo(expected, precision)

    Expected: 24
    Received: 23.99

    Expected precision:    2
    Expected difference: < 0.005
    Received difference:   0.010000000000001563

      172 |       expect(results[1]).toBeCloseTo(18.66, 2);
      173 |       expect(results[2]).toBeCloseTo(21.33, 2);
    > 174 |       expect(results[3]).toBeCloseTo(24.00, 2);
          |                          ^
      175 |     });
      176 |
      177 |     it('should handle empty arrays', () => {

      at Object.<anonymous> (tests/__tests__/font-size-calculator-comprehensive.test.ts:174:26)

  ● FontSizeCalculator - Comprehensive Test Suite › batchConvert › should handle large arrays efficiently

    expect(received).toBeCloseTo(expected, precision)

    Expected: 29.33
    Received: 29.31

    Expected precision:    2
    Expected difference: < 0.005
    Received difference:   0.019999999999999574

      189 |       expect(endTime - startTime).toBeLessThan(100); // Should be fast
      190 |       expect(results[0]).toBeCloseTo(16.00, 2);
    > 191 |       expect(results[999]).toBeCloseTo(29.33, 2);
          |                            ^
      192 |     });
      193 |
      194 |     it('should propagate errors for invalid inputs in batch', () => {

      at Object.<anonymous> (tests/__tests__/font-size-calculator-comprehensive.test.ts:191:28)

  ● FontSizeCalculator - Comprehensive Test Suite › Real-world Usage Scenarios › should handle typical PowerPoint document processing

    expect(received).toBeCloseTo(expected, precision)

    Expected: 32
    Received: 31.99

    Expected precision:    2
    Expected difference: < 0.005
    Received difference:   0.010000000000001563

      354 |       expect(convertedSizes[0]).toBeCloseTo(16.00, 2);  // 12pt -> 16px
      355 |       expect(convertedSizes[1]).toBeCloseTo(18.66, 2);  // 14pt -> 18.66px
    > 356 |       expect(convertedSizes[4]).toBeCloseTo(32.00, 2);  // 24pt -> 32px
          |                                 ^
      357 |       expect(convertedSizes[6]).toBeCloseTo(48.00, 2);  // 36pt -> 48px
      358 |       
      359 |       // All should be valid sizes

      at Object.<anonymous> (tests/__tests__/font-size-calculator-comprehensive.test.ts:356:33)

  ● FontSizeCalculator - Comprehensive Test Suite › Performance and Memory › should handle large batch conversions efficiently

    expect(received).toBeCloseTo(expected, precision)

    Expected: 80
    Received: 79.97

    Expected precision:    2
    Expected difference: < 0.005
    Received difference:   0.030000000000001137

      416 |       // Verify some results
      417 |       expect(results[0]).toBeCloseTo(13.33, 2);      // 1000 -> 13.33
    > 418 |       expect(results[4999]).toBeCloseTo(80.00, 2);   // 5999 -> 80.00
          |                             ^
      419 |       expect(results[9999]).toBeCloseTo(146.66, 2);  // 10999 -> 146.66
      420 |     });
      421 |

      at Object.<anonymous> (tests/__tests__/font-size-calculator-comprehensive.test.ts:418:29)

FAIL tests/__tests__/color-utils-comprehensive.test.ts
  ● ColorUtils - Comprehensive Test Suite › toRgba - Color Format Normalization › Hex Color Conversion › should handle hex colors without # prefix

    expect(received).toBe(expected) // Object.is equality

    Expected: "rgba(255,0,0,1)"
    Received: "rgba(0,0,0,1)"

      33 |
      34 |       it('should handle hex colors without # prefix', () => {
    > 35 |         expect(ColorUtils.toRgba('FF0000')).toBe('rgba(255,0,0,1)');
         |                                             ^
      36 |         expect(ColorUtils.toRgba('00FF00')).toBe('rgba(0,255,0,1)');
      37 |         expect(ColorUtils.toRgba('F00')).toBe('rgba(255,0,0,1)');
      38 |       });

      at Object.<anonymous> (tests/__tests__/color-utils-comprehensive.test.ts:35:45)

  ● ColorUtils - Comprehensive Test Suite › toRgba - Color Format Normalization › Hex Color Conversion › should handle invalid hex colors

    expect(received).toBe(expected) // Object.is equality

    Expected: "rgba(0,0,0,1)"
    Received: "rgba(18,52,5,1)"

      40 |       it('should handle invalid hex colors', () => {
      41 |         expect(ColorUtils.toRgba('#GGGGGG')).toBe('rgba(0,0,0,1)');
    > 42 |         expect(ColorUtils.toRgba('#12345')).toBe('rgba(0,0,0,1)');
         |                                             ^
      43 |         expect(ColorUtils.toRgba('#XXXXXXXXX')).toBe('rgba(0,0,0,1)');
      44 |       });
      45 |

      at Object.<anonymous> (tests/__tests__/color-utils-comprehensive.test.ts:42:45)

  ● ColorUtils - Comprehensive Test Suite › toRgba - Color Format Normalization › RGB Color Conversion › should handle malformed rgb with alpha

    expect(received).toBe(expected) // Object.is equality

    Expected: "rgba(255,0,0,0.5)"
    Received: "rgba(0,0,0,1)"

      66 |
      67 |       it('should handle malformed rgb with alpha', () => {
    > 68 |         expect(ColorUtils.toRgba('rgb(255,0,0,0.5)')).toBe('rgba(255,0,0,0.5)');
         |                                                       ^
      69 |         expect(ColorUtils.toRgba('rgb(255,0,0,1)')).toBe('rgba(255,0,0,1)');
      70 |         expect(ColorUtils.toRgba('rgb(255,0,0,0)')).toBe('rgba(255,0,0,0)');
      71 |       });

      at Object.<anonymous> (tests/__tests__/color-utils-comprehensive.test.ts:68:55)

  ● ColorUtils - Comprehensive Test Suite › toRgba - Color Format Normalization › RGB Color Conversion › should handle invalid rgb colors

    expect(received).toBe(expected) // Object.is equality

    Expected: "rgba(-1,0,0,1)"
    Received: "rgba(0,0,0,1)"

      73 |       it('should handle invalid rgb colors', () => {
      74 |         expect(ColorUtils.toRgba('rgb(256,0,0)')).toBe('rgba(256,0,0,1)');
    > 75 |         expect(ColorUtils.toRgba('rgb(-1,0,0)')).toBe('rgba(-1,0,0,1)');
         |                                                  ^
      76 |         expect(ColorUtils.toRgba('rgb(a,b,c)')).toBe('rgba(0,0,0,1)');
      77 |       });
      78 |     });

      at Object.<anonymous> (tests/__tests__/color-utils-comprehensive.test.ts:75:50)

  ● ColorUtils - Comprehensive Test Suite › HSL Color Conversion › hslToRgb › should handle mixed colors

    expect(received).toBeCloseTo(expected, precision)

    Expected: 128
    Received: 127

    Expected precision:    0
    Expected difference: < 0.5
    Received difference:   1

      195 |       it('should handle mixed colors', () => {
      196 |         const rgb = ColorUtils.hslToRgb(0.75, 0.5, 0.5);
    > 197 |         expect(rgb.r).toBeCloseTo(128, 0);
          |                       ^
      198 |         expect(rgb.g).toBeCloseTo(64, 0);
      199 |         expect(rgb.b).toBeCloseTo(192, 0);
      200 |       });

      at Object.<anonymous> (tests/__tests__/color-utils-comprehensive.test.ts:197:23)

  ● ColorUtils - Comprehensive Test Suite › HSL Color Conversion › should maintain round-trip accuracy between RGB and HSL

    expect(received).toBeCloseTo(expected, precision)

    Expected: 127.5
    Received: 128

    Expected precision:    0
    Expected difference: < 0.5
    Received difference:   0.5

      211 |         const hsl = ColorUtils.rgbToHsl(r, g, b);
      212 |         const rgb = ColorUtils.hslToRgb(hsl.h, hsl.s, hsl.l);
    > 213 |         expect(rgb.r).toBeCloseTo(r * 255, 0);
          |                       ^
      214 |         expect(rgb.g).toBeCloseTo(g * 255, 0);
      215 |         expect(rgb.b).toBeCloseTo(b * 255, 0);
      216 |       });

      at tests/__tests__/color-utils-comprehensive.test.ts:213:23
          at Array.forEach (<anonymous>)
      at Object.<anonymous> (tests/__tests__/color-utils-comprehensive.test.ts:210:18)

  ● ColorUtils - Comprehensive Test Suite › Preset Colors › should get extended preset colors

    expect(received).toBe(expected) // Object.is equality

    Expected: "#C71585"
    Received: null

      403 |       expect(ColorUtils.getPresetColor('aliceBlue')).toBe('#F0F8FF');
      404 |       expect(ColorUtils.getPresetColor('antiqueWhite')).toBe('#FAEBD7');
    > 405 |       expect(ColorUtils.getPresetColor('mediumVioletRed')).toBe('#C71585');
          |                                                            ^
      406 |       expect(ColorUtils.getPresetColor('darkSlateGray')).toBe('#2F4F4F');
      407 |     });
      408 |

      at Object.<anonymous> (tests/__tests__/color-utils-comprehensive.test.ts:405:60)

  ● ColorUtils - Comprehensive Test Suite › Error Handling and Edge Cases › should handle invalid transformations gracefully

    expect(received).toBe(expected) // Object.is equality

    Expected: "invalid"
    Received: "rgba(0,0,0,1)"

      464 |
      465 |     it('should handle invalid transformations gracefully', () => {
    > 466 |       expect(ColorUtils.applyShade('invalid', 0.5)).toBe('invalid');
          |                                                     ^
      467 |       expect(ColorUtils.applyTint('invalid', 0.5)).toBe('invalid');
      468 |       expect(ColorUtils.applyAlpha('invalid', 0.5)).toBe('invalid');
      469 |     });

      at Object.<anonymous> (tests/__tests__/color-utils-comprehensive.test.ts:466:53)

FAIL tests/__tests__/services/ErrorHandling.test.ts
  ● Error Handling Service Unit Tests › Performance and Memory › should create errors efficiently

    expect(received).toBeLessThan(expected)

    Expected: < 100
    Received:   113.07983299999978

      537 |       const duration = endTime - startTime;
      538 |       
    > 539 |       expect(duration).toBeLessThan(100); // Should complete in less than 100ms
          |                        ^
      540 |     });
      541 |   });
      542 | });

      at Object.<anonymous> (tests/__tests__/services/ErrorHandling.test.ts:539:24)

FAIL tests/__tests__/monaco-json-loader.test.tsx (6.956 s)
  ● MonacoJsonLoader Component › Data Source Handling › shows loading state during fetch

    TestingLibraryElementError: Unable to find an element with the text: Loading JSON.... This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

    Ignored nodes: comments, script, style
    [36m<body>[39m
      [36m<div>[39m
        [36m<div[39m
          [33mclass[39m=[32m"monaco-json-loader"[39m
        [36m>[39m
          [36m<div[39m
            [33mclass[39m=[32m"loader-header"[39m
            [33mstyle[39m=[32m"display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px; padding: 10px; background-color: rgb(245, 245, 245); border-radius: 4px;"[39m
          [36m>[39m
            [36m<div[39m
              [33mclass[39m=[32m"source-info"[39m
            [36m/>[39m
            [36m<div[39m
              [33mclass[39m=[32m"header-actions"[39m
              [33mstyle[39m=[32m"display: flex; gap: 10px;"[39m
            [36m>[39m
              [36m<button[39m
                [33mdisabled[39m=[32m""[39m
                [33mstyle[39m=[32m"padding: 6px 12px; background-color: rgb(255, 152, 0); color: white; border-radius: 4px; cursor: not-allowed; font-size: 12px;"[39m
              [36m>[39m
                [0m�� Copy[0m
              [36m</button>[39m
              [36m<button[39m
                [33mdisabled[39m=[32m""[39m
                [33mstyle[39m=[32m"padding: 6px 12px; background-color: rgb(76, 175, 80); color: white; border-radius: 4px; cursor: not-allowed; font-size: 12px;"[39m
              [36m>[39m
                [0m�� Download[0m
              [36m</button>[39m
            [36m</div>[39m
          [36m</div>[39m
          [36m<div[39m
            [33mclass[39m=[32m"loading-indicator"[39m
            [33mstyle[39m=[32m"display: flex; align-items: center; justify-content: center; padding: 40px; background-color: rgb(249, 249, 249); border: 1px solid rgb(221, 221, 221); border-radius: 4px; margin-bottom: 10px;"[39m
          [36m>[39m
            [36m<div[39m
              [33mclass[39m=[32m"spinner"[39m
              [33mstyle[39m=[32m"width: 20px; height: 20px; border: 2px solid rgb(204, 204, 204); border-top: 2px solid rgb(33, 150, 243); border-radius: 50%; animation: spin 1s linear infinite; margin-right: 10px;"[39m
            [36m/>[39m
            [0mDownloading... (Attempt 1/3)[0m
          [36m</div>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      144 |       render(<MonacoJsonLoader source={source} />);
      145 |       
    > 146 |       expect(screen.getByText('Loading JSON...')).toBeInTheDocument();
          |                     ^
      147 |       
      148 |       // Resolve the promise
      149 |       resolvePromise!({

      at Object.getElementError (node_modules/@testing-library/dom/dist/config.js:37:19)
      at node_modules/@testing-library/dom/dist/query-helpers.js:76:38
      at node_modules/@testing-library/dom/dist/query-helpers.js:52:17
      at node_modules/@testing-library/dom/dist/query-helpers.js:95:19
      at Object.<anonymous> (tests/__tests__/monaco-json-loader.test.tsx:146:21)

  ● MonacoJsonLoader Component › Data Source Handling › handles fetch errors

    Unable to find an element with the text: ❌ Loading Error. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

    Ignored nodes: comments, script, style
    [36m<body>[39m
      [36m<div>[39m
        [36m<div[39m
          [33mclass[39m=[32m"monaco-json-loader"[39m
        [36m>[39m
          [36m<div[39m
            [33mclass[39m=[32m"loader-header"[39m
            [33mstyle[39m=[32m"display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px; padding: 10px; background-color: rgb(245, 245, 245); border-radius: 4px;"[39m
          [36m>[39m
            [36m<div[39m
              [33mclass[39m=[32m"source-info"[39m
            [36m/>[39m
            [36m<div[39m
              [33mclass[39m=[32m"header-actions"[39m
              [33mstyle[39m=[32m"display: flex; gap: 10px;"[39m
            [36m>[39m
              [36m<button[39m
                [33mdisabled[39m=[32m""[39m
                [33mstyle[39m=[32m"padding: 6px 12px; background-color: rgb(255, 152, 0); color: white; border-radius: 4px; cursor: not-allowed; font-size: 12px;"[39m
              [36m>[39m
                [0m�� Copy[0m
              [36m</button>[39m
              [36m<button[39m
                [33mdisabled[39m=[32m""[39m
                [33mstyle[39m=[32m"padding: 6px 12px; background-color: rgb(76, 175, 80); color: white; border-radius: 4px; cursor: not-allowed; font-size: 12px;"[39m
              [36m>[39m
                [0m�� Download[0m
              [36m</button>[39m
            [36m</div>[39m
          [36m</div>[39m
          [36m<div[39m
            [33mclass[39m=[32m"loading-indicator"[39m
            [33mstyle[39m=[32m"display: flex; align-items: center; justify-content: center; padding: 40px; background-color: rgb(249, 249, 249); border: 1px solid rgb(221, 221, 221); border-radius: 4px; margin-bottom: 10px;"[39m
          [36m>[39m
            [36m<div[39m
              [33mclass[39m=[32m"spinner"[39m
              [33mstyle[39m=[32m"width: 20px; height: 20px; border: 2px solid rgb(204, 204, 204); border-top: 2px solid rgb(33, 150, 243); border-radius: 50%; animation: spin 1s linear infinite; margin-right: 10px;"[39m
            [36m/>[39m
            [0mDownloading... (Attempt 1/3)[0m
          [36m</div>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      168 |       render(<MonacoJsonLoader source={source} />);
      169 |       
    > 170 |       await waitFor(() => {
          |                    ^
      171 |         expect(screen.getByText('❌ Loading Error')).toBeInTheDocument();
      172 |         expect(screen.getByText(/Network error/)).toBeInTheDocument();
      173 |         expect(screen.getByText('�� Retry Loading')).toBeInTheDocument();

      at waitForWrapper (node_modules/@testing-library/dom/dist/wait-for.js:163:27)
      at Object.<anonymous> (tests/__tests__/monaco-json-loader.test.tsx:170:20)

  ● MonacoJsonLoader Component › Large File Handling › handles large files with optimized loading

    Unable to find an element with the text: /Processing.*MB file/. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

    Ignored nodes: comments, script, style
    [36m<body>[39m
      [36m<div>[39m
        [36m<div[39m
          [33mclass[39m=[32m"monaco-json-loader"[39m
        [36m>[39m
          [36m<div[39m
            [33mclass[39m=[32m"loader-header"[39m
            [33mstyle[39m=[32m"display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px; padding: 10px; background-color: rgb(245, 245, 245); border-radius: 4px;"[39m
          [36m>[39m
            [36m<div[39m
              [33mclass[39m=[32m"source-info"[39m
            [36m>[39m
              [36m<div[39m
                [33mstyle[39m=[32m"font-size: 14px; color: rgb(102, 102, 102);"[39m
              [36m>[39m
                [36m<div>[39m
                  [36m<strong>[39m
                    [0mSource:[0m
                  [36m</strong>[39m
                  [0m [0m
                  [0mCDN URL[0m
                [36m</div>[39m
                [36m<div[39m
                  [33mstyle[39m=[32m"font-size: 12px; margin-top: 4px; display: flex; align-items: center; gap: 8px;"[39m
                [36m>[39m
                  [36m<strong>[39m
                    [0mURL:[0m
                  [36m</strong>[39m
                  [36m<div[39m
                    [33mstyle[39m=[32m"flex: 1 1 0%; font-family: monospace; font-size: 11px; background-color: rgb(248, 249, 250); border: 1px solid rgb(233, 236, 239); border-radius: 3px; padding: 2px 6px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap; max-width: 300px; cursor: pointer;"[39m
                    [33mtitle[39m=[32m"https://example.com/large-file.json"[39m
                  [36m>[39m
                    [0mhttps://example.com/large-file.json[0m
                  [36m</div>[39m
                  [36m<button[39m
                    [33mstyle[39m=[32m"padding: 2px 6px; background-color: rgb(0, 123, 255); color: white; border-radius: 3px; font-size: 10px; cursor: pointer;"[39m
                  [36m>[39m
                    [0m��[0m
                  [36m</button>[39m
                [36m</div>[39m
              [36m</div>[39m
            [36m</div>[39m
            [36m<div[39m
              [33mclass[39m=[32m"header-actions"[39m
              [33mstyle[39m=[32m"display: flex; gap: 10px;"[39m
            [36m>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; background-color: rgb(33, 150, 243); color: white; border-radius: 4px; cursor: pointer; font-size: 12px;"[39m
              [36m>[39m
                [0m�� Refresh[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; background-color: rgb(255, 152, 0); color: white; border-radius: 4px; cursor: pointer; font-size: 12px;"[39m
              [36m>[39m
                [0m�� Copy[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; background-color: rgb(76, 175, 80); color: white; border-radius: 4px; cursor: pointer; font-size: 12px;"[39m
              [36m>[39m
                [0m�� Download[0m
              [36m</button>[39m
            [36m</div>[39m
          [36m</div>[39m
          [36m<div[39m
            [33mdata-height[39m=[32m"600px"[39m
            [33mdata-readonly[39m=[32m"false"[39m
            [33mdata-testid[39m=[32m"monaco-json-editor"[39m
          [36m>[39m
            [36m<div>[39m
              [0mMonaco JSON Editor[0m
            [36m</div>[39m
            [36m<button>[39m
              [0mCopy[0m
            [36m</button>[39m
            [36m<pre>[39m
              [0m{
      "slides": [
        {
          "id": 1,
          "content": "Test slide"
        }
      ],
      "themeColors": [
        "#FF0000"
      ],
      "size": {
        "width": 1920,
        "height": 1080
      }
    }[0m
            [36m</pre>[39m
          [36m</div>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      192 |       render(<MonacoJsonLoader source={source} />);
      193 |       
    > 194 |       await waitFor(() => {
          |                    ^
      195 |         expect(screen.getByText(/Processing.*MB file/)).toBeInTheDocument();
      196 |       });
      197 |

      at waitForWrapper (node_modules/@testing-library/dom/dist/wait-for.js:163:27)
      at Object.<anonymous> (tests/__tests__/monaco-json-loader.test.tsx:194:20)

  ● MonacoJsonLoader Component › Large File Handling › shows progress for large file downloads

    Unable to find an element with the text: /Processing.*MB file/. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

    Ignored nodes: comments, script, style
    [36m<body>[39m
      [36m<div>[39m
        [36m<div[39m
          [33mclass[39m=[32m"monaco-json-loader"[39m
        [36m>[39m
          [36m<div[39m
            [33mclass[39m=[32m"loader-header"[39m
            [33mstyle[39m=[32m"display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px; padding: 10px; background-color: rgb(245, 245, 245); border-radius: 4px;"[39m
          [36m>[39m
            [36m<div[39m
              [33mclass[39m=[32m"source-info"[39m
            [36m>[39m
              [36m<div[39m
                [33mstyle[39m=[32m"font-size: 14px; color: rgb(102, 102, 102);"[39m
              [36m>[39m
                [36m<div>[39m
                  [36m<strong>[39m
                    [0mSource:[0m
                  [36m</strong>[39m
                  [0m [0m
                  [0mCDN URL[0m
                [36m</div>[39m
                [36m<div[39m
                  [33mstyle[39m=[32m"font-size: 12px; margin-top: 4px; display: flex; align-items: center; gap: 8px;"[39m
                [36m>[39m
                  [36m<strong>[39m
                    [0mURL:[0m
                  [36m</strong>[39m
                  [36m<div[39m
                    [33mstyle[39m=[32m"flex: 1 1 0%; font-family: monospace; font-size: 11px; background-color: rgb(248, 249, 250); border: 1px solid rgb(233, 236, 239); border-radius: 3px; padding: 2px 6px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap; max-width: 300px; cursor: pointer;"[39m
                    [33mtitle[39m=[32m"https://example.com/large-file.json"[39m
                  [36m>[39m
                    [0mhttps://example.com/large-file.json[0m
                  [36m</div>[39m
                  [36m<button[39m
                    [33mstyle[39m=[32m"padding: 2px 6px; background-color: rgb(0, 123, 255); color: white; border-radius: 3px; font-size: 10px; cursor: pointer;"[39m
                  [36m>[39m
                    [0m��[0m
                  [36m</button>[39m
                [36m</div>[39m
              [36m</div>[39m
            [36m</div>[39m
            [36m<div[39m
              [33mclass[39m=[32m"header-actions"[39m
              [33mstyle[39m=[32m"display: flex; gap: 10px;"[39m
            [36m>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; background-color: rgb(33, 150, 243); color: white; border-radius: 4px; cursor: pointer; font-size: 12px;"[39m
              [36m>[39m
                [0m�� Refresh[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; background-color: rgb(255, 152, 0); color: white; border-radius: 4px; cursor: pointer; font-size: 12px;"[39m
              [36m>[39m
                [0m�� Copy[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; background-color: rgb(76, 175, 80); color: white; border-radius: 4px; cursor: pointer; font-size: 12px;"[39m
              [36m>[39m
                [0m�� Download[0m
              [36m</button>[39m
            [36m</div>[39m
          [36m</div>[39m
          [36m<div[39m
            [33mdata-height[39m=[32m"600px"[39m
            [33mdata-readonly[39m=[32m"false"[39m
            [33mdata-testid[39m=[32m"monaco-json-editor"[39m
          [36m>[39m
            [36m<div>[39m
              [0mMonaco JSON Editor[0m
            [36m</div>[39m
            [36m<button>[39m
              [0mCopy[0m
            [36m</button>[39m
            [36m<pre>[39m
              [0m{
      "slides": [
        {
          "id": 1,
          "content": "Test slide"
        }
      ],
      "themeColors": [
        "#FF0000"
      ],
      "size": {
        "width": 1920,
        "height": 1080
      }
    }[0m
            [36m</pre>[39m
          [36m</div>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      216 |       render(<MonacoJsonLoader source={source} />);
      217 |       
    > 218 |       await waitFor(() => {
          |                    ^
      219 |         expect(screen.getByText(/Processing.*MB file/)).toBeInTheDocument();
      220 |       });
      221 |     });

      at waitForWrapper (node_modules/@testing-library/dom/dist/wait-for.js:163:27)
      at Object.<anonymous> (tests/__tests__/monaco-json-loader.test.tsx:218:20)

  ● MonacoJsonLoader Component › Retry Mechanism › implements retry logic for failed requests

    Unable to find an element by: [data-testid="monaco-json-editor"]

    Ignored nodes: comments, script, style
    [36m<body>[39m
      [36m<div>[39m
        [36m<div[39m
          [33mclass[39m=[32m"monaco-json-loader"[39m
        [36m>[39m
          [36m<div[39m
            [33mclass[39m=[32m"loader-header"[39m
            [33mstyle[39m=[32m"display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px; padding: 10px; background-color: rgb(245, 245, 245); border-radius: 4px;"[39m
          [36m>[39m
            [36m<div[39m
              [33mclass[39m=[32m"source-info"[39m
            [36m/>[39m
            [36m<div[39m
              [33mclass[39m=[32m"header-actions"[39m
              [33mstyle[39m=[32m"display: flex; gap: 10px;"[39m
            [36m>[39m
              [36m<button[39m
                [33mdisabled[39m=[32m""[39m
                [33mstyle[39m=[32m"padding: 6px 12px; background-color: rgb(255, 152, 0); color: white; border-radius: 4px; cursor: not-allowed; font-size: 12px;"[39m
              [36m>[39m
                [0m�� Copy[0m
              [36m</button>[39m
              [36m<button[39m
                [33mdisabled[39m=[32m""[39m
                [33mstyle[39m=[32m"padding: 6px 12px; background-color: rgb(76, 175, 80); color: white; border-radius: 4px; cursor: not-allowed; font-size: 12px;"[39m
              [36m>[39m
                [0m�� Download[0m
              [36m</button>[39m
            [36m</div>[39m
          [36m</div>[39m
          [36m<div[39m
            [33mclass[39m=[32m"loading-indicator"[39m
            [33mstyle[39m=[32m"display: flex; align-items: center; justify-content: center; padding: 40px; background-color: rgb(249, 249, 249); border: 1px solid rgb(221, 221, 221); border-radius: 4px; margin-bottom: 10px;"[39m
          [36m>[39m
            [36m<div[39m
              [33mclass[39m=[32m"spinner"[39m
              [33mstyle[39m=[32m"width: 20px; height: 20px; border: 2px solid rgb(204, 204, 204); border-top: 2px solid rgb(33, 150, 243); border-radius: 50%; animation: spin 1s linear infinite; margin-right: 10px;"[39m
            [36m/>[39m
            [0mDownloading... (Attempt 1/3)[0m
          [36m</div>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      240 |       render(<MonacoJsonLoader source={source} />);
      241 |       
    > 242 |       await waitFor(() => {
          |                    ^
      243 |         expect(screen.getByTestId('monaco-json-editor')).toBeInTheDocument();
      244 |       });
      245 |

      at waitForWrapper (node_modules/@testing-library/dom/dist/wait-for.js:163:27)
      at Object.<anonymous> (tests/__tests__/monaco-json-loader.test.tsx:242:20)

  ● MonacoJsonLoader Component › Retry Mechanism › handles timeout errors with detailed message

    Unable to find an element with the text: /Request timeout/. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

    Ignored nodes: comments, script, style
    [36m<body>[39m
      [36m<div>[39m
        [36m<div[39m
          [33mclass[39m=[32m"monaco-json-loader"[39m
        [36m>[39m
          [36m<div[39m
            [33mclass[39m=[32m"loader-header"[39m
            [33mstyle[39m=[32m"display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px; padding: 10px; background-color: rgb(245, 245, 245); border-radius: 4px;"[39m
          [36m>[39m
            [36m<div[39m
              [33mclass[39m=[32m"source-info"[39m
            [36m/>[39m
            [36m<div[39m
              [33mclass[39m=[32m"header-actions"[39m
              [33mstyle[39m=[32m"display: flex; gap: 10px;"[39m
            [36m>[39m
              [36m<button[39m
                [33mdisabled[39m=[32m""[39m
                [33mstyle[39m=[32m"padding: 6px 12px; background-color: rgb(255, 152, 0); color: white; border-radius: 4px; cursor: not-allowed; font-size: 12px;"[39m
              [36m>[39m
                [0m�� Copy[0m
              [36m</button>[39m
              [36m<button[39m
                [33mdisabled[39m=[32m""[39m
                [33mstyle[39m=[32m"padding: 6px 12px; background-color: rgb(76, 175, 80); color: white; border-radius: 4px; cursor: not-allowed; font-size: 12px;"[39m
              [36m>[39m
                [0m�� Download[0m
              [36m</button>[39m
            [36m</div>[39m
          [36m</div>[39m
          [36m<div[39m
            [33mclass[39m=[32m"loading-indicator"[39m
            [33mstyle[39m=[32m"display: flex; align-items: center; justify-content: center; padding: 40px; background-color: rgb(249, 249, 249); border: 1px solid rgb(221, 221, 221); border-radius: 4px; margin-bottom: 10px;"[39m
          [36m>[39m
            [36m<div[39m
              [33mclass[39m=[32m"spinner"[39m
              [33mstyle[39m=[32m"width: 20px; height: 20px; border: 2px solid rgb(204, 204, 204); border-top: 2px solid rgb(33, 150, 243); border-radius: 50%; animation: spin 1s linear infinite; margin-right: 10px;"[39m
            [36m/>[39m
            [0mDownloading... (Attempt 1/3)[0m
          [36m</div>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      260 |       render(<MonacoJsonLoader source={source} />);
      261 |       
    > 262 |       await waitFor(() => {
          |                    ^
      263 |         expect(screen.getByText(/Request timeout/)).toBeInTheDocument();
      264 |         expect(screen.getByText(/Large file size/)).toBeInTheDocument();
      265 |       });

      at waitForWrapper (node_modules/@testing-library/dom/dist/wait-for.js:163:27)
      at Object.<anonymous> (tests/__tests__/monaco-json-loader.test.tsx:262:20)

  ● MonacoJsonLoader Component › Retry Mechanism › allows manual retry from error state

    Unable to find an element with the text: �� Retry Loading. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

    Ignored nodes: comments, script, style
    [36m<body>[39m
      [36m<div>[39m
        [36m<div[39m
          [33mclass[39m=[32m"monaco-json-loader"[39m
        [36m>[39m
          [36m<div[39m
            [33mclass[39m=[32m"loader-header"[39m
            [33mstyle[39m=[32m"display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px; padding: 10px; background-color: rgb(245, 245, 245); border-radius: 4px;"[39m
          [36m>[39m
            [36m<div[39m
              [33mclass[39m=[32m"source-info"[39m
            [36m/>[39m
            [36m<div[39m
              [33mclass[39m=[32m"header-actions"[39m
              [33mstyle[39m=[32m"display: flex; gap: 10px;"[39m
            [36m>[39m
              [36m<button[39m
                [33mdisabled[39m=[32m""[39m
                [33mstyle[39m=[32m"padding: 6px 12px; background-color: rgb(255, 152, 0); color: white; border-radius: 4px; cursor: not-allowed; font-size: 12px;"[39m
              [36m>[39m
                [0m�� Copy[0m
              [36m</button>[39m
              [36m<button[39m
                [33mdisabled[39m=[32m""[39m
                [33mstyle[39m=[32m"padding: 6px 12px; background-color: rgb(76, 175, 80); color: white; border-radius: 4px; cursor: not-allowed; font-size: 12px;"[39m
              [36m>[39m
                [0m�� Download[0m
              [36m</button>[39m
            [36m</div>[39m
          [36m</div>[39m
          [36m<div[39m
            [33mclass[39m=[32m"loading-indicator"[39m
            [33mstyle[39m=[32m"display: flex; align-items: center; justify-content: center; padding: 40px; background-color: rgb(249, 249, 249); border: 1px solid rgb(221, 221, 221); border-radius: 4px; margin-bottom: 10px;"[39m
          [36m>[39m
            [36m<div[39m
              [33mclass[39m=[32m"spinner"[39m
              [33mstyle[39m=[32m"width: 20px; height: 20px; border: 2px solid rgb(204, 204, 204); border-top: 2px solid rgb(33, 150, 243); border-radius: 50%; animation: spin 1s linear infinite; margin-right: 10px;"[39m
            [36m/>[39m
            [0mDownloading... (Attempt 1/3)[0m
          [36m</div>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      276 |       render(<MonacoJsonLoader source={source} />);
      277 |       
    > 278 |       await waitFor(() => {
          |                    ^
      279 |         expect(screen.getByText('�� Retry Loading')).toBeInTheDocument();
      280 |       });
      281 |

      at waitForWrapper (node_modules/@testing-library/dom/dist/wait-for.js:163:27)
      at Object.<anonymous> (tests/__tests__/monaco-json-loader.test.tsx:278:20)

  ● MonacoJsonLoader Component › Copy and Download Actions › downloads JSON file

    createRoot(...): Target container is not a DOM element.

      451 |       });
      452 |
    > 453 |       render(<MonacoJsonLoader source={source} />);
          |             ^
      454 |       
      455 |       await waitFor(() => {
      456 |         const downloadButton = screen.getByText('�� Download');

      at createRoot (node_modules/react-dom/cjs/react-dom.development.js:29384:11)
      at Object.createRoot$1 [as createRoot] (node_modules/react-dom/cjs/react-dom.development.js:29855:10)
      at Object.exports.createRoot (node_modules/react-dom/client.js:12:16)
      at createConcurrentRoot (node_modules/@testing-library/react/dist/pure.js:147:27)
      at render (node_modules/@testing-library/react/dist/pure.js:266:12)
      at Object.<anonymous> (tests/__tests__/monaco-json-loader.test.tsx:453:13)

  ● MonacoJsonLoader Component › JSON Parsing › handles invalid JSON gracefully

    createRoot(...): Target container is not a DOM element.

      478 |       } as Response);
      479 |
    > 480 |       render(<MonacoJsonLoader source={source} />);
          |             ^
      481 |       
      482 |       await waitFor(() => {
      483 |         expect(screen.getByText(/Invalid JSON/)).toBeInTheDocument();

      at createRoot (node_modules/react-dom/cjs/react-dom.development.js:29384:11)
      at Object.createRoot$1 [as createRoot] (node_modules/react-dom/cjs/react-dom.development.js:29855:10)
      at Object.exports.createRoot (node_modules/react-dom/client.js:12:16)
      at createConcurrentRoot (node_modules/@testing-library/react/dist/pure.js:147:27)
      at render (node_modules/@testing-library/react/dist/pure.js:266:12)
      at Object.<anonymous> (tests/__tests__/monaco-json-loader.test.tsx:480:13)

  ● MonacoJsonLoader Component › JSON Parsing › handles malformed JSON in editor

    createRoot(...): Target container is not a DOM element.

      497 |       } as Response);
      498 |
    > 499 |       render(<MonacoJsonLoader source={source} />);
          |             ^
      500 |       
      501 |       await waitFor(() => {
      502 |         expect(screen.getByTestId('monaco-json-editor')).toBeInTheDocument();

      at createRoot (node_modules/react-dom/cjs/react-dom.development.js:29384:11)
      at Object.createRoot$1 [as createRoot] (node_modules/react-dom/cjs/react-dom.development.js:29855:10)
      at Object.exports.createRoot (node_modules/react-dom/client.js:12:16)
      at createConcurrentRoot (node_modules/@testing-library/react/dist/pure.js:147:27)
      at render (node_modules/@testing-library/react/dist/pure.js:266:12)
      at Object.<anonymous> (tests/__tests__/monaco-json-loader.test.tsx:499:13)

  ● MonacoJsonLoader Component › Component Updates › reloads when source changes

    createRoot(...): Target container is not a DOM element.

      517 |       };
      518 |
    > 519 |       const { rerender } = render(<MonacoJsonLoader source={source1} />);
          |                                  ^
      520 |       
      521 |       await waitFor(() => {
      522 |         expect(screen.getByText(/"slides"/)).toBeInTheDocument();

      at createRoot (node_modules/react-dom/cjs/react-dom.development.js:29384:11)
      at Object.createRoot$1 [as createRoot] (node_modules/react-dom/cjs/react-dom.development.js:29855:10)
      at Object.exports.createRoot (node_modules/react-dom/client.js:12:16)
      at createConcurrentRoot (node_modules/@testing-library/react/dist/pure.js:147:27)
      at render (node_modules/@testing-library/react/dist/pure.js:266:12)
      at Object.<anonymous> (tests/__tests__/monaco-json-loader.test.tsx:519:34)

  ● MonacoJsonLoader Component › Component Updates › handles readonly prop changes

    createRoot(...): Target container is not a DOM element.

      536 |       };
      537 |
    > 538 |       const { rerender } = render(<MonacoJsonLoader source={source} readonly={true} />);
          |                                  ^
      539 |       
      540 |       await waitFor(() => {
      541 |         const editor = screen.getByTestId('monaco-json-editor');

      at createRoot (node_modules/react-dom/cjs/react-dom.development.js:29384:11)
      at Object.createRoot$1 [as createRoot] (node_modules/react-dom/cjs/react-dom.development.js:29855:10)
      at Object.exports.createRoot (node_modules/react-dom/client.js:12:16)
      at createConcurrentRoot (node_modules/@testing-library/react/dist/pure.js:147:27)
      at render (node_modules/@testing-library/react/dist/pure.js:266:12)
      at Object.<anonymous> (tests/__tests__/monaco-json-loader.test.tsx:538:34)

  ● MonacoJsonLoader Component › Error Boundary › handles component errors gracefully

    expect(received).not.toThrow()

    Error name:    "Error"
    Error message: "createRoot(...): Target container is not a DOM element."

          560 |
          561 |       expect(() => {
        > 562 |         render(<MonacoJsonLoader source={source} />);
              |               ^
          563 |       }).not.toThrow();
          564 |     });
          565 |

      at createRoot (node_modules/react-dom/cjs/react-dom.development.js:29384:11)
      at Object.createRoot$1 [as createRoot] (node_modules/react-dom/cjs/react-dom.development.js:29855:10)
      at Object.exports.createRoot (node_modules/react-dom/client.js:12:16)
      at createConcurrentRoot (node_modules/@testing-library/react/dist/pure.js:147:27)
      at render (node_modules/@testing-library/react/dist/pure.js:266:12)
      at tests/__tests__/monaco-json-loader.test.tsx:562:15
      at Object.<anonymous> (node_modules/expect/build/index.js:1824:9)
      at Object.throwingMatcher [as toThrow] (node_modules/expect/build/index.js:2231:93)
      at Object.<anonymous> (tests/__tests__/monaco-json-loader.test.tsx:563:14)
      at Object.<anonymous> (tests/__tests__/monaco-json-loader.test.tsx:563:14)

  ● MonacoJsonLoader Component › Error Boundary › handles missing clipboard API

    createRoot(...): Target container is not a DOM element.

      573 |       };
      574 |
    > 575 |       render(<MonacoJsonLoader source={source} />);
          |             ^
      576 |       
      577 |       await waitFor(() => {
      578 |         const copyButton = screen.getByText('�� Copy');

      at createRoot (node_modules/react-dom/cjs/react-dom.development.js:29384:11)
      at Object.createRoot$1 [as createRoot] (node_modules/react-dom/cjs/react-dom.development.js:29855:10)
      at Object.exports.createRoot (node_modules/react-dom/client.js:12:16)
      at createConcurrentRoot (node_modules/@testing-library/react/dist/pure.js:147:27)
      at render (node_modules/@testing-library/react/dist/pure.js:266:12)
      at Object.<anonymous> (tests/__tests__/monaco-json-loader.test.tsx:575:13)

  ● MonacoJsonLoader Component › Accessibility › disables buttons during loading

    createRoot(...): Target container is not a DOM element.

      604 |       mockFetch.mockReturnValue(fetchPromise as Promise<Response>);
      605 |
    > 606 |       render(<MonacoJsonLoader source={source} />);
          |             ^
      607 |       
      608 |       expect(screen.getByText('�� Copy')).toBeDisabled();
      609 |       expect(screen.getByText('�� Download')).toBeDisabled();

      at createRoot (node_modules/react-dom/cjs/react-dom.development.js:29384:11)
      at Object.createRoot$1 [as createRoot] (node_modules/react-dom/cjs/react-dom.development.js:29855:10)
      at Object.exports.createRoot (node_modules/react-dom/client.js:12:16)
      at createConcurrentRoot (node_modules/@testing-library/react/dist/pure.js:147:27)
      at render (node_modules/@testing-library/react/dist/pure.js:266:12)
      at Object.<anonymous> (tests/__tests__/monaco-json-loader.test.tsx:606:13)

  ● MonacoJsonLoader Component › Accessibility › provides proper button states

    createRoot(...): Target container is not a DOM element.

      617 |       };
      618 |
    > 619 |       render(<MonacoJsonLoader source={source} />);
          |             ^
      620 |       
      621 |       await waitFor(() => {
      622 |         expect(screen.getByText('�� Copy')).not.toBeDisabled();

      at createRoot (node_modules/react-dom/cjs/react-dom.development.js:29384:11)
      at Object.createRoot$1 [as createRoot] (node_modules/react-dom/cjs/react-dom.development.js:29855:10)
      at Object.exports.createRoot (node_modules/react-dom/client.js:12:16)
      at createConcurrentRoot (node_modules/@testing-library/react/dist/pure.js:147:27)
      at render (node_modules/@testing-library/react/dist/pure.js:266:12)
      at Object.<anonymous> (tests/__tests__/monaco-json-loader.test.tsx:619:13)

FAIL tests/__tests__/monaco-json-editor.test.tsx (10.922 s)
  ● MonacoJsonEditor Component › Basic Rendering › renders editor with data

    Unable to find an element by: [data-testid="monaco-editor"]

    Ignored nodes: comments, script, style
    [36m<body>[39m
      [36m<div>[39m
        [36m<div[39m
          [33mstyle[39m=[32m"height: 100%; width: 100%; display: flex; flex-direction: column; background-color: rgb(255, 255, 255); border: 1px solid rgb(225, 229, 233); border-radius: 8px; overflow: hidden;"[39m
        [36m>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"display: flex; align-items: center; justify-content: space-between; padding: 12px 16px; border-bottom: 1px solid rgb(225, 229, 233); background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%); box-shadow: 0 2px 4px rgba(0,0,0,0.05);"[39m
          [36m>[39m
            [36m<h3[39m
              [33mstyle[39m=[32m"font-size: 16px; font-weight: bold; color: rgb(51, 51, 51); margin: 0px; display: flex; align-items: center; gap: 8px;"[39m
            [36m>[39m
              [0m��️ Monaco JSON Editor[0m
            [36m</h3>[39m
            [36m<div[39m
              [33mstyle[39m=[32m"display: flex; gap: 8px; align-items: center;"[39m
            [36m>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"格式化 JSON (Ctrl+Shift+I)"[39m
              [36m>[39m
                [0m✨ 格式化[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"搜索 (Ctrl+Shift+F)"[39m
              [36m>[39m
                [0m�� 搜索[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"折叠所有"[39m
              [36m>[39m
                [0m�� 折叠[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"展开所有"[39m
              [36m>[39m
                [0m�� 展开[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(209, 68, 36); color: white; border: 1px solid transparent; border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"复制 JSON 到剪贴板"[39m
              [36m>[39m
                [0m�� 复制[0m
              [36m</button>[39m
            [36m</div>[39m
          [36m</div>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"flex: 1 1 0%; position: relative;"[39m
          [36m>[39m
            [36m<div[39m
              [33mstyle[39m=[32m"display: flex; align-items: center; justify-content: center; height: 400px; color: rgb(102, 102, 102); font-size: 14px; flex-direction: column; gap: 12px;"[39m
            [36m>[39m
              [36m<div[39m
                [33mstyle[39m=[32m"font-size: 24px;"[39m
              [36m>[39m
                [0m⚡[0m
              [36m</div>[39m
              [36m<div>[39m
                [0m正在加载 Monaco Editor...[0m
              [36m</div>[39m
            [36m</div>[39m
          [36m</div>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"padding: 8px 16px; background-color: rgb(248, 249, 250); border-top: 1px solid rgb(225, 229, 233); font-size: 12px; color: rgb(102, 102, 102); display: flex; gap: 16px; flex-wrap: wrap;"[39m
          [36m>[39m
            [36m<span>[39m
              [36m<strong>[39m
                [0m�� 数据统计:[0m
              [36m</strong>[39m
            [36m</span>[39m
            [36m<span>[39m
              [0m幻灯片: [0m
              [0m1[0m
              [0m 个[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m主题颜色: [0m
              [0m2[0m
              [0m 个[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m尺寸: [0m
              [0m1920 × 1080[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m字符数: [0m
              [0m113[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m大小: [0m
              [0m0.1[0m
              [0m KB[0m
            [36m</span>[39m
          [36m</div>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

       96 |       render(<MonacoJsonEditor data={sampleData} />);
       97 |       
    >  98 |       await waitFor(() => {
          |                    ^
       99 |         expect(screen.getByTestId('monaco-editor')).toBeInTheDocument();
      100 |       });
      101 |     });

      at waitForWrapper (node_modules/@testing-library/dom/dist/wait-for.js:163:27)
      at Object.<anonymous> (tests/__tests__/monaco-json-editor.test.tsx:98:20)

  ● MonacoJsonEditor Component › Basic Rendering › renders with default props

    Unable to find an element by: [data-testid="monaco-editor"]

    Ignored nodes: comments, script, style
    [36m<body>[39m
      [36m<div>[39m
        [36m<div[39m
          [33mstyle[39m=[32m"height: 100%; width: 100%; display: flex; flex-direction: column; background-color: rgb(255, 255, 255); border: 1px solid rgb(225, 229, 233); border-radius: 8px; overflow: hidden;"[39m
        [36m>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"display: flex; align-items: center; justify-content: space-between; padding: 12px 16px; border-bottom: 1px solid rgb(225, 229, 233); background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%); box-shadow: 0 2px 4px rgba(0,0,0,0.05);"[39m
          [36m>[39m
            [36m<h3[39m
              [33mstyle[39m=[32m"font-size: 16px; font-weight: bold; color: rgb(51, 51, 51); margin: 0px; display: flex; align-items: center; gap: 8px;"[39m
            [36m>[39m
              [0m��️ Monaco JSON Editor[0m
            [36m</h3>[39m
            [36m<div[39m
              [33mstyle[39m=[32m"display: flex; gap: 8px; align-items: center;"[39m
            [36m>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"格式化 JSON (Ctrl+Shift+I)"[39m
              [36m>[39m
                [0m✨ 格式化[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"搜索 (Ctrl+Shift+F)"[39m
              [36m>[39m
                [0m�� 搜索[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"折叠所有"[39m
              [36m>[39m
                [0m�� 折叠[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"展开所有"[39m
              [36m>[39m
                [0m�� 展开[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(209, 68, 36); color: white; border: 1px solid transparent; border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"复制 JSON 到剪贴板"[39m
              [36m>[39m
                [0m�� 复制[0m
              [36m</button>[39m
            [36m</div>[39m
          [36m</div>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"flex: 1 1 0%; position: relative;"[39m
          [36m>[39m
            [36m<div[39m
              [33mstyle[39m=[32m"display: flex; align-items: center; justify-content: center; height: 400px; color: rgb(102, 102, 102); font-size: 14px; flex-direction: column; gap: 12px;"[39m
            [36m>[39m
              [36m<div[39m
                [33mstyle[39m=[32m"font-size: 24px;"[39m
              [36m>[39m
                [0m⚡[0m
              [36m</div>[39m
              [36m<div>[39m
                [0m正在加载 Monaco Editor...[0m
              [36m</div>[39m
            [36m</div>[39m
          [36m</div>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"padding: 8px 16px; background-color: rgb(248, 249, 250); border-top: 1px solid rgb(225, 229, 233); font-size: 12px; color: rgb(102, 102, 102); display: flex; gap: 16px; flex-wrap: wrap;"[39m
          [36m>[39m
            [36m<span>[39m
              [36m<strong>[39m
                [0m�� 数据统计:[0m
              [36m</strong>[39m
            [36m</span>[39m
            [36m<span>[39m
              [0m幻灯片: [0m
              [0m1[0m
              [0m 个[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m主题颜色: [0m
              [0m2[0m
              [0m 个[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m尺寸: [0m
              [0m1920 × 1080[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m字符数: [0m
              [0m113[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m大小: [0m
              [0m0.1[0m
              [0m KB[0m
            [36m</span>[39m
          [36m</div>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      116 |       render(<MonacoJsonEditor data={sampleData} />);
      117 |       
    > 118 |       await waitFor(() => {
          |                    ^
      119 |         const editor = screen.getByTestId('monaco-editor');
      120 |         expect(editor).toHaveAttribute('data-readonly', 'true');
      121 |         expect(editor).toHaveAttribute('data-theme', 'vs');

      at waitForWrapper (node_modules/@testing-library/dom/dist/wait-for.js:163:27)
      at Object.<anonymous> (tests/__tests__/monaco-json-editor.test.tsx:118:20)

  ● MonacoJsonEditor Component › Props Handling › applies readOnly prop correctly

    Unable to find an element by: [data-testid="monaco-editor"]

    Ignored nodes: comments, script, style
    [36m<body>[39m
      [36m<div>[39m
        [36m<div[39m
          [33mstyle[39m=[32m"height: 100%; width: 100%; display: flex; flex-direction: column; background-color: rgb(255, 255, 255); border: 1px solid rgb(225, 229, 233); border-radius: 8px; overflow: hidden;"[39m
        [36m>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"display: flex; align-items: center; justify-content: space-between; padding: 12px 16px; border-bottom: 1px solid rgb(225, 229, 233); background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%); box-shadow: 0 2px 4px rgba(0,0,0,0.05);"[39m
          [36m>[39m
            [36m<h3[39m
              [33mstyle[39m=[32m"font-size: 16px; font-weight: bold; color: rgb(51, 51, 51); margin: 0px; display: flex; align-items: center; gap: 8px;"[39m
            [36m>[39m
              [0m��️ Monaco JSON Editor[0m
            [36m</h3>[39m
            [36m<div[39m
              [33mstyle[39m=[32m"display: flex; gap: 8px; align-items: center;"[39m
            [36m>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"格式化 JSON (Ctrl+Shift+I)"[39m
              [36m>[39m
                [0m✨ 格式化[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"搜索 (Ctrl+Shift+F)"[39m
              [36m>[39m
                [0m�� 搜索[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"折叠所有"[39m
              [36m>[39m
                [0m�� 折叠[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"展开所有"[39m
              [36m>[39m
                [0m�� 展开[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(209, 68, 36); color: white; border: 1px solid transparent; border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"复制 JSON 到剪贴板"[39m
              [36m>[39m
                [0m�� 复制[0m
              [36m</button>[39m
            [36m</div>[39m
          [36m</div>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"flex: 1 1 0%; position: relative;"[39m
          [36m>[39m
            [36m<div[39m
              [33mstyle[39m=[32m"display: flex; align-items: center; justify-content: center; height: 400px; color: rgb(102, 102, 102); font-size: 14px; flex-direction: column; gap: 12px;"[39m
            [36m>[39m
              [36m<div[39m
                [33mstyle[39m=[32m"font-size: 24px;"[39m
              [36m>[39m
                [0m⚡[0m
              [36m</div>[39m
              [36m<div>[39m
                [0m正在加载 Monaco Editor...[0m
              [36m</div>[39m
            [36m</div>[39m
          [36m</div>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"padding: 8px 16px; background-color: rgb(248, 249, 250); border-top: 1px solid rgb(225, 229, 233); font-size: 12px; color: rgb(102, 102, 102); display: flex; gap: 16px; flex-wrap: wrap;"[39m
          [36m>[39m
            [36m<span>[39m
              [36m<strong>[39m
                [0m�� 数据统计:[0m
              [36m</strong>[39m
            [36m</span>[39m
            [36m<span>[39m
              [0m幻灯片: [0m
              [0m1[0m
              [0m 个[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m主题颜色: [0m
              [0m2[0m
              [0m 个[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m尺寸: [0m
              [0m1920 × 1080[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m字符数: [0m
              [0m113[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m大小: [0m
              [0m0.1[0m
              [0m KB[0m
            [36m</span>[39m
          [36m</div>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      139 |       render(<MonacoJsonEditor data={sampleData} readOnly={false} />);
      140 |       
    > 141 |       await waitFor(() => {
          |                    ^
      142 |         const editor = screen.getByTestId('monaco-editor');
      143 |         expect(editor).toHaveAttribute('data-readonly', 'false');
      144 |       });

      at waitForWrapper (node_modules/@testing-library/dom/dist/wait-for.js:163:27)
      at Object.<anonymous> (tests/__tests__/monaco-json-editor.test.tsx:141:20)

  ● MonacoJsonEditor Component › Props Handling › applies theme prop correctly

    Unable to find an element by: [data-testid="monaco-editor"]

    Ignored nodes: comments, script, style
    [36m<body>[39m
      [36m<div>[39m
        [36m<div[39m
          [33mstyle[39m=[32m"height: 100%; width: 100%; display: flex; flex-direction: column; background-color: rgb(255, 255, 255); border: 1px solid rgb(225, 229, 233); border-radius: 8px; overflow: hidden;"[39m
        [36m>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"display: flex; align-items: center; justify-content: space-between; padding: 12px 16px; border-bottom: 1px solid rgb(225, 229, 233); background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%); box-shadow: 0 2px 4px rgba(0,0,0,0.05);"[39m
          [36m>[39m
            [36m<h3[39m
              [33mstyle[39m=[32m"font-size: 16px; font-weight: bold; color: rgb(51, 51, 51); margin: 0px; display: flex; align-items: center; gap: 8px;"[39m
            [36m>[39m
              [0m��️ Monaco JSON Editor[0m
            [36m</h3>[39m
            [36m<div[39m
              [33mstyle[39m=[32m"display: flex; gap: 8px; align-items: center;"[39m
            [36m>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"格式化 JSON (Ctrl+Shift+I)"[39m
              [36m>[39m
                [0m✨ 格式化[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"搜索 (Ctrl+Shift+F)"[39m
              [36m>[39m
                [0m�� 搜索[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"折叠所有"[39m
              [36m>[39m
                [0m�� 折叠[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"展开所有"[39m
              [36m>[39m
                [0m�� 展开[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(209, 68, 36); color: white; border: 1px solid transparent; border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"复制 JSON 到剪贴板"[39m
              [36m>[39m
                [0m�� 复制[0m
              [36m</button>[39m
            [36m</div>[39m
          [36m</div>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"flex: 1 1 0%; position: relative;"[39m
          [36m>[39m
            [36m<div[39m
              [33mstyle[39m=[32m"display: flex; align-items: center; justify-content: center; height: 400px; color: rgb(102, 102, 102); font-size: 14px; flex-direction: column; gap: 12px;"[39m
            [36m>[39m
              [36m<div[39m
                [33mstyle[39m=[32m"font-size: 24px;"[39m
              [36m>[39m
                [0m⚡[0m
              [36m</div>[39m
              [36m<div>[39m
                [0m正在加载 Monaco Editor...[0m
              [36m</div>[39m
            [36m</div>[39m
          [36m</div>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"padding: 8px 16px; background-color: rgb(248, 249, 250); border-top: 1px solid rgb(225, 229, 233); font-size: 12px; color: rgb(102, 102, 102); display: flex; gap: 16px; flex-wrap: wrap;"[39m
          [36m>[39m
            [36m<span>[39m
              [36m<strong>[39m
                [0m�� 数据统计:[0m
              [36m</strong>[39m
            [36m</span>[39m
            [36m<span>[39m
              [0m幻灯片: [0m
              [0m1[0m
              [0m 个[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m主题颜色: [0m
              [0m2[0m
              [0m 个[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m尺寸: [0m
              [0m1920 × 1080[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m字符数: [0m
              [0m113[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m大小: [0m
              [0m0.1[0m
              [0m KB[0m
            [36m</span>[39m
          [36m</div>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      148 |       render(<MonacoJsonEditor data={sampleData} theme="dark" />);
      149 |       
    > 150 |       await waitFor(() => {
          |                    ^
      151 |         const editor = screen.getByTestId('monaco-editor');
      152 |         expect(editor).toHaveAttribute('data-theme', 'vs-dark');
      153 |       });

      at waitForWrapper (node_modules/@testing-library/dom/dist/wait-for.js:163:27)
      at Object.<anonymous> (tests/__tests__/monaco-json-editor.test.tsx:150:20)

  ● MonacoJsonEditor Component › JSON Formatting › formats JSON data correctly

    Unable to find an element by: [data-testid="monaco-editor"]

    Ignored nodes: comments, script, style
    [36m<body>[39m
      [36m<div>[39m
        [36m<div[39m
          [33mstyle[39m=[32m"height: 100%; width: 100%; display: flex; flex-direction: column; background-color: rgb(255, 255, 255); border: 1px solid rgb(225, 229, 233); border-radius: 8px; overflow: hidden;"[39m
        [36m>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"display: flex; align-items: center; justify-content: space-between; padding: 12px 16px; border-bottom: 1px solid rgb(225, 229, 233); background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%); box-shadow: 0 2px 4px rgba(0,0,0,0.05);"[39m
          [36m>[39m
            [36m<h3[39m
              [33mstyle[39m=[32m"font-size: 16px; font-weight: bold; color: rgb(51, 51, 51); margin: 0px; display: flex; align-items: center; gap: 8px;"[39m
            [36m>[39m
              [0m��️ Monaco JSON Editor[0m
            [36m</h3>[39m
            [36m<div[39m
              [33mstyle[39m=[32m"display: flex; gap: 8px; align-items: center;"[39m
            [36m>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"格式化 JSON (Ctrl+Shift+I)"[39m
              [36m>[39m
                [0m✨ 格式化[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"搜索 (Ctrl+Shift+F)"[39m
              [36m>[39m
                [0m�� 搜索[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"折叠所有"[39m
              [36m>[39m
                [0m�� 折叠[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"展开所有"[39m
              [36m>[39m
                [0m�� 展开[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(209, 68, 36); color: white; border: 1px solid transparent; border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"复制 JSON 到剪贴板"[39m
              [36m>[39m
                [0m�� 复制[0m
              [36m</button>[39m
            [36m</div>[39m
          [36m</div>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"flex: 1 1 0%; position: relative;"[39m
          [36m>[39m
            [36m<div[39m
              [33mstyle[39m=[32m"display: flex; align-items: center; justify-content: center; height: 400px; color: rgb(102, 102, 102); font-size: 14px; flex-direction: column; gap: 12px;"[39m
            [36m>[39m
              [36m<div[39m
                [33mstyle[39m=[32m"font-size: 24px;"[39m
              [36m>[39m
                [0m⚡[0m
              [36m</div>[39m
              [36m<div>[39m
                [0m正在加载 Monaco Editor...[0m
              [36m</div>[39m
            [36m</div>[39m
          [36m</div>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"padding: 8px 16px; background-color: rgb(248, 249, 250); border-top: 1px solid rgb(225, 229, 233); font-size: 12px; color: rgb(102, 102, 102); display: flex; gap: 16px; flex-wrap: wrap;"[39m
          [36m>[39m
            [36m<span>[39m
              [36m<strong>[39m
                [0m�� 数据统计:[0m
              [36m</strong>[39m
            [36m</span>[39m
            [36m<span>[39m
              [0m幻灯片: [0m
              [0m1[0m
              [0m 个[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m主题颜色: [0m
              [0m2[0m
              [0m 个[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m尺寸: [0m
              [0m1920 × 1080[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m字符数: [0m
              [0m113[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m大小: [0m
              [0m0.1[0m
              [0m KB[0m
            [36m</span>[39m
          [36m</div>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      311 |       render(<MonacoJsonEditor data={sampleData} />);
      312 |       
    > 313 |       await waitFor(() => {
          |                    ^
      314 |         const editor = screen.getByTestId('monaco-editor');
      315 |         const expectedJson = JSON.stringify(sampleData, null, 2);
      316 |         expect(editor).toHaveAttribute('data-value', expectedJson);

      at waitForWrapper (node_modules/@testing-library/dom/dist/wait-for.js:163:27)
      at Object.<anonymous> (tests/__tests__/monaco-json-editor.test.tsx:313:20)

  ● MonacoJsonEditor Component › JSON Formatting › handles invalid JSON data gracefully

    TypeError: Converting circular structure to JSON
        --> starting at object with constructor 'Object'
        --- property 'self' closes the circle
        at JSON.stringify (<anonymous>)

      389 |           尺寸: {data?.size ? `${data.size.width} × ${data.size.height}` : '未知'}
      390 |         </span>
    > 391 |         <span>字符数: {JSON.stringify(data).length.toLocaleString()}</span>
          |                          ^
      392 |         <span>大小: {(JSON.stringify(data).length / 1024).toFixed(1)} KB</span>
      393 |       </div>
      394 |     </div>

      at MonacoJsonEditor (components/MonacoJsonEditor.tsx:391:26)
      at renderWithHooks (node_modules/react-dom/cjs/react-dom.development.js:15486:18)
      at updateFunctionComponent (node_modules/react-dom/cjs/react-dom.development.js:19617:20)
      at beginWork (node_modules/react-dom/cjs/react-dom.development.js:21640:16)
      at beginWork$1 (node_modules/react-dom/cjs/react-dom.development.js:27465:14)
      at performUnitOfWork (node_modules/react-dom/cjs/react-dom.development.js:26599:12)
      at workLoopSync (node_modules/react-dom/cjs/react-dom.development.js:26505:5)
      at renderRootSync (node_modules/react-dom/cjs/react-dom.development.js:26473:7)
      at recoverFromConcurrentError (node_modules/react-dom/cjs/react-dom.development.js:25889:20)
      at performConcurrentWorkOnRoot (node_modules/react-dom/cjs/react-dom.development.js:25789:22)
      at flushActQueue (node_modules/react/cjs/react.development.js:2667:24)
      at act (node_modules/react/cjs/react.development.js:2582:11)
      at node_modules/@testing-library/react/dist/act-compat.js:47:25
      at renderRoot (node_modules/@testing-library/react/dist/pure.js:190:26)
      at render (node_modules/@testing-library/react/dist/pure.js:292:10)
      at Object.<anonymous> (tests/__tests__/monaco-json-editor.test.tsx:324:13)

  ● MonacoJsonEditor Component › JSON Formatting › formats complex nested data

    Unable to find an element by: [data-testid="monaco-editor"]

    Ignored nodes: comments, script, style
    [36m<body>[39m
      [36m<div>[39m
        [36m<div[39m
          [33mstyle[39m=[32m"height: 100%; width: 100%; display: flex; flex-direction: column; background-color: rgb(255, 255, 255); border: 1px solid rgb(225, 229, 233); border-radius: 8px; overflow: hidden;"[39m
        [36m>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"display: flex; align-items: center; justify-content: space-between; padding: 12px 16px; border-bottom: 1px solid rgb(225, 229, 233); background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%); box-shadow: 0 2px 4px rgba(0,0,0,0.05);"[39m
          [36m>[39m
            [36m<h3[39m
              [33mstyle[39m=[32m"font-size: 16px; font-weight: bold; color: rgb(51, 51, 51); margin: 0px; display: flex; align-items: center; gap: 8px;"[39m
            [36m>[39m
              [0m��️ Monaco JSON Editor[0m
            [36m</h3>[39m
            [36m<div[39m
              [33mstyle[39m=[32m"display: flex; gap: 8px; align-items: center;"[39m
            [36m>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"格式化 JSON (Ctrl+Shift+I)"[39m
              [36m>[39m
                [0m✨ 格式化[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"搜索 (Ctrl+Shift+F)"[39m
              [36m>[39m
                [0m�� 搜索[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"折叠所有"[39m
              [36m>[39m
                [0m�� 折叠[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"展开所有"[39m
              [36m>[39m
                [0m�� 展开[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(209, 68, 36); color: white; border: 1px solid transparent; border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"复制 JSON 到剪贴板"[39m
              [36m>[39m
                [0m�� 复制[0m
              [36m</button>[39m
            [36m</div>[39m
          [36m</div>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"flex: 1 1 0%; position: relative;"[39m
          [36m>[39m
            [36m<div[39m
              [33mstyle[39m=[32m"display: flex; align-items: center; justify-content: center; height: 400px; color: rgb(102, 102, 102); font-size: 14px; flex-direction: column; gap: 12px;"[39m
            [36m>[39m
              [36m<div[39m
                [33mstyle[39m=[32m"font-size: 24px;"[39m
              [36m>[39m
                [0m⚡[0m
              [36m</div>[39m
              [36m<div>[39m
                [0m正在加载 Monaco Editor...[0m
              [36m</div>[39m
            [36m</div>[39m
          [36m</div>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"padding: 8px 16px; background-color: rgb(248, 249, 250); border-top: 1px solid rgb(225, 229, 233); font-size: 12px; color: rgb(102, 102, 102); display: flex; gap: 16px; flex-wrap: wrap;"[39m
          [36m>[39m
            [36m<span>[39m
              [36m<strong>[39m
                [0m�� 数据统计:[0m
              [36m</strong>[39m
            [36m</span>[39m
            [36m<span>[39m
              [0m幻灯片: [0m
              [0m0[0m
              [0m 个[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m主题颜色: [0m
              [0m0[0m
              [0m 个[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m尺寸: [0m
              [0m未知[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m字符数: [0m
              [0m80[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m大小: [0m
              [0m0.1[0m
              [0m KB[0m
            [36m</span>[39m
          [36m</div>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      343 |       render(<MonacoJsonEditor data={complexData} />);
      344 |       
    > 345 |       await waitFor(() => {
          |                    ^
      346 |         const editor = screen.getByTestId('monaco-editor');
      347 |         const expectedJson = JSON.stringify(complexData, null, 2);
      348 |         expect(editor).toHaveAttribute('data-value', expectedJson);

      at waitForWrapper (node_modules/@testing-library/dom/dist/wait-for.js:163:27)
      at Object.<anonymous> (tests/__tests__/monaco-json-editor.test.tsx:345:20)

  ● MonacoJsonEditor Component › Keyboard Shortcuts › sets up keyboard shortcuts on mount

    Unable to find an element by: [data-testid="monaco-editor"]

    Ignored nodes: comments, script, style
    [36m<body>[39m
      [36m<div>[39m
        [36m<div[39m
          [33mstyle[39m=[32m"height: 100%; width: 100%; display: flex; flex-direction: column; background-color: rgb(255, 255, 255); border: 1px solid rgb(225, 229, 233); border-radius: 8px; overflow: hidden;"[39m
        [36m>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"display: flex; align-items: center; justify-content: space-between; padding: 12px 16px; border-bottom: 1px solid rgb(225, 229, 233); background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%); box-shadow: 0 2px 4px rgba(0,0,0,0.05);"[39m
          [36m>[39m
            [36m<h3[39m
              [33mstyle[39m=[32m"font-size: 16px; font-weight: bold; color: rgb(51, 51, 51); margin: 0px; display: flex; align-items: center; gap: 8px;"[39m
            [36m>[39m
              [0m��️ Monaco JSON Editor[0m
            [36m</h3>[39m
            [36m<div[39m
              [33mstyle[39m=[32m"display: flex; gap: 8px; align-items: center;"[39m
            [36m>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"格式化 JSON (Ctrl+Shift+I)"[39m
              [36m>[39m
                [0m✨ 格式化[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"搜索 (Ctrl+Shift+F)"[39m
              [36m>[39m
                [0m�� 搜索[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"折叠所有"[39m
              [36m>[39m
                [0m�� 折叠[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"展开所有"[39m
              [36m>[39m
                [0m�� 展开[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(209, 68, 36); color: white; border: 1px solid transparent; border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"复制 JSON 到剪贴板"[39m
              [36m>[39m
                [0m�� 复制[0m
              [36m</button>[39m
            [36m</div>[39m
          [36m</div>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"flex: 1 1 0%; position: relative;"[39m
          [36m>[39m
            [36m<div[39m
              [33mstyle[39m=[32m"display: flex; align-items: center; justify-content: center; height: 400px; color: rgb(102, 102, 102); font-size: 14px; flex-direction: column; gap: 12px;"[39m
            [36m>[39m
              [36m<div[39m
                [33mstyle[39m=[32m"font-size: 24px;"[39m
              [36m>[39m
                [0m⚡[0m
              [36m</div>[39m
              [36m<div>[39m
                [0m正在加载 Monaco Editor...[0m
              [36m</div>[39m
            [36m</div>[39m
          [36m</div>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"padding: 8px 16px; background-color: rgb(248, 249, 250); border-top: 1px solid rgb(225, 229, 233); font-size: 12px; color: rgb(102, 102, 102); display: flex; gap: 16px; flex-wrap: wrap;"[39m
          [36m>[39m
            [36m<span>[39m
              [36m<strong>[39m
                [0m�� 数据统计:[0m
              [36m</strong>[39m
            [36m</span>[39m
            [36m<span>[39m
              [0m幻灯片: [0m
              [0m1[0m
              [0m 个[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m主题颜色: [0m
              [0m2[0m
              [0m 个[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m尺寸: [0m
              [0m1920 × 1080[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m字符数: [0m
              [0m113[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m大小: [0m
              [0m0.1[0m
              [0m KB[0m
            [36m</span>[39m
          [36m</div>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      392 |       render(<MonacoJsonEditor data={sampleData} />);
      393 |       
    > 394 |       await waitFor(() => {
          |                    ^
      395 |         expect(screen.getByTestId('monaco-editor')).toBeInTheDocument();
      396 |         // The Monaco editor mock should have received addCommand calls
      397 |       });

      at waitForWrapper (node_modules/@testing-library/dom/dist/wait-for.js:163:27)
      at Object.<anonymous> (tests/__tests__/monaco-json-editor.test.tsx:394:20)

  ● MonacoJsonEditor Component › Component Lifecycle › updates editor content when data changes

    Unable to find an element by: [data-testid="monaco-editor"]

    Ignored nodes: comments, script, style
    [36m<body>[39m
      [36m<div>[39m
        [36m<div[39m
          [33mstyle[39m=[32m"height: 100%; width: 100%; display: flex; flex-direction: column; background-color: rgb(255, 255, 255); border: 1px solid rgb(225, 229, 233); border-radius: 8px; overflow: hidden;"[39m
        [36m>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"display: flex; align-items: center; justify-content: space-between; padding: 12px 16px; border-bottom: 1px solid rgb(225, 229, 233); background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%); box-shadow: 0 2px 4px rgba(0,0,0,0.05);"[39m
          [36m>[39m
            [36m<h3[39m
              [33mstyle[39m=[32m"font-size: 16px; font-weight: bold; color: rgb(51, 51, 51); margin: 0px; display: flex; align-items: center; gap: 8px;"[39m
            [36m>[39m
              [0m��️ Monaco JSON Editor[0m
            [36m</h3>[39m
            [36m<div[39m
              [33mstyle[39m=[32m"display: flex; gap: 8px; align-items: center;"[39m
            [36m>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"格式化 JSON (Ctrl+Shift+I)"[39m
              [36m>[39m
                [0m✨ 格式化[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"搜索 (Ctrl+Shift+F)"[39m
              [36m>[39m
                [0m�� 搜索[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"折叠所有"[39m
              [36m>[39m
                [0m�� 折叠[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"展开所有"[39m
              [36m>[39m
                [0m�� 展开[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(209, 68, 36); color: white; border: 1px solid transparent; border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"复制 JSON 到剪贴板"[39m
              [36m>[39m
                [0m�� 复制[0m
              [36m</button>[39m
            [36m</div>[39m
          [36m</div>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"flex: 1 1 0%; position: relative;"[39m
          [36m>[39m
            [36m<div[39m
              [33mstyle[39m=[32m"display: flex; align-items: center; justify-content: center; height: 400px; color: rgb(102, 102, 102); font-size: 14px; flex-direction: column; gap: 12px;"[39m
            [36m>[39m
              [36m<div[39m
                [33mstyle[39m=[32m"font-size: 24px;"[39m
              [36m>[39m
                [0m⚡[0m
              [36m</div>[39m
              [36m<div>[39m
                [0m正在加载 Monaco Editor...[0m
              [36m</div>[39m
            [36m</div>[39m
          [36m</div>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"padding: 8px 16px; background-color: rgb(248, 249, 250); border-top: 1px solid rgb(225, 229, 233); font-size: 12px; color: rgb(102, 102, 102); display: flex; gap: 16px; flex-wrap: wrap;"[39m
          [36m>[39m
            [36m<span>[39m
              [36m<strong>[39m
                [0m�� 数据统计:[0m
              [36m</strong>[39m
            [36m</span>[39m
            [36m<span>[39m
              [0m幻灯片: [0m
              [0m1[0m
              [0m 个[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m主题颜色: [0m
              [0m2[0m
              [0m 个[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m尺寸: [0m
              [0m1920 × 1080[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m字符数: [0m
              [0m113[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m大小: [0m
              [0m0.1[0m
              [0m KB[0m
            [36m</span>[39m
          [36m</div>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      415 |       const { rerender } = render(<MonacoJsonEditor data={sampleData} />);
      416 |       
    > 417 |       await waitFor(() => {
          |                    ^
      418 |         expect(screen.getByTestId('monaco-editor')).toBeInTheDocument();
      419 |       });
      420 |       

      at waitForWrapper (node_modules/@testing-library/dom/dist/wait-for.js:163:27)
      at Object.<anonymous> (tests/__tests__/monaco-json-editor.test.tsx:417:20)

  ● MonacoJsonEditor Component › Component Lifecycle › maintains editor configuration across re-renders

    Unable to find an element by: [data-testid="monaco-editor"]

    Ignored nodes: comments, script, style
    [36m<body>[39m
      [36m<div>[39m
        [36m<div[39m
          [33mstyle[39m=[32m"height: 100%; width: 100%; display: flex; flex-direction: column; background-color: rgb(255, 255, 255); border: 1px solid rgb(225, 229, 233); border-radius: 8px; overflow: hidden;"[39m
        [36m>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"display: flex; align-items: center; justify-content: space-between; padding: 12px 16px; border-bottom: 1px solid rgb(225, 229, 233); background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%); box-shadow: 0 2px 4px rgba(0,0,0,0.05);"[39m
          [36m>[39m
            [36m<h3[39m
              [33mstyle[39m=[32m"font-size: 16px; font-weight: bold; color: rgb(51, 51, 51); margin: 0px; display: flex; align-items: center; gap: 8px;"[39m
            [36m>[39m
              [0m��️ Monaco JSON Editor[0m
            [36m</h3>[39m
            [36m<div[39m
              [33mstyle[39m=[32m"display: flex; gap: 8px; align-items: center;"[39m
            [36m>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"格式化 JSON (Ctrl+Shift+I)"[39m
              [36m>[39m
                [0m✨ 格式化[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"搜索 (Ctrl+Shift+F)"[39m
              [36m>[39m
                [0m�� 搜索[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"折叠所有"[39m
              [36m>[39m
                [0m�� 折叠[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"展开所有"[39m
              [36m>[39m
                [0m�� 展开[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(209, 68, 36); color: white; border: 1px solid transparent; border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"复制 JSON 到剪贴板"[39m
              [36m>[39m
                [0m�� 复制[0m
              [36m</button>[39m
            [36m</div>[39m
          [36m</div>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"flex: 1 1 0%; position: relative;"[39m
          [36m>[39m
            [36m<div[39m
              [33mstyle[39m=[32m"display: flex; align-items: center; justify-content: center; height: 400px; color: rgb(102, 102, 102); font-size: 14px; flex-direction: column; gap: 12px;"[39m
            [36m>[39m
              [36m<div[39m
                [33mstyle[39m=[32m"font-size: 24px;"[39m
              [36m>[39m
                [0m⚡[0m
              [36m</div>[39m
              [36m<div>[39m
                [0m正在加载 Monaco Editor...[0m
              [36m</div>[39m
            [36m</div>[39m
          [36m</div>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"padding: 8px 16px; background-color: rgb(248, 249, 250); border-top: 1px solid rgb(225, 229, 233); font-size: 12px; color: rgb(102, 102, 102); display: flex; gap: 16px; flex-wrap: wrap;"[39m
          [36m>[39m
            [36m<span>[39m
              [36m<strong>[39m
                [0m�� 数据统计:[0m
              [36m</strong>[39m
            [36m</span>[39m
            [36m<span>[39m
              [0m幻灯片: [0m
              [0m1[0m
              [0m 个[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m主题颜色: [0m
              [0m2[0m
              [0m 个[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m尺寸: [0m
              [0m1920 × 1080[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m字符数: [0m
              [0m113[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m大小: [0m
              [0m0.1[0m
              [0m KB[0m
            [36m</span>[39m
          [36m</div>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      431 |       const { rerender } = render(<MonacoJsonEditor data={sampleData} readOnly={true} />);
      432 |       
    > 433 |       await waitFor(() => {
          |                    ^
      434 |         const editor = screen.getByTestId('monaco-editor');
      435 |         expect(editor).toHaveAttribute('data-readonly', 'true');
      436 |       });

      at waitForWrapper (node_modules/@testing-library/dom/dist/wait-for.js:163:27)
      at Object.<anonymous> (tests/__tests__/monaco-json-editor.test.tsx:433:20)

  ● MonacoJsonEditor Component › Error Handling › handles editor mount errors gracefully

    Unable to find an element by: [data-testid="monaco-editor"]

    Ignored nodes: comments, script, style
    [36m<body>[39m
      [36m<div>[39m
        [36m<div[39m
          [33mstyle[39m=[32m"height: 100%; width: 100%; display: flex; flex-direction: column; background-color: rgb(255, 255, 255); border: 1px solid rgb(225, 229, 233); border-radius: 8px; overflow: hidden;"[39m
        [36m>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"display: flex; align-items: center; justify-content: space-between; padding: 12px 16px; border-bottom: 1px solid rgb(225, 229, 233); background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%); box-shadow: 0 2px 4px rgba(0,0,0,0.05);"[39m
          [36m>[39m
            [36m<h3[39m
              [33mstyle[39m=[32m"font-size: 16px; font-weight: bold; color: rgb(51, 51, 51); margin: 0px; display: flex; align-items: center; gap: 8px;"[39m
            [36m>[39m
              [0m��️ Monaco JSON Editor[0m
            [36m</h3>[39m
            [36m<div[39m
              [33mstyle[39m=[32m"display: flex; gap: 8px; align-items: center;"[39m
            [36m>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"格式化 JSON (Ctrl+Shift+I)"[39m
              [36m>[39m
                [0m✨ 格式化[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"搜索 (Ctrl+Shift+F)"[39m
              [36m>[39m
                [0m�� 搜索[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"折叠所有"[39m
              [36m>[39m
                [0m�� 折叠[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"展开所有"[39m
              [36m>[39m
                [0m�� 展开[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(209, 68, 36); color: white; border: 1px solid transparent; border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"复制 JSON 到剪贴板"[39m
              [36m>[39m
                [0m�� 复制[0m
              [36m</button>[39m
            [36m</div>[39m
          [36m</div>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"flex: 1 1 0%; position: relative;"[39m
          [36m>[39m
            [36m<div[39m
              [33mstyle[39m=[32m"display: flex; align-items: center; justify-content: center; height: 400px; color: rgb(102, 102, 102); font-size: 14px; flex-direction: column; gap: 12px;"[39m
            [36m>[39m
              [36m<div[39m
                [33mstyle[39m=[32m"font-size: 24px;"[39m
              [36m>[39m
                [0m⚡[0m
              [36m</div>[39m
              [36m<div>[39m
                [0m正在加载 Monaco Editor...[0m
              [36m</div>[39m
            [36m</div>[39m
          [36m</div>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"padding: 8px 16px; background-color: rgb(248, 249, 250); border-top: 1px solid rgb(225, 229, 233); font-size: 12px; color: rgb(102, 102, 102); display: flex; gap: 16px; flex-wrap: wrap;"[39m
          [36m>[39m
            [36m<span>[39m
              [36m<strong>[39m
                [0m�� 数据统计:[0m
              [36m</strong>[39m
            [36m</span>[39m
            [36m<span>[39m
              [0m幻灯片: [0m
              [0m1[0m
              [0m 个[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m主题颜色: [0m
              [0m2[0m
              [0m 个[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m尺寸: [0m
              [0m1920 × 1080[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m字符数: [0m
              [0m113[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m大小: [0m
              [0m0.1[0m
              [0m KB[0m
            [36m</span>[39m
          [36m</div>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      451 |       render(<MonacoJsonEditor data={sampleData} />);
      452 |       
    > 453 |       await waitFor(() => {
          |                    ^
      454 |         expect(screen.getByTestId('monaco-editor')).toBeInTheDocument();
      455 |       });
      456 |       

      at waitForWrapper (node_modules/@testing-library/dom/dist/wait-for.js:163:27)
      at Object.<anonymous> (tests/__tests__/monaco-json-editor.test.tsx:453:20)

  ● MonacoJsonEditor Component › Accessibility › provides loading feedback for screen readers

    TestingLibraryElementError: Unable to find an element with the text: 正在初始化 Monaco Editor.... This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

    Ignored nodes: comments, script, style
    [36m<body>[39m
      [36m<div>[39m
        [36m<div[39m
          [33mstyle[39m=[32m"height: 100%; width: 100%; display: flex; flex-direction: column; background-color: rgb(255, 255, 255); border: 1px solid rgb(225, 229, 233); border-radius: 8px; overflow: hidden;"[39m
        [36m>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"display: flex; align-items: center; justify-content: space-between; padding: 12px 16px; border-bottom: 1px solid rgb(225, 229, 233); background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%); box-shadow: 0 2px 4px rgba(0,0,0,0.05);"[39m
          [36m>[39m
            [36m<h3[39m
              [33mstyle[39m=[32m"font-size: 16px; font-weight: bold; color: rgb(51, 51, 51); margin: 0px; display: flex; align-items: center; gap: 8px;"[39m
            [36m>[39m
              [0m��️ Monaco JSON Editor[0m
            [36m</h3>[39m
            [36m<div[39m
              [33mstyle[39m=[32m"display: flex; gap: 8px; align-items: center;"[39m
            [36m>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"格式化 JSON (Ctrl+Shift+I)"[39m
              [36m>[39m
                [0m✨ 格式化[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"搜索 (Ctrl+Shift+F)"[39m
              [36m>[39m
                [0m�� 搜索[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"折叠所有"[39m
              [36m>[39m
                [0m�� 折叠[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(255, 255, 255); color: rgb(51, 51, 51); border: 1px solid rgb(208, 215, 222); border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"展开所有"[39m
              [36m>[39m
                [0m�� 展开[0m
              [36m</button>[39m
              [36m<button[39m
                [33mstyle[39m=[32m"padding: 6px 12px; font-size: 13px; background-color: rgb(209, 68, 36); color: white; border: 1px solid transparent; border-radius: 4px; cursor: pointer; transition: all 0.2s ease; font-weight: 500; display: flex; align-items: center; gap: 4px;"[39m
                [33mtitle[39m=[32m"复制 JSON 到剪贴板"[39m
              [36m>[39m
                [0m�� 复制[0m
              [36m</button>[39m
            [36m</div>[39m
          [36m</div>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"flex: 1 1 0%; position: relative;"[39m
          [36m>[39m
            [36m<div[39m
              [33mstyle[39m=[32m"display: flex; align-items: center; justify-content: center; height: 400px; color: rgb(102, 102, 102); font-size: 14px; flex-direction: column; gap: 12px;"[39m
            [36m>[39m
              [36m<div[39m
                [33mstyle[39m=[32m"font-size: 24px;"[39m
              [36m>[39m
                [0m⚡[0m
              [36m</div>[39m
              [36m<div>[39m
                [0m正在加载 Monaco Editor...[0m
              [36m</div>[39m
            [36m</div>[39m
          [36m</div>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"padding: 8px 16px; background-color: rgb(248, 249, 250); border-top: 1px solid rgb(225, 229, 233); font-size: 12px; color: rgb(102, 102, 102); display: flex; gap: 16px; flex-wrap: wrap;"[39m
          [36m>[39m
            [36m<span>[39m
              [36m<strong>[39m
                [0m�� 数据统计:[0m
              [36m</strong>[39m
            [36m</span>[39m
            [36m<span>[39m
              [0m幻灯片: [0m
              [0m1[0m
              [0m 个[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m主题颜色: [0m
              [0m2[0m
              [0m 个[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m尺寸: [0m
              [0m1920 × 1080[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m字符数: [0m
              [0m113[0m
            [36m</span>[39m
            [36m<span>[39m
              [0m大小: [0m
              [0m0.1[0m
              [0m KB[0m
            [36m</span>[39m
          [36m</div>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      491 |       render(<MonacoJsonEditor data={sampleData} />);
      492 |       
    > 493 |       const loadingText = screen.getByText('正在初始化 Monaco Editor...');
          |                                  ^
      494 |       expect(loadingText).toBeInTheDocument();
      495 |     });
      496 |   });

      at Object.getElementError (node_modules/@testing-library/dom/dist/config.js:37:19)
      at node_modules/@testing-library/dom/dist/query-helpers.js:76:38
      at node_modules/@testing-library/dom/dist/query-helpers.js:52:17
      at node_modules/@testing-library/dom/dist/query-helpers.js:95:19
      at Object.<anonymous> (tests/__tests__/monaco-json-editor.test.tsx:493:34)

FAIL tests/__tests__/json-viewer.test.tsx (12.719 s)
  ● JsonViewer Component › Data Display › renders Monaco Editor when data is provided

    Unable to find an element by: [data-testid="monaco-json-editor"]

    Ignored nodes: comments, script, style
    [36m<body>[39m
      [36m<div>[39m
        [36m<div[39m
          [33mstyle[39m=[32m"height: 100%; width: 100%; display: flex; flex-direction: column; background-color: rgb(255, 255, 255);"[39m
        [36m>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"padding: 12px 16px; border-bottom: 1px solid rgb(225, 229, 233); background-color: rgb(248, 249, 250); display: flex; justify-content: center; align-items: center;"[39m
          [36m>[39m
            [36m<h3[39m
              [33mstyle[39m=[32m"margin: 0px; font-size: 16px; font-weight: bold; color: rgb(51, 51, 51);"[39m
            [36m>[39m
              [0m��️ Monaco JSON Editor[0m
            [36m</h3>[39m
          [36m</div>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"flex: 1 1 0%; overflow: hidden;"[39m
          [36m>[39m
            [36m<div[39m
              [33mdata[39m=[32m"[object Object]"[39m
              [33mdata-testid[39m=[32m"monaco-editor-mock"[39m
              [33mheight[39m=[32m"100%"[39m
              [33mreadonly[39m=[32m""[39m
              [33mtheme[39m=[32m"light"[39m
            [36m>[39m
              [0mMonaco Editor Mock[0m
            [36m</div>[39m
          [36m</div>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      81 |       render(<JsonViewer data={sampleData} onCopy={mockOnCopy} />);
      82 |       
    > 83 |       await waitFor(() => {
         |                    ^
      84 |         expect(screen.getByTestId('monaco-json-editor')).toBeInTheDocument();
      85 |       });
      86 |     });

      at waitForWrapper (node_modules/@testing-library/dom/dist/wait-for.js:163:27)
      at Object.<anonymous> (tests/__tests__/json-viewer.test.tsx:83:20)

  ● JsonViewer Component › Data Display › passes correct props to Monaco Editor

    Unable to find an element by: [data-testid="monaco-json-editor"]

    Ignored nodes: comments, script, style
    [36m<body>[39m
      [36m<div>[39m
        [36m<div[39m
          [33mstyle[39m=[32m"height: 100%; width: 100%; display: flex; flex-direction: column; background-color: rgb(255, 255, 255);"[39m
        [36m>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"padding: 12px 16px; border-bottom: 1px solid rgb(225, 229, 233); background-color: rgb(248, 249, 250); display: flex; justify-content: center; align-items: center;"[39m
          [36m>[39m
            [36m<h3[39m
              [33mstyle[39m=[32m"margin: 0px; font-size: 16px; font-weight: bold; color: rgb(51, 51, 51);"[39m
            [36m>[39m
              [0m��️ Monaco JSON Editor[0m
            [36m</h3>[39m
          [36m</div>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"flex: 1 1 0%; overflow: hidden;"[39m
          [36m>[39m
            [36m<div[39m
              [33mdata[39m=[32m"[object Object]"[39m
              [33mdata-testid[39m=[32m"monaco-editor-mock"[39m
              [33mheight[39m=[32m"100%"[39m
              [33mreadonly[39m=[32m""[39m
              [33mtheme[39m=[32m"light"[39m
            [36m>[39m
              [0mMonaco Editor Mock[0m
            [36m</div>[39m
          [36m</div>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      89 |       render(<JsonViewer data={sampleData} onCopy={mockOnCopy} />);
      90 |       
    > 91 |       await waitFor(() => {
         |                    ^
      92 |         const editor = screen.getByTestId('monaco-json-editor');
      93 |         expect(editor).toHaveAttribute('data-height', '100%');
      94 |         expect(editor).toHaveAttribute('data-readonly', 'true');

      at waitForWrapper (node_modules/@testing-library/dom/dist/wait-for.js:163:27)
      at Object.<anonymous> (tests/__tests__/json-viewer.test.tsx:91:20)

  ● JsonViewer Component › Data Display › displays the JSON data in the editor

    Unable to find an element with the text: /"slides":/. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

    Ignored nodes: comments, script, style
    [36m<body>[39m
      [36m<div>[39m
        [36m<div[39m
          [33mstyle[39m=[32m"height: 100%; width: 100%; display: flex; flex-direction: column; background-color: rgb(255, 255, 255);"[39m
        [36m>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"padding: 12px 16px; border-bottom: 1px solid rgb(225, 229, 233); background-color: rgb(248, 249, 250); display: flex; justify-content: center; align-items: center;"[39m
          [36m>[39m
            [36m<h3[39m
              [33mstyle[39m=[32m"margin: 0px; font-size: 16px; font-weight: bold; color: rgb(51, 51, 51);"[39m
            [36m>[39m
              [0m��️ Monaco JSON Editor[0m
            [36m</h3>[39m
          [36m</div>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"flex: 1 1 0%; overflow: hidden;"[39m
          [36m>[39m
            [36m<div[39m
              [33mdata[39m=[32m"[object Object]"[39m
              [33mdata-testid[39m=[32m"monaco-editor-mock"[39m
              [33mheight[39m=[32m"100%"[39m
              [33mreadonly[39m=[32m""[39m
              [33mtheme[39m=[32m"light"[39m
            [36m>[39m
              [0mMonaco Editor Mock[0m
            [36m</div>[39m
          [36m</div>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      100 |       render(<JsonViewer data={sampleData} onCopy={mockOnCopy} />);
      101 |       
    > 102 |       await waitFor(() => {
          |                    ^
      103 |         const jsonContent = screen.getByText(/"slides":/);
      104 |         expect(jsonContent).toBeInTheDocument();
      105 |       });

      at waitForWrapper (node_modules/@testing-library/dom/dist/wait-for.js:163:27)
      at Object.<anonymous> (tests/__tests__/json-viewer.test.tsx:102:20)

  ● JsonViewer Component › Client-Side Rendering › transitions from loading to loaded state

    Unable to find an element by: [data-testid="monaco-json-editor"]

    Ignored nodes: comments, script, style
    [36m<body>[39m
      [36m<div>[39m
        [36m<div[39m
          [33mstyle[39m=[32m"height: 100%; width: 100%; display: flex; flex-direction: column; background-color: rgb(255, 255, 255);"[39m
        [36m>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"padding: 12px 16px; border-bottom: 1px solid rgb(225, 229, 233); background-color: rgb(248, 249, 250); display: flex; justify-content: center; align-items: center;"[39m
          [36m>[39m
            [36m<h3[39m
              [33mstyle[39m=[32m"margin: 0px; font-size: 16px; font-weight: bold; color: rgb(51, 51, 51);"[39m
            [36m>[39m
              [0m��️ Monaco JSON Editor[0m
            [36m</h3>[39m
          [36m</div>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"flex: 1 1 0%; overflow: hidden;"[39m
          [36m>[39m
            [36m<div[39m
              [33mdata[39m=[32m"[object Object]"[39m
              [33mdata-testid[39m=[32m"monaco-editor-mock"[39m
              [33mheight[39m=[32m"100%"[39m
              [33mreadonly[39m=[32m""[39m
              [33mtheme[39m=[32m"light"[39m
            [36m>[39m
              [0mMonaco Editor Mock[0m
            [36m</div>[39m
          [36m</div>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      118 |       
      119 |       // Should show the editor
    > 120 |       await waitFor(() => {
          |                    ^
      121 |         expect(screen.getByTestId('monaco-json-editor')).toBeInTheDocument();
      122 |       });
      123 |     });

      at waitForWrapper (node_modules/@testing-library/dom/dist/wait-for.js:163:27)
      at Object.<anonymous> (tests/__tests__/json-viewer.test.tsx:120:20)

  ● JsonViewer Component › Copy Functionality › calls onCopy callback when copy button is clicked

    Unable to find an element with the text: Copy. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

    Ignored nodes: comments, script, style
    [36m<body>[39m
      [36m<div>[39m
        [36m<div[39m
          [33mstyle[39m=[32m"height: 100%; width: 100%; display: flex; flex-direction: column; background-color: rgb(255, 255, 255);"[39m
        [36m>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"padding: 12px 16px; border-bottom: 1px solid rgb(225, 229, 233); background-color: rgb(248, 249, 250); display: flex; justify-content: center; align-items: center;"[39m
          [36m>[39m
            [36m<h3[39m
              [33mstyle[39m=[32m"margin: 0px; font-size: 16px; font-weight: bold; color: rgb(51, 51, 51);"[39m
            [36m>[39m
              [0m��️ Monaco JSON Editor[0m
            [36m</h3>[39m
          [36m</div>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"flex: 1 1 0%; overflow: hidden;"[39m
          [36m>[39m
            [36m<div[39m
              [33mdata[39m=[32m"[object Object]"[39m
              [33mdata-testid[39m=[32m"monaco-editor-mock"[39m
              [33mheight[39m=[32m"100%"[39m
              [33mreadonly[39m=[32m""[39m
              [33mtheme[39m=[32m"light"[39m
            [36m>[39m
              [0mMonaco Editor Mock[0m
            [36m</div>[39m
          [36m</div>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      128 |       render(<JsonViewer data={sampleData} onCopy={mockOnCopy} />);
      129 |       
    > 130 |       await waitFor(() => {
          |                    ^
      131 |         const copyButton = screen.getByText('Copy');
      132 |         copyButton.click();
      133 |       });

      at waitForWrapper (node_modules/@testing-library/dom/dist/wait-for.js:163:27)
      at Object.<anonymous> (tests/__tests__/json-viewer.test.tsx:130:20)

  ● JsonViewer Component › Copy Functionality › handles missing onCopy callback gracefully

    Unable to find an element with the text: Copy. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

    Ignored nodes: comments, script, style
    [36m<body>[39m
      [36m<div>[39m
        [36m<div[39m
          [33mstyle[39m=[32m"height: 100%; width: 100%; display: flex; flex-direction: column; background-color: rgb(255, 255, 255);"[39m
        [36m>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"padding: 12px 16px; border-bottom: 1px solid rgb(225, 229, 233); background-color: rgb(248, 249, 250); display: flex; justify-content: center; align-items: center;"[39m
          [36m>[39m
            [36m<h3[39m
              [33mstyle[39m=[32m"margin: 0px; font-size: 16px; font-weight: bold; color: rgb(51, 51, 51);"[39m
            [36m>[39m
              [0m��️ Monaco JSON Editor[0m
            [36m</h3>[39m
          [36m</div>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"flex: 1 1 0%; overflow: hidden;"[39m
          [36m>[39m
            [36m<div[39m
              [33mdata[39m=[32m"[object Object]"[39m
              [33mdata-testid[39m=[32m"monaco-editor-mock"[39m
              [33mheight[39m=[32m"100%"[39m
              [33mreadonly[39m=[32m""[39m
              [33mtheme[39m=[32m"light"[39m
            [36m>[39m
              [0mMonaco Editor Mock[0m
            [36m</div>[39m
          [36m</div>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      139 |       render(<JsonViewer data={sampleData} />);
      140 |       
    > 141 |       await waitFor(() => {
          |                    ^
      142 |         const copyButton = screen.getByText('Copy');
      143 |         expect(() => copyButton.click()).not.toThrow();
      144 |       });

      at waitForWrapper (node_modules/@testing-library/dom/dist/wait-for.js:163:27)
      at Object.<anonymous> (tests/__tests__/json-viewer.test.tsx:141:20)

  ● JsonViewer Component › Edge Cases › handles empty object data

    Unable to find an element by: [data-testid="monaco-json-editor"]

    Ignored nodes: comments, script, style
    [36m<body>[39m
      [36m<div>[39m
        [36m<div[39m
          [33mstyle[39m=[32m"height: 100%; width: 100%; display: flex; flex-direction: column; background-color: rgb(255, 255, 255);"[39m
        [36m>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"padding: 12px 16px; border-bottom: 1px solid rgb(225, 229, 233); background-color: rgb(248, 249, 250); display: flex; justify-content: center; align-items: center;"[39m
          [36m>[39m
            [36m<h3[39m
              [33mstyle[39m=[32m"margin: 0px; font-size: 16px; font-weight: bold; color: rgb(51, 51, 51);"[39m
            [36m>[39m
              [0m��️ Monaco JSON Editor[0m
            [36m</h3>[39m
          [36m</div>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"flex: 1 1 0%; overflow: hidden;"[39m
          [36m>[39m
            [36m<div[39m
              [33mdata[39m=[32m"[object Object]"[39m
              [33mdata-testid[39m=[32m"monaco-editor-mock"[39m
              [33mheight[39m=[32m"100%"[39m
              [33mreadonly[39m=[32m""[39m
              [33mtheme[39m=[32m"light"[39m
            [36m>[39m
              [0mMonaco Editor Mock[0m
            [36m</div>[39m
          [36m</div>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      204 |       render(<JsonViewer data={{}} onCopy={mockOnCopy} />);
      205 |       
    > 206 |       await waitFor(() => {
          |                    ^
      207 |         expect(screen.getByTestId('monaco-json-editor')).toBeInTheDocument();
      208 |         expect(screen.getByText('{}')).toBeInTheDocument();
      209 |       });

      at waitForWrapper (node_modules/@testing-library/dom/dist/wait-for.js:163:27)
      at Object.<anonymous> (tests/__tests__/json-viewer.test.tsx:206:20)

  ● JsonViewer Component › Edge Cases › handles complex nested data

    Unable to find an element by: [data-testid="monaco-json-editor"]

    Ignored nodes: comments, script, style
    [36m<body>[39m
      [36m<div>[39m
        [36m<div[39m
          [33mstyle[39m=[32m"height: 100%; width: 100%; display: flex; flex-direction: column; background-color: rgb(255, 255, 255);"[39m
        [36m>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"padding: 12px 16px; border-bottom: 1px solid rgb(225, 229, 233); background-color: rgb(248, 249, 250); display: flex; justify-content: center; align-items: center;"[39m
          [36m>[39m
            [36m<h3[39m
              [33mstyle[39m=[32m"margin: 0px; font-size: 16px; font-weight: bold; color: rgb(51, 51, 51);"[39m
            [36m>[39m
              [0m��️ Monaco JSON Editor[0m
            [36m</h3>[39m
          [36m</div>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"flex: 1 1 0%; overflow: hidden;"[39m
          [36m>[39m
            [36m<div[39m
              [33mdata[39m=[32m"[object Object]"[39m
              [33mdata-testid[39m=[32m"monaco-editor-mock"[39m
              [33mheight[39m=[32m"100%"[39m
              [33mreadonly[39m=[32m""[39m
              [33mtheme[39m=[32m"light"[39m
            [36m>[39m
              [0mMonaco Editor Mock[0m
            [36m</div>[39m
          [36m</div>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      224 |       render(<JsonViewer data={complexData} />);
      225 |       
    > 226 |       await waitFor(() => {
          |                    ^
      227 |         expect(screen.getByTestId('monaco-json-editor')).toBeInTheDocument();
      228 |         expect(screen.getByText(/"deepValue":/)).toBeInTheDocument();
      229 |       });

      at waitForWrapper (node_modules/@testing-library/dom/dist/wait-for.js:163:27)
      at Object.<anonymous> (tests/__tests__/json-viewer.test.tsx:226:20)

  ● JsonViewer Component › Edge Cases › handles data with special characters

    Unable to find an element by: [data-testid="monaco-json-editor"]

    Ignored nodes: comments, script, style
    [36m<body>[39m
      [36m<div>[39m
        [36m<div[39m
          [33mstyle[39m=[32m"height: 100%; width: 100%; display: flex; flex-direction: column; background-color: rgb(255, 255, 255);"[39m
        [36m>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"padding: 12px 16px; border-bottom: 1px solid rgb(225, 229, 233); background-color: rgb(248, 249, 250); display: flex; justify-content: center; align-items: center;"[39m
          [36m>[39m
            [36m<h3[39m
              [33mstyle[39m=[32m"margin: 0px; font-size: 16px; font-weight: bold; color: rgb(51, 51, 51);"[39m
            [36m>[39m
              [0m��️ Monaco JSON Editor[0m
            [36m</h3>[39m
          [36m</div>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"flex: 1 1 0%; overflow: hidden;"[39m
          [36m>[39m
            [36m<div[39m
              [33mdata[39m=[32m"[object Object]"[39m
              [33mdata-testid[39m=[32m"monaco-editor-mock"[39m
              [33mheight[39m=[32m"100%"[39m
              [33mreadonly[39m=[32m""[39m
              [33mtheme[39m=[32m"light"[39m
            [36m>[39m
              [0mMonaco Editor Mock[0m
            [36m</div>[39m
          [36m</div>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      239 |       render(<JsonViewer data={specialData} />);
      240 |       
    > 241 |       await waitFor(() => {
          |                    ^
      242 |         expect(screen.getByTestId('monaco-json-editor')).toBeInTheDocument();
      243 |       });
      244 |     });

      at waitForWrapper (node_modules/@testing-library/dom/dist/wait-for.js:163:27)
      at Object.<anonymous> (tests/__tests__/json-viewer.test.tsx:241:20)

  ● JsonViewer Component › Component Updates › updates when data prop changes

    Unable to find an element with the text: /"slides":/. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

    Ignored nodes: comments, script, style
    [36m<body>[39m
      [36m<div>[39m
        [36m<div[39m
          [33mstyle[39m=[32m"height: 100%; width: 100%; display: flex; flex-direction: column; background-color: rgb(255, 255, 255);"[39m
        [36m>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"padding: 12px 16px; border-bottom: 1px solid rgb(225, 229, 233); background-color: rgb(248, 249, 250); display: flex; justify-content: center; align-items: center;"[39m
          [36m>[39m
            [36m<h3[39m
              [33mstyle[39m=[32m"margin: 0px; font-size: 16px; font-weight: bold; color: rgb(51, 51, 51);"[39m
            [36m>[39m
              [0m��️ Monaco JSON Editor[0m
            [36m</h3>[39m
          [36m</div>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"flex: 1 1 0%; overflow: hidden;"[39m
          [36m>[39m
            [36m<div[39m
              [33mdata[39m=[32m"[object Object]"[39m
              [33mdata-testid[39m=[32m"monaco-editor-mock"[39m
              [33mheight[39m=[32m"100%"[39m
              [33mreadonly[39m=[32m""[39m
              [33mtheme[39m=[32m"light"[39m
            [36m>[39m
              [0mMonaco Editor Mock[0m
            [36m</div>[39m
          [36m</div>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      249 |       const { rerender } = render(<JsonViewer data={sampleData} />);
      250 |       
    > 251 |       await waitFor(() => {
          |                    ^
      252 |         expect(screen.getByText(/"slides":/)).toBeInTheDocument();
      253 |       });
      254 |       

      at waitForWrapper (node_modules/@testing-library/dom/dist/wait-for.js:163:27)
      at Object.<anonymous> (tests/__tests__/json-viewer.test.tsx:251:20)

  ● JsonViewer Component › Component Updates › transitions from data to empty state

    Unable to find an element by: [data-testid="monaco-json-editor"]

    Ignored nodes: comments, script, style
    [36m<body>[39m
      [36m<div>[39m
        [36m<div[39m
          [33mstyle[39m=[32m"height: 100%; width: 100%; display: flex; flex-direction: column; background-color: rgb(255, 255, 255);"[39m
        [36m>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"padding: 12px 16px; border-bottom: 1px solid rgb(225, 229, 233); background-color: rgb(248, 249, 250); display: flex; justify-content: center; align-items: center;"[39m
          [36m>[39m
            [36m<h3[39m
              [33mstyle[39m=[32m"margin: 0px; font-size: 16px; font-weight: bold; color: rgb(51, 51, 51);"[39m
            [36m>[39m
              [0m��️ Monaco JSON Editor[0m
            [36m</h3>[39m
          [36m</div>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"flex: 1 1 0%; overflow: hidden;"[39m
          [36m>[39m
            [36m<div[39m
              [33mdata[39m=[32m"[object Object]"[39m
              [33mdata-testid[39m=[32m"monaco-editor-mock"[39m
              [33mheight[39m=[32m"100%"[39m
              [33mreadonly[39m=[32m""[39m
              [33mtheme[39m=[32m"light"[39m
            [36m>[39m
              [0mMonaco Editor Mock[0m
            [36m</div>[39m
          [36m</div>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      264 |       const { rerender } = render(<JsonViewer data={sampleData} />);
      265 |       
    > 266 |       await waitFor(() => {
          |                    ^
      267 |         expect(screen.getByTestId('monaco-json-editor')).toBeInTheDocument();
      268 |       });
      269 |       

      at waitForWrapper (node_modules/@testing-library/dom/dist/wait-for.js:163:27)
      at Object.<anonymous> (tests/__tests__/json-viewer.test.tsx:266:20)

  ● JsonViewer Component › Component Updates › updates onCopy callback

    Unable to find an element by: [data-testid="monaco-json-editor"]

    Ignored nodes: comments, script, style
    [36m<body>[39m
      [36m<div>[39m
        [36m<div[39m
          [33mstyle[39m=[32m"height: 100%; width: 100%; display: flex; flex-direction: column; background-color: rgb(255, 255, 255);"[39m
        [36m>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"padding: 12px 16px; border-bottom: 1px solid rgb(225, 229, 233); background-color: rgb(248, 249, 250); display: flex; justify-content: center; align-items: center;"[39m
          [36m>[39m
            [36m<h3[39m
              [33mstyle[39m=[32m"margin: 0px; font-size: 16px; font-weight: bold; color: rgb(51, 51, 51);"[39m
            [36m>[39m
              [0m��️ Monaco JSON Editor[0m
            [36m</h3>[39m
          [36m</div>[39m
          [36m<div[39m
            [33mstyle[39m=[32m"flex: 1 1 0%; overflow: hidden;"[39m
          [36m>[39m
            [36m<div[39m
              [33mdata[39m=[32m"[object Object]"[39m
              [33mdata-testid[39m=[32m"monaco-editor-mock"[39m
              [33mheight[39m=[32m"100%"[39m
              [33mreadonly[39m=[32m""[39m
              [33mtheme[39m=[32m"light"[39m
            [36m>[39m
              [0mMonaco Editor Mock[0m
            [36m</div>[39m
          [36m</div>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      277 |       const { rerender } = render(<JsonViewer data={sampleData} onCopy={mockOnCopy} />);
      278 |       
    > 279 |       await waitFor(() => {
          |                    ^
      280 |         expect(screen.getByTestId('monaco-json-editor')).toBeInTheDocument();
      281 |       });
      282 |       

      at waitForWrapper (node_modules/@testing-library/dom/dist/wait-for.js:163:27)
      at Object.<anonymous> (tests/__tests__/json-viewer.test.tsx:279:20)


Test Suites: 12 failed, 80 passed, 92 total
Tests:       121 failed, 1625 passed, 1746 total
Snapshots:   0 total
Time:        14.024 s
Ran all test suites.

{"version":3,"file":"shape.js","sourceRoot":"","sources":["../src/shape.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,iBAAiB,EAAE,MAAM,SAAS,CAAC;AAG5C,MAAM,UAAU,kBAAkB,CAAC,QAAiB,EAAE,CAAS,EAAE,CAAS;IACxE,sCAAsC;IACtC,mDAAmD;IACnD,MAAM,OAAO,GAAG,iBAAiB,CAAC,QAAQ,EAAE,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC,CAAC;IACrE,IAAI,CAAC,OAAO;QAAE,OAAO,EAAE,CAAC;IAExB,mFAAmF;IACnF,IAAI,IAAI,GAAG,EAAE,CAAC;IAEd,4BAA4B;IAC5B,IAAI,CAAC,IAAI,EAAE,CAAC;QACV,IAAI,GAAG,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;IACjD,CAAC;IAED,OAAO,IAAI,CAAC;AACd,CAAC","sourcesContent":["import { getTextByPathList } from './utils';\r\nimport type { XmlNode } from './types';\r\n\r\nexport function getCustomShapePath(custGeom: XmlNode, w: number, h: number): string {\r\n  // This is a simplified implementation\r\n  // The actual shape path generation is very complex\r\n  const pathLst = getTextByPathList(custGeom, ['a:pathLst', 'a:path']);\r\n  if (!pathLst) return '';\r\n\r\n  // Basic path processing - in a real implementation this would be much more complex\r\n  let path = '';\r\n  \r\n  // Simple rectangle fallback\r\n  if (!path) {\r\n    path = `M 0 0 L ${w} 0 L ${w} ${h} L 0 ${h} Z`;\r\n  }\r\n\r\n  return path;\r\n}"]}
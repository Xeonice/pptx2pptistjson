{"version":3,"file":"chart.js","sourceRoot":"","sources":["../src/chart.ts"],"names":[],"mappings":"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","sourcesContent":["import { eachElement, getTextByPathList } from './utils';\r\nimport { applyTint } from './color';\r\nimport type { XmlNode, ProcessingContext, ChartData } from './types';\r\n\r\nfunction extractChartColors(serNode: XmlNode | XmlNode[], warpObj: ProcessingContext): string[] {\r\n  const nodes = Array.isArray(serNode) ? serNode : [serNode];\r\n  const schemeClrs: string[] = [];\r\n  \r\n  for (const node of nodes) {\r\n    let schemeClr = getTextByPathList(node, ['c:spPr', 'a:solidFill', 'a:schemeClr']);\r\n    if (!schemeClr) schemeClr = getTextByPathList(node, ['c:spPr', 'a:ln', 'a:solidFill', 'a:schemeClr']);\r\n    if (!schemeClr) schemeClr = getTextByPathList(node, ['c:marker', 'c:spPr', 'a:ln', 'a:solidFill', 'a:schemeClr']);\r\n\r\n    let clr = getTextByPathList(schemeClr, ['attrs', 'val']);\r\n    if (clr) {\r\n      clr = getTextByPathList(warpObj.themeContent, ['a:theme', 'a:themeElements', 'a:clrScheme', `a:${clr}`, 'a:srgbClr', 'attrs', 'val']);\r\n      const tint = getTextByPathList(schemeClr, ['a:tint', 'attrs', 'val']) / 100000;\r\n      if (clr && !isNaN(tint)) {\r\n        clr = applyTint(clr, tint);\r\n      }\r\n    } else {\r\n      clr = getTextByPathList(node, ['c:spPr', 'a:solidFill', 'a:srgbClr', 'attrs', 'val']);\r\n    }\r\n\r\n    if (clr) clr = '#' + clr;\r\n    schemeClrs.push(clr);\r\n  }\r\n  \r\n  return schemeClrs;\r\n}\r\n\r\nfunction extractChartData(serNode: XmlNode): any[] {\r\n  const dataMat: any[] = [];\r\n  if (!serNode) return dataMat;\r\n\r\n  if (serNode['c:xVal']) {\r\n    let dataRow: number[] = [];\r\n    eachElement(serNode['c:xVal']['c:numRef']['c:numCache']['c:pt'], (innerNode: XmlNode) => {\r\n      dataRow.push(parseFloat(innerNode['c:v']));\r\n      return '';\r\n    });\r\n    dataMat.push(dataRow);\r\n    \r\n    dataRow = [];\r\n    eachElement(serNode['c:yVal']['c:numRef']['c:numCache']['c:pt'], (innerNode: XmlNode) => {\r\n      dataRow.push(parseFloat(innerNode['c:v']));\r\n      return '';\r\n    });\r\n    dataMat.push(dataRow);\r\n  } else {\r\n    eachElement(serNode, (innerNode: XmlNode, index: number) => {\r\n      const dataRow: any[] = [];\r\n      const colName = getTextByPathList(innerNode, ['c:tx', 'c:strRef', 'c:strCache', 'c:pt', 'c:v']) || index;\r\n      dataRow.push(colName);\r\n\r\n      eachElement(innerNode['c:val']['c:numRef']['c:numCache']['c:pt'], (valNode: XmlNode) => {\r\n        dataRow.push(parseFloat(valNode['c:v']));\r\n        return '';\r\n      });\r\n      \r\n      dataMat.push(dataRow);\r\n      return '';\r\n    });\r\n  }\r\n\r\n  return dataMat;\r\n}\r\n\r\nexport function getChartInfo(plotArea: XmlNode, warpObj: ProcessingContext): ChartData | null {\r\n  if (!plotArea) return null;\r\n\r\n  // Detect chart type\r\n  let chartType = '';\r\n  let seriesNode: XmlNode | null = null;\r\n  \r\n  if (plotArea['c:barChart']) {\r\n    chartType = 'bar';\r\n    seriesNode = plotArea['c:barChart']['c:ser'];\r\n  } else if (plotArea['c:lineChart']) {\r\n    chartType = 'line';\r\n    seriesNode = plotArea['c:lineChart']['c:ser'];\r\n  } else if (plotArea['c:pieChart']) {\r\n    chartType = 'pie';\r\n    seriesNode = plotArea['c:pieChart']['c:ser'];\r\n  } else if (plotArea['c:doughnutChart']) {\r\n    chartType = 'doughnut';\r\n    seriesNode = plotArea['c:doughnutChart']['c:ser'];\r\n  } else if (plotArea['c:areaChart']) {\r\n    chartType = 'area';\r\n    seriesNode = plotArea['c:areaChart']['c:ser'];\r\n  } else if (plotArea['c:scatterChart']) {\r\n    chartType = 'scatter';\r\n    seriesNode = plotArea['c:scatterChart']['c:ser'];\r\n  }\r\n\r\n  if (!seriesNode) return null;\r\n\r\n  const data = extractChartData(seriesNode);\r\n  const colors = extractChartColors(seriesNode, warpObj);\r\n\r\n  const result: ChartData = {\r\n    data,\r\n    colors,\r\n    type: chartType,\r\n  };\r\n\r\n  // Additional chart properties\r\n  if (chartType === 'bar') {\r\n    const barDir = getTextByPathList(plotArea['c:barChart'], ['c:barDir', 'attrs', 'val']);\r\n    if (barDir) result.barDir = barDir;\r\n    \r\n    const grouping = getTextByPathList(plotArea['c:barChart'], ['c:grouping', 'attrs', 'val']);\r\n    if (grouping) result.grouping = grouping;\r\n  }\r\n\r\n  if (chartType === 'line') {\r\n    const marker = getTextByPathList(plotArea['c:lineChart'], ['c:marker', 'attrs', 'val']);\r\n    result.marker = marker === '1';\r\n  }\r\n\r\n  if (chartType === 'doughnut') {\r\n    const holeSize = getTextByPathList(plotArea['c:doughnutChart'], ['c:holeSize', 'attrs', 'val']);\r\n    if (holeSize) result.holeSize = parseInt(holeSize);\r\n  }\r\n\r\n  return result;\r\n}"]}
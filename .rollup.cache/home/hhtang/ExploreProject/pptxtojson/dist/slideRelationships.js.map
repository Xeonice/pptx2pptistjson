{"version":3,"file":"slideRelationships.js","sourceRoot":"","sources":["../src/slideRelationships.ts"],"names":[],"mappings":"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","sourcesContent":["import { readXmlFile } from './readXmlFile';\r\nimport { getTextByPathList } from './utils';\r\nimport type { XmlNode, ProcessingContext, ResourceObject } from './types';\r\n\r\n/**\r\n * Load slide relationships and populate the resource objects\r\n */\r\nexport async function loadSlideRelationships(\r\n  zip: any,\r\n  slideFileName: string,\r\n  context: ProcessingContext\r\n): Promise<void> {\r\n  // Get slide relationship file path\r\n  const slideRelPath = slideFileName.replace('.xml', '.xml.rels').replace('slides/', 'slides/_rels/');\r\n  \r\n  // Load slide relationship file\r\n  const slideRels = await readXmlFile(zip, slideRelPath);\r\n  if (!slideRels) {\r\n    console.warn(`No relationship file found for ${slideFileName}`);\r\n    return;\r\n  }\r\n  \r\n  context.slideRelationshipFile = slideRels;\r\n  \r\n  // Build slide resource object\r\n  const slideResObj: ResourceObject = {};\r\n  const relationships = slideRels['Relationships']?.['Relationship'];\r\n  if (relationships) {\r\n    const rels = Array.isArray(relationships) ? relationships : [relationships];\r\n    for (const rel of rels) {\r\n      const id = rel.attrs?.['Id'];\r\n      const type = rel.attrs?.['Type'];\r\n      const target = rel.attrs?.['Target'];\r\n      \r\n      if (id && type && target) {\r\n        slideResObj[id] = { type, target };\r\n      }\r\n    }\r\n  }\r\n  context.slideResObj = slideResObj;\r\n  \r\n  // Find slide layout reference\r\n  const layoutRel = Object.values(slideResObj).find(rel => \r\n    rel.type === 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/slideLayout'\r\n  );\r\n  \r\n  if (layoutRel) {\r\n    // Load slide layout\r\n    const layoutPath = 'ppt/slideLayouts/' + layoutRel.target.replace('../slideLayouts/', '');\r\n    const slideLayoutContent = await readXmlFile(zip, layoutPath);\r\n    if (slideLayoutContent) {\r\n      context.slideLayoutContent = slideLayoutContent;\r\n      \r\n      // Load layout relationships\r\n      const layoutRelPath = layoutPath.replace('.xml', '.xml.rels').replace('slideLayouts/', 'slideLayouts/_rels/');\r\n      const layoutRels = await readXmlFile(zip, layoutRelPath);\r\n      \r\n      if (layoutRels) {\r\n        // Build layout resource object\r\n        const layoutResObj: ResourceObject = {};\r\n        const layoutRelationships = layoutRels['Relationships']?.['Relationship'];\r\n        if (layoutRelationships) {\r\n          const rels = Array.isArray(layoutRelationships) ? layoutRelationships : [layoutRelationships];\r\n          for (const rel of rels) {\r\n            const id = rel.attrs?.['Id'];\r\n            const type = rel.attrs?.['Type'];\r\n            const target = rel.attrs?.['Target'];\r\n            \r\n            if (id && type && target) {\r\n              layoutResObj[id] = { type, target };\r\n            }\r\n          }\r\n        }\r\n        context.layoutResObj = layoutResObj;\r\n        \r\n        // Find slide master reference\r\n        const masterRel = Object.values(layoutResObj).find(rel => \r\n          rel.type === 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/slideMaster'\r\n        );\r\n        \r\n        if (masterRel) {\r\n          // Load slide master\r\n          const masterPath = 'ppt/slideMasters/' + masterRel.target.replace('../slideMasters/', '');\r\n          const slideMasterContent = await readXmlFile(zip, masterPath);\r\n          if (slideMasterContent) {\r\n            context.slideMasterContent = slideMasterContent;\r\n            \r\n            // Load master relationships\r\n            const masterRelPath = masterPath.replace('.xml', '.xml.rels').replace('slideMasters/', 'slideMasters/_rels/');\r\n            const masterRels = await readXmlFile(zip, masterRelPath);\r\n            \r\n            if (masterRels) {\r\n              // Build master resource object\r\n              const masterResObj: ResourceObject = {};\r\n              const masterRelationships = masterRels['Relationships']?.['Relationship'];\r\n              if (masterRelationships) {\r\n                const rels = Array.isArray(masterRelationships) ? masterRelationships : [masterRelationships];\r\n                for (const rel of rels) {\r\n                  const id = rel.attrs?.['Id'];\r\n                  const type = rel.attrs?.['Type'];\r\n                  const target = rel.attrs?.['Target'];\r\n                  \r\n                  if (id && type && target) {\r\n                    masterResObj[id] = { type, target };\r\n                  }\r\n                }\r\n              }\r\n              context.masterResObj = masterResObj;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Get position node from slide, layout, or master\r\n */\r\nexport function getPositionNode(\r\n  element: XmlNode,\r\n  elementType: string,\r\n  context: ProcessingContext\r\n): { slideNode?: XmlNode; layoutNode?: XmlNode; masterNode?: XmlNode } {\r\n  const result: { slideNode?: XmlNode; layoutNode?: XmlNode; masterNode?: XmlNode } = {};\r\n  \r\n  // Get slide node\r\n  const spPr = element['p:spPr'];\r\n  if (spPr?.['a:xfrm']) {\r\n    result.slideNode = spPr['a:xfrm'];\r\n  }\r\n  \r\n  // Try to find corresponding element in layout and master\r\n  const nvPr = element['p:nvSpPr'] || element['p:nvPicPr'] || element['p:nvGrpSpPr'];\r\n  const phType = nvPr?.['p:nvPr']?.['p:ph']?.attrs?.type;\r\n  const phIdx = nvPr?.['p:nvPr']?.['p:ph']?.attrs?.idx;\r\n  \r\n  if (phType || phIdx !== undefined) {\r\n    // Find in layout\r\n    if (context.slideLayoutContent) {\r\n      const layoutSpTree = context.slideLayoutContent['p:sldLayout']?.['p:cSld']?.['p:spTree'];\r\n      if (layoutSpTree) {\r\n        const layoutElements = layoutSpTree[elementType];\r\n        if (layoutElements) {\r\n          const elements = Array.isArray(layoutElements) ? layoutElements : [layoutElements];\r\n          for (const layoutEl of elements) {\r\n            const layoutPh = layoutEl['p:nvSpPr']?.['p:nvPr']?.['p:ph'] ||\r\n                            layoutEl['p:nvPicPr']?.['p:nvPr']?.['p:ph'] ||\r\n                            layoutEl['p:nvGrpSpPr']?.['p:nvPr']?.['p:ph'];\r\n            if (layoutPh) {\r\n              const layoutPhType = layoutPh.attrs?.type;\r\n              const layoutPhIdx = layoutPh.attrs?.idx;\r\n              \r\n              if ((phType && phType === layoutPhType) || \r\n                  (phIdx !== undefined && phIdx === layoutPhIdx)) {\r\n                const layoutSpPr = layoutEl['p:spPr'];\r\n                if (layoutSpPr?.['a:xfrm']) {\r\n                  result.layoutNode = layoutSpPr['a:xfrm'];\r\n                  break;\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Find in master\r\n    if (context.slideMasterContent) {\r\n      const masterSpTree = context.slideMasterContent['p:sldMaster']?.['p:cSld']?.['p:spTree'];\r\n      if (masterSpTree) {\r\n        const masterElements = masterSpTree[elementType];\r\n        if (masterElements) {\r\n          const elements = Array.isArray(masterElements) ? masterElements : [masterElements];\r\n          for (const masterEl of elements) {\r\n            const masterPh = masterEl['p:nvSpPr']?.['p:nvPr']?.['p:ph'] ||\r\n                            masterEl['p:nvPicPr']?.['p:nvPr']?.['p:ph'] ||\r\n                            masterEl['p:nvGrpSpPr']?.['p:nvPr']?.['p:ph'];\r\n            if (masterPh) {\r\n              const masterPhType = masterPh.attrs?.type;\r\n              const masterPhIdx = masterPh.attrs?.idx;\r\n              \r\n              if ((phType && phType === masterPhType) || \r\n                  (phIdx !== undefined && phIdx === masterPhIdx)) {\r\n                const masterSpPr = masterEl['p:spPr'];\r\n                if (masterSpPr?.['a:xfrm']) {\r\n                  result.masterNode = masterSpPr['a:xfrm'];\r\n                  break;\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  return result;\r\n}"]}
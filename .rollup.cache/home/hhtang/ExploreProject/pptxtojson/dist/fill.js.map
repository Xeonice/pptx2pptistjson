{"version":3,"file":"fill.js","sourceRoot":"","sources":["../src/fill.ts"],"names":[],"mappings":"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","sourcesContent":["import tinycolor from 'tinycolor2';\r\nimport { getSchemeColorFromTheme } from './schemeColor';\r\nimport {\r\n  applyShade,\r\n  applyTint,\r\n  applyLumOff,\r\n  applyLumMod,\r\n  applyHueMod,\r\n  applySatMod,\r\n  hslToRgb,\r\n  getColorName2Hex,\r\n} from './color';\r\n\r\nimport {\r\n  base64ArrayBuffer,\r\n  getTextByPathList,\r\n  angleToDegrees,\r\n  escapeHtml,\r\n  getMimeType,\r\n  toHex,\r\n} from './utils';\r\n\r\nimport type { \r\n  XmlNode, \r\n  ProcessingContext, \r\n  ProcessingSource, \r\n  FillType, \r\n  Fill, \r\n  GradientColor \r\n} from './types';\r\n\r\nexport function getFillType(node: XmlNode): FillType {\r\n  if (node['a:noFill']) return 'NO_FILL';\r\n  if (node['a:solidFill']) return 'SOLID_FILL';\r\n  if (node['a:gradFill']) return 'GRADIENT_FILL';\r\n  if (node['a:pattFill']) return 'PATTERN_FILL';\r\n  if (node['a:blipFill']) return 'PIC_FILL';\r\n  if (node['a:grpFill']) return 'GROUP_FILL';\r\n  return 'NO_FILL';\r\n}\r\n\r\nexport async function getPicFill(\r\n  type: ProcessingSource, \r\n  node: XmlNode | undefined, \r\n  warpObj: ProcessingContext\r\n): Promise<string> {\r\n  if (!node) return '';\r\n\r\n  const rId = getTextByPathList(node, ['a:blip', 'attrs', 'r:embed']);\r\n  let imgPath: string;\r\n  \r\n  if (type === 'slideBg' || type === 'slide') {\r\n    imgPath = getTextByPathList(warpObj.slideResObj, [rId, 'target']);\r\n  } else if (type === 'slideLayoutBg') {\r\n    imgPath = getTextByPathList(warpObj.layoutResObj, [rId, 'target']);\r\n  } else if (type === 'slideMasterBg') {\r\n    imgPath = getTextByPathList(warpObj.masterResObj, [rId, 'target']);\r\n  } else if (type === 'themeBg') {\r\n    imgPath = getTextByPathList(warpObj.themeResObj, [rId, 'target']);\r\n  } else if (type === 'diagramBg') {\r\n    imgPath = getTextByPathList(warpObj.diagramResObj, [rId, 'target']);\r\n  } else {\r\n    return '';\r\n  }\r\n  \r\n  if (!imgPath) return '';\r\n\r\n  // Check cache\r\n  const loadedImages = (warpObj as any)['loaded-images'] || {};\r\n  let img = loadedImages[imgPath];\r\n  \r\n  if (!img) {\r\n    imgPath = escapeHtml(imgPath);\r\n    const imgExt = imgPath.split('.').pop();\r\n    if (imgExt === 'xml') return '';\r\n\r\n    try {\r\n      const imgArrayBuffer = await warpObj.zip.file(imgPath)?.async('arraybuffer');\r\n      if (!imgArrayBuffer) return '';\r\n      \r\n      const imgMimeType = getMimeType(imgExt || '');\r\n      img = `data:${imgMimeType};base64,${base64ArrayBuffer(imgArrayBuffer)}`;\r\n\r\n      loadedImages[imgPath] = img;\r\n      (warpObj as any)['loaded-images'] = loadedImages;\r\n    } catch (error) {\r\n      console.warn(`Failed to load image: ${imgPath}`, error);\r\n      return '';\r\n    }\r\n  }\r\n  \r\n  return img;\r\n}\r\n\r\nexport function getPicFillOpacity(node: XmlNode): number {\r\n  const aBlipNode = node['a:blip'];\r\n  const aphaModFixNode = getTextByPathList(aBlipNode, ['a:alphaModFix', 'attrs']);\r\n  \r\n  let opacity = 1;\r\n  if (aphaModFixNode?.amt) {\r\n    opacity = parseInt(aphaModFixNode.amt) / 100000;\r\n  }\r\n\r\n  return opacity;\r\n}\r\n\r\nexport async function getBgPicFill(\r\n  bgPr: XmlNode, \r\n  source: ProcessingSource, \r\n  warpObj: ProcessingContext\r\n): Promise<{ picBase64: string; opacity: number }> {\r\n  const picBase64 = await getPicFill(source, bgPr['a:blipFill'], warpObj);\r\n  const aBlipNode = bgPr['a:blipFill']?.['a:blip'];\r\n\r\n  const aphaModFixNode = getTextByPathList(aBlipNode, ['a:alphaModFix', 'attrs']);\r\n  let opacity = 1;\r\n  if (aphaModFixNode?.amt) {\r\n    opacity = parseInt(aphaModFixNode.amt) / 100000;\r\n  }\r\n\r\n  return { picBase64, opacity };\r\n}\r\n\r\nexport function getGradientFill(node: XmlNode, warpObj: ProcessingContext): any {\r\n  const gsLst = node['a:gsLst']?.['a:gs'];\r\n  if (!gsLst || !Array.isArray(gsLst)) return null;\r\n  \r\n  const colors: GradientColor[] = [];\r\n  for (let i = 0; i < gsLst.length; i++) {\r\n    const colorValue = getSolidFill(gsLst[i], undefined, undefined, warpObj);\r\n    const pos = getTextByPathList(gsLst[i], ['attrs', 'pos']);\r\n    \r\n    colors[i] = {\r\n      pos: pos ? (pos / 1000 + '%') : '0%',\r\n      color: colorValue || '#000000',\r\n    };\r\n  }\r\n  \r\n  const lin = node['a:lin'];\r\n  let rot = 0;\r\n  let pathType = 'line';\r\n  \r\n  if (lin) {\r\n    rot = angleToDegrees(lin.attrs?.ang);\r\n  } else {\r\n    const path = node['a:path'];\r\n    if (path?.attrs?.path) {\r\n      pathType = path.attrs.path;\r\n    }\r\n  }\r\n  \r\n  return {\r\n    rot,\r\n    path: pathType,\r\n    colors: colors.sort((a, b) => parseInt(a.pos) - parseInt(b.pos)),\r\n  };\r\n}\r\n\r\nexport function getBgGradientFill(\r\n  bgPr: XmlNode | undefined, \r\n  phClr: string | undefined, \r\n  slideMasterContent: XmlNode, \r\n  warpObj: ProcessingContext\r\n): any {\r\n  if (bgPr) {\r\n    const grdFill = bgPr['a:gradFill'];\r\n    if (!grdFill) return null;\r\n    \r\n    const gsLst = grdFill['a:gsLst']?.['a:gs'];\r\n    if (!gsLst || !Array.isArray(gsLst)) return null;\r\n    \r\n    const colors: GradientColor[] = [];\r\n    \r\n    for (let i = 0; i < gsLst.length; i++) {\r\n      const colorValue = getSolidFill(\r\n        gsLst[i], \r\n        slideMasterContent['p:sldMaster']?.['p:clrMap']?.['attrs'], \r\n        phClr, \r\n        warpObj\r\n      );\r\n      const pos = getTextByPathList(gsLst[i], ['attrs', 'pos']);\r\n\r\n      colors[i] = {\r\n        pos: pos ? (pos / 1000 + '%') : '0%',\r\n        color: colorValue || '#000000',\r\n      };\r\n    }\r\n    \r\n    const lin = grdFill['a:lin'];\r\n    let rot = 0;\r\n    let pathType = 'line';\r\n    \r\n    if (lin) {\r\n      rot = angleToDegrees(lin.attrs?.ang);\r\n    } else {\r\n      const path = grdFill['a:path'];\r\n      if (path?.attrs?.path) {\r\n        pathType = path.attrs.path;\r\n      }\r\n    }\r\n    \r\n    return {\r\n      rot,\r\n      path: pathType,\r\n      colors: colors.sort((a, b) => parseInt(a.pos) - parseInt(b.pos)),\r\n    };\r\n  } else if (phClr) {\r\n    return phClr.indexOf('#') === -1 ? `#${phClr}` : phClr;\r\n  }\r\n  \r\n  return null;\r\n}\r\n\r\nexport async function getSlideBackgroundFill(warpObj: ProcessingContext): Promise<Fill> {\r\n  const slideContent = warpObj.slideContent;\r\n  const slideLayoutContent = warpObj.slideLayoutContent;\r\n  const slideMasterContent = warpObj.slideMasterContent;\r\n  \r\n  let bgPr = getTextByPathList(slideContent, ['p:sld', 'p:cSld', 'p:bg', 'p:bgPr']);\r\n\r\n  let background: any = '#ffffff';\r\n  let backgroundType: 'color' | 'gradient' | 'image' = 'color';\r\n\r\n  if (bgPr) {\r\n    const bgFillTyp = getFillType(bgPr);\r\n\r\n    if (bgFillTyp === 'SOLID_FILL') {\r\n      const sldFill = bgPr['a:solidFill'];\r\n      let clrMapOvr = getColorMapOverride(slideContent, slideLayoutContent || {}, slideMasterContent || {});\r\n      const sldBgClr = getSolidFill(sldFill, clrMapOvr, undefined, warpObj);\r\n      background = sldBgClr;\r\n    } else if (bgFillTyp === 'GRADIENT_FILL') {\r\n      const gradientFill = getBgGradientFill(bgPr, undefined, slideMasterContent || {}, warpObj);\r\n      if (typeof gradientFill === 'string') {\r\n        background = gradientFill;\r\n      } else if (gradientFill) {\r\n        background = gradientFill;\r\n        backgroundType = 'gradient';\r\n      }\r\n    } else if (bgFillTyp === 'PIC_FILL') {\r\n      background = await getBgPicFill(bgPr, 'slideBg', warpObj);\r\n      backgroundType = 'image';\r\n    }\r\n  }\r\n  // Handle bgRef and other cases...\r\n  // (Similar logic but simplified for brevity)\r\n\r\n  return {\r\n    type: backgroundType,\r\n    value: background,\r\n  } as Fill;\r\n}\r\n\r\nfunction getColorMapOverride(\r\n  slideContent: XmlNode, \r\n  slideLayoutContent: XmlNode, \r\n  slideMasterContent: XmlNode\r\n): any {\r\n  let clrMapOvr = getTextByPathList(slideContent, ['p:sld', 'p:clrMapOvr', 'a:overrideClrMapping', 'attrs']);\r\n  if (clrMapOvr) return clrMapOvr;\r\n  \r\n  clrMapOvr = getTextByPathList(slideLayoutContent, ['p:sldLayout', 'p:clrMapOvr', 'a:overrideClrMapping', 'attrs']);\r\n  if (clrMapOvr) return clrMapOvr;\r\n  \r\n  return getTextByPathList(slideMasterContent, ['p:sldMaster', 'p:clrMap', 'attrs']);\r\n}\r\n\r\nexport async function getShapeFill(\r\n  node: XmlNode, \r\n  _pNode?: XmlNode, \r\n  isSvgMode?: boolean, \r\n  warpObj?: ProcessingContext, \r\n  source?: ProcessingSource\r\n): Promise<Fill | string> {\r\n  if (!warpObj) return '';\r\n  \r\n  const fillType = getFillType(getTextByPathList(node, ['p:spPr']) || {});\r\n  let type: 'color' | 'gradient' | 'image' = 'color';\r\n  let fillValue: any = '';\r\n  \r\n  if (fillType === 'NO_FILL') {\r\n    return isSvgMode ? 'none' : '';\r\n  } else if (fillType === 'SOLID_FILL') {\r\n    const shpFill = node['p:spPr']?.['a:solidFill'];\r\n    fillValue = getSolidFill(shpFill, undefined, undefined, warpObj);\r\n    type = 'color';\r\n  } else if (fillType === 'GRADIENT_FILL') {\r\n    const shpFill = node['p:spPr']?.['a:gradFill'];\r\n    fillValue = getGradientFill(shpFill, warpObj);\r\n    type = 'gradient';\r\n  } else if (fillType === 'PIC_FILL') {\r\n    const shpFill = node['p:spPr']?.['a:blipFill'];\r\n    const picBase64 = await getPicFill(source || 'slide', shpFill, warpObj);\r\n    const opacity = getPicFillOpacity(shpFill);\r\n    fillValue = { picBase64, opacity };\r\n    type = 'image';\r\n  }\r\n  \r\n  if (!fillValue) {\r\n    const clrName = getTextByPathList(node, ['p:style', 'a:fillRef']);\r\n    fillValue = getSolidFill(clrName, undefined, undefined, warpObj);\r\n    type = 'color';\r\n  }\r\n\r\n  return { type, value: fillValue } as Fill;\r\n}\r\n\r\nexport function getSolidFill(\r\n  solidFill: XmlNode | undefined, \r\n  clrMap?: any, \r\n  phClr?: string, \r\n  warpObj?: ProcessingContext\r\n): string {\r\n  if (!solidFill) return '';\r\n\r\n  let color = '';\r\n  let clrNode: XmlNode | undefined;\r\n\r\n  if (solidFill['a:srgbClr']) {\r\n    clrNode = solidFill['a:srgbClr'];\r\n    color = getTextByPathList(clrNode, ['attrs', 'val']) || '';\r\n  } else if (solidFill['a:schemeClr']) {\r\n    clrNode = solidFill['a:schemeClr'];\r\n    const schemeClr = 'a:' + getTextByPathList(clrNode, ['attrs', 'val']);\r\n    color = getSchemeColorFromTheme(schemeClr, warpObj!, clrMap, phClr) || '';\r\n  } else if (solidFill['a:scrgbClr']) {\r\n    clrNode = solidFill['a:scrgbClr'];\r\n    const defBultColorVals = clrNode?.attrs || {};\r\n    const red = String(defBultColorVals.r || '').includes('%') ? String(defBultColorVals.r).split('%')[0] : String(defBultColorVals.r);\r\n    const green = String(defBultColorVals.g || '').includes('%') ? String(defBultColorVals.g).split('%')[0] : String(defBultColorVals.g);\r\n    const blue = String(defBultColorVals.b || '').includes('%') ? String(defBultColorVals.b).split('%')[0] : String(defBultColorVals.b);\r\n    color = toHex(255 * (Number(red) / 100)) + toHex(255 * (Number(green) / 100)) + toHex(255 * (Number(blue) / 100));\r\n  } else if (solidFill['a:prstClr']) {\r\n    clrNode = solidFill['a:prstClr'];\r\n    const prstClr = getTextByPathList(clrNode, ['attrs', 'val']);\r\n    color = getColorName2Hex(prstClr) || '';\r\n  } else if (solidFill['a:hslClr']) {\r\n    clrNode = solidFill['a:hslClr'];\r\n    const defBultColorVals = clrNode?.attrs || {};\r\n    const hue = Number(defBultColorVals.hue) / 100000;\r\n    const sat = Number(String(defBultColorVals.sat || '').includes('%') ? String(defBultColorVals.sat).split('%')[0] : String(defBultColorVals.sat)) / 100;\r\n    const lum = Number(String(defBultColorVals.lum || '').includes('%') ? String(defBultColorVals.lum).split('%')[0] : String(defBultColorVals.lum)) / 100;\r\n    const hsl2rgb = hslToRgb(hue, sat, lum);\r\n    color = toHex(hsl2rgb.r) + toHex(hsl2rgb.g) + toHex(hsl2rgb.b);\r\n  } else if (solidFill['a:sysClr']) {\r\n    clrNode = solidFill['a:sysClr'];\r\n    const sysClr = getTextByPathList(clrNode, ['attrs', 'lastClr']);\r\n    if (sysClr) color = sysClr;\r\n  }\r\n\r\n  // Apply color transformations\r\n  if (clrNode) {\r\n    let isAlpha = false;\r\n    \r\n    // Alpha\r\n    const alpha = parseInt(getTextByPathList(clrNode, ['a:alpha', 'attrs', 'val']) || '0') / 100000;\r\n    if (!isNaN(alpha)) {\r\n      const al_color = tinycolor(color);\r\n      al_color.setAlpha(alpha);\r\n      color = al_color.toHex8();\r\n      isAlpha = true;\r\n    }\r\n\r\n    // Color modifications\r\n    const hueMod = parseInt(getTextByPathList(clrNode, ['a:hueMod', 'attrs', 'val']) || '0') / 100000;\r\n    if (!isNaN(hueMod)) {\r\n      color = applyHueMod(color, hueMod, isAlpha);\r\n    }\r\n    \r\n    const lumMod = parseInt(getTextByPathList(clrNode, ['a:lumMod', 'attrs', 'val']) || '0') / 100000;\r\n    if (!isNaN(lumMod)) {\r\n      color = applyLumMod(color, lumMod, isAlpha);\r\n    }\r\n    \r\n    const lumOff = parseInt(getTextByPathList(clrNode, ['a:lumOff', 'attrs', 'val']) || '0') / 100000;\r\n    if (!isNaN(lumOff)) {\r\n      color = applyLumOff(color, lumOff, isAlpha);\r\n    }\r\n    \r\n    const satMod = parseInt(getTextByPathList(clrNode, ['a:satMod', 'attrs', 'val']) || '0') / 100000;\r\n    if (!isNaN(satMod)) {\r\n      color = applySatMod(color, satMod, isAlpha);\r\n    }\r\n    \r\n    const shade = parseInt(getTextByPathList(clrNode, ['a:shade', 'attrs', 'val']) || '0') / 100000;\r\n    if (!isNaN(shade)) {\r\n      color = applyShade(color, shade, isAlpha);\r\n    }\r\n    \r\n    const tint = parseInt(getTextByPathList(clrNode, ['a:tint', 'attrs', 'val']) || '0') / 100000;\r\n    if (!isNaN(tint)) {\r\n      color = applyTint(color, tint, isAlpha);\r\n    }\r\n  }\r\n\r\n  if (color && !color.includes('#')) {\r\n    color = '#' + color;\r\n  }\r\n\r\n  return color;\r\n}"]}
{"version":3,"file":"types.js","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":"AA4ZA,wCAAwC;AACxC,MAAM,OAAO,cAAe,SAAQ,KAAK;IACvC,YAAY,OAAe,EAAkB,KAAa;QACxD,KAAK,CAAC,OAAO,CAAC,CAAC;QAD4B,UAAK,GAAL,KAAK,CAAQ;QAExD,IAAI,CAAC,IAAI,GAAG,gBAAgB,CAAC;IAC/B,CAAC;CACF;AAED,MAAM,OAAO,aAAc,SAAQ,KAAK;IACtC,YAAY,OAAe,EAAkB,QAAiB,EAAkB,KAAa;QAC3F,KAAK,CAAC,OAAO,CAAC,CAAC;QAD4B,aAAQ,GAAR,QAAQ,CAAS;QAAkB,UAAK,GAAL,KAAK,CAAQ;QAE3F,IAAI,CAAC,IAAI,GAAG,eAAe,CAAC;IAC9B,CAAC;CACF;AAED,cAAc;AACd,MAAM,UAAU,aAAa,CAAC,OAAqB;IACjD,OAAO,OAAO,CAAC,IAAI,KAAK,MAAM,CAAC;AACjC,CAAC;AAED,MAAM,UAAU,cAAc,CAAC,OAAqB;IAClD,OAAO,OAAO,CAAC,IAAI,KAAK,OAAO,CAAC;AAClC,CAAC;AAED,MAAM,UAAU,cAAc,CAAC,OAAqB;IAClD,OAAO,OAAO,CAAC,IAAI,KAAK,OAAO,CAAC;AAClC,CAAC;AAED,MAAM,UAAU,cAAc,CAAC,OAAqB;IAClD,OAAO,OAAO,CAAC,IAAI,KAAK,OAAO,CAAC;AAClC,CAAC;AAED,MAAM,UAAU,cAAc,CAAC,OAAqB;IAClD,OAAO,OAAO,CAAC,IAAI,KAAK,OAAO,CAAC;AAClC,CAAC;AAED,MAAM,UAAU,aAAa,CAAC,OAAqB;IACjD,OAAO,OAAO,CAAC,IAAI,KAAK,MAAM,CAAC;AACjC,CAAC;AAED,MAAM,UAAU,cAAc,CAAC,OAAqB;IAClD,OAAO,OAAO,CAAC,IAAI,KAAK,OAAO,CAAC;AAClC,CAAC;AAED,MAAM,UAAU,cAAc,CAAC,OAAqB;IAClD,OAAO,OAAO,CAAC,IAAI,KAAK,OAAO,CAAC;AAClC,CAAC;AAED,MAAM,UAAU,cAAc,CAAC,OAAqB;IAClD,OAAO,OAAO,CAAC,IAAI,KAAK,OAAO,CAAC;AAClC,CAAC;AAED,MAAM,UAAU,gBAAgB,CAAC,OAAqB;IACpD,OAAO,OAAO,CAAC,IAAI,KAAK,SAAS,CAAC;AACpC,CAAC","sourcesContent":["// Core XML Node Structure\r\nexport interface XmlNode {\r\n  attrs?: {\r\n    [key: string]: any;\r\n    order?: number;\r\n  };\r\n  [key: string]: any;\r\n}\r\n\r\nexport interface XmlAttributes {\r\n  [key: string]: string;\r\n}\r\n\r\n// Position and Size Interfaces\r\nexport interface Position {\r\n  left: number;\r\n  top: number;\r\n}\r\n\r\nexport interface Size {\r\n  width: number;\r\n  height: number;\r\n}\r\n\r\nexport interface Rectangle extends Position, Size {}\r\n\r\n// Color and Fill Interfaces\r\nexport interface Shadow {\r\n  h: number;\r\n  v: number;\r\n  blur: number;\r\n  color: string;\r\n}\r\n\r\nexport interface ColorFill {\r\n  type: 'color';\r\n  value: string;\r\n}\r\n\r\nexport interface ImageFill {\r\n  type: 'image';\r\n  value: {\r\n    picBase64: string;\r\n    opacity: number;\r\n  };\r\n}\r\n\r\nexport interface GradientColor {\r\n  pos: string;\r\n  color: string;\r\n}\r\n\r\nexport interface GradientFill {\r\n  type: 'gradient';\r\n  value: {\r\n    path: 'line' | 'circle' | 'rect' | 'shape';\r\n    rot: number;\r\n    colors: GradientColor[];\r\n  };\r\n}\r\n\r\nexport type Fill = ColorFill | ImageFill | GradientFill | '';\r\n\r\n// Border Interface\r\nexport interface Border {\r\n  borderColor: string;\r\n  borderWidth: number;\r\n  borderType: 'solid' | 'dashed' | 'dotted';\r\n  borderStrokeDasharray: string;\r\n}\r\n\r\n// Base Element Interface\r\nexport interface BaseElement extends Rectangle, Partial<Border> {\r\n  type: string;\r\n  id?: string;\r\n  order?: number;\r\n  rotate?: number;\r\n  isFlipV?: boolean;\r\n  isFlipH?: boolean;\r\n  name?: string;\r\n  shadow?: Shadow;\r\n}\r\n\r\n// Text Element\r\nexport interface TextElement extends BaseElement {\r\n  type: 'text';\r\n  content: string;\r\n  fill?: Fill;\r\n  vAlign?: 'top' | 'mid' | 'bottom';\r\n  isVertical?: boolean;\r\n}\r\n\r\n// Shape Element\r\nexport interface ShapeElement extends BaseElement {\r\n  type: 'shape';\r\n  content?: string;\r\n  fill?: Fill;\r\n  shapType: string;\r\n  path?: string;\r\n  vAlign?: 'top' | 'mid' | 'bottom';\r\n}\r\n\r\n// Image Element\r\nexport interface ImageElement extends BaseElement {\r\n  type: 'image';\r\n  src: string;\r\n  rect?: {\r\n    t?: number;\r\n    b?: number;\r\n    l?: number;\r\n    r?: number;\r\n  };\r\n  geom?: string;\r\n}\r\n\r\n// Video Element\r\nexport interface VideoElement extends BaseElement {\r\n  type: 'video';\r\n  src?: string;\r\n  blob?: string;\r\n}\r\n\r\n// Audio Element\r\nexport interface AudioElement extends BaseElement {\r\n  type: 'audio';\r\n  blob?: string;\r\n}\r\n\r\n// Math Element\r\nexport interface MathElement extends BaseElement {\r\n  type: 'math';\r\n  latex: string;\r\n  picBase64: string;\r\n  text?: string;\r\n}\r\n\r\n// Table Element\r\nexport interface TableCell {\r\n  text: string;\r\n  rowSpan?: number;\r\n  colSpan?: number;\r\n  vMerge?: boolean;\r\n  hMerge?: boolean;\r\n  fontBold?: boolean;\r\n  fontColor?: string;\r\n  fillColor?: string;\r\n  borders?: Border;\r\n}\r\n\r\nexport interface TableElement extends BaseElement {\r\n  type: 'table';\r\n  data: TableCell[][];\r\n  borders?: Border;\r\n  rowHeights: number[];\r\n  colWidths: number[];\r\n}\r\n\r\n// Chart Element\r\nexport interface ChartElement extends BaseElement {\r\n  type: 'chart';\r\n  data: any[];\r\n  colors: string[];\r\n  chartType: string;\r\n  barDir?: string;\r\n  marker?: boolean;\r\n  holeSize?: number;\r\n  grouping?: string;\r\n  style?: any;\r\n}\r\n\r\n// Group Element\r\nexport interface GroupElement extends BaseElement {\r\n  type: 'group';\r\n  elements: SlideElement[];\r\n}\r\n\r\n// Diagram Element\r\nexport interface DiagramElement extends BaseElement {\r\n  type: 'diagram';\r\n  elements: SlideElement[];\r\n}\r\n\r\n// Union of all element types\r\nexport type SlideElement = \r\n  | TextElement \r\n  | ShapeElement \r\n  | ImageElement \r\n  | VideoElement \r\n  | AudioElement \r\n  | MathElement \r\n  | TableElement \r\n  | ChartElement \r\n  | GroupElement \r\n  | DiagramElement;\r\n\r\n// Slide Interface\r\nexport interface Slide {\r\n  fill?: Fill;\r\n  elements: SlideElement[];\r\n  layoutElements: SlideElement[];\r\n  note: string;\r\n  slideName?: string;\r\n  elementCount?: number;\r\n}\r\n\r\n// Legacy Parse Result Interface (for backward compatibility)\r\nexport interface ParseResult {\r\n  slides: Slide[];\r\n  themeColors: string[];\r\n  size: Size;\r\n}\r\n\r\n// New Output Format Interfaces (PPTist compatible)\r\nexport interface PPTistColor {\r\n  color: string;\r\n  colorType: string;\r\n  colorIndex?: number;\r\n}\r\n\r\nexport interface PPTistThemeFill {\r\n  color: string;\r\n  colorType: string;\r\n}\r\n\r\nexport interface PPTistBackground {\r\n  type: 'color' | 'image' | 'gradient';\r\n  themeColor?: PPTistColor;\r\n  image?: string;\r\n  imageSize?: 'cover' | 'contain' | 'repeat';\r\n  gradient?: {\r\n    type: string;\r\n    color: string[];\r\n    rotate: number;\r\n  };\r\n}\r\n\r\nexport interface PPTistElement {\r\n  tag?: string;\r\n  index?: number;\r\n  type: 'text' | 'shape' | 'image' | 'table' | 'chart';\r\n  id: string;\r\n  left: number;\r\n  top: number;\r\n  width: number;\r\n  height: number;\r\n  content?: string; // HTML format for text\r\n  rotate?: number;\r\n  defaultFontName?: string;\r\n  defaultColor?: PPTistColor;\r\n  vertical?: boolean;\r\n  lineHeight?: number;\r\n  wordSpace?: number;\r\n  isDefault?: boolean;\r\n  fit?: 'resize' | 'autofit';\r\n  opacity?: number;\r\n  \r\n  // Shape specific\r\n  viewBox?: number[];\r\n  path?: string;\r\n  themeFill?: PPTistThemeFill;\r\n  fixedRatio?: boolean;\r\n  pathFormula?: string;\r\n  keypoint?: number;\r\n  \r\n  // Image specific\r\n  src?: string;\r\n  \r\n  // Table specific\r\n  data?: any[][];\r\n  \r\n  // Chart specific\r\n  chartType?: string;\r\n  chartData?: any;\r\n}\r\n\r\nexport interface PPTistSlide {\r\n  id: string;\r\n  tag?: string; // title, catalogue, content, thanks, etc.\r\n  elements: PPTistElement[];\r\n  background?: PPTistBackground;\r\n  remark?: string;\r\n  pageId?: string;\r\n  aiImageStatus?: any;\r\n}\r\n\r\nexport interface PPTistTheme {\r\n  fontName: string;\r\n  themeColor: {\r\n    lt1: string;    // light1\r\n    dk1: string;    // dark1\r\n    lt2: string;    // light2\r\n    dk2: string;    // dark2\r\n    accent1: string;\r\n    accent2: string;\r\n    accent3: string;\r\n    accent4: string;\r\n    accent5: string;\r\n    accent6: string;\r\n  };\r\n}\r\n\r\nexport interface PPTistResult {\r\n  slides: PPTistSlide[];\r\n  theme: PPTistTheme;\r\n  title?: string;\r\n}\r\n\r\n// Processing Context Interface\r\nexport interface ProcessingContext {\r\n  zip: any; // JSZip instance\r\n  slideFileName?: string;\r\n  slideLayoutContent: XmlNode | null;\r\n  slideLayoutTables: NodeTables;\r\n  slideMasterContent: XmlNode | null;\r\n  slideMasterTables: NodeTables;\r\n  slideContent: XmlNode;\r\n  tableStyles: XmlNode;\r\n  slideResObj: ResourceObject;\r\n  slideMasterTextStyles: XmlNode;\r\n  layoutResObj: ResourceObject;\r\n  masterResObj: ResourceObject;\r\n  themeContent: XmlNode;\r\n  themeResObj: ResourceObject;\r\n  digramFileContent: XmlNode;\r\n  diagramResObj: ResourceObject;\r\n  defaultTextStyle: XmlNode;\r\n  slideRelationshipFile?: XmlNode | null;\r\n}\r\n\r\n// Resource Object Interface\r\nexport interface ResourceObject {\r\n  [id: string]: {\r\n    type: string;\r\n    target: string;\r\n  };\r\n}\r\n\r\n// Node Tables Interface\r\nexport interface NodeTables {\r\n  idTable: { [id: string]: XmlNode };\r\n  idxTable: { [idx: string]: XmlNode };\r\n  typeTable: { [type: string]: XmlNode };\r\n}\r\n\r\n// Content Types Interface\r\nexport interface ContentTypes {\r\n  slides: string[];\r\n  slideLayouts: string[];\r\n}\r\n\r\n// Slide Info Interface\r\nexport interface SlideInfo {\r\n  width: number;\r\n  height: number;\r\n  defaultTextStyle: XmlNode;\r\n}\r\n\r\n// Theme Interface\r\nexport interface Theme {\r\n  themeContent: XmlNode;\r\n  themeColors: string[];\r\n}\r\n\r\n// Font Style Interfaces\r\nexport interface FontStyle {\r\n  fontFamily?: string;\r\n  fontSize?: number;\r\n  fontBold?: boolean;\r\n  fontItalic?: boolean;\r\n  fontColor?: string;\r\n  fontDecoration?: string;\r\n  fontDecorationLine?: string;\r\n  fontSpace?: number;\r\n  fontSubscript?: boolean;\r\n  fontShadow?: string;\r\n}\r\n\r\n// Utility Type for Processing Sources\r\nexport type ProcessingSource = 'slide' | 'slideLayoutBg' | 'slideMasterBg' | 'diagramBg' | 'themeBg' | 'slideBg';\r\n\r\n// Fill Type Enumeration\r\nexport type FillType = 'NO_FILL' | 'SOLID_FILL' | 'GRADIENT_FILL' | 'PATTERN_FILL' | 'PIC_FILL' | 'GROUP_FILL';\r\n\r\n// Border Type Enumeration\r\nexport type BorderType = 'solid' | 'dashed' | 'dotted';\r\n\r\n// Vertical Alignment Type\r\nexport type VerticalAlign = 'top' | 'mid' | 'bottom';\r\n\r\n// Horizontal Alignment Type\r\nexport type HorizontalAlign = 'left' | 'center' | 'right' | 'justify';\r\n\r\n// Math Operation Types\r\nexport interface MathOperation {\r\n  type: string;\r\n  children?: MathOperation[];\r\n  text?: string;\r\n  [key: string]: any;\r\n}\r\n\r\n// Chart Data Types\r\nexport interface ChartData {\r\n  data: any[];\r\n  colors: string[];\r\n  type: string;\r\n  barDir?: string;\r\n  marker?: boolean;\r\n  holeSize?: number;\r\n  grouping?: string;\r\n  style?: any;\r\n}\r\n\r\n// Error Types for better error handling\r\nexport class PPTXParseError extends Error {\r\n  constructor(message: string, public readonly cause?: Error) {\r\n    super(message);\r\n    this.name = 'PPTXParseError';\r\n  }\r\n}\r\n\r\nexport class XMLParseError extends Error {\r\n  constructor(message: string, public readonly filename?: string, public readonly cause?: Error) {\r\n    super(message);\r\n    this.name = 'XMLParseError';\r\n  }\r\n}\r\n\r\n// Type Guards\r\nexport function isTextElement(element: SlideElement): element is TextElement {\r\n  return element.type === 'text';\r\n}\r\n\r\nexport function isShapeElement(element: SlideElement): element is ShapeElement {\r\n  return element.type === 'shape';\r\n}\r\n\r\nexport function isImageElement(element: SlideElement): element is ImageElement {\r\n  return element.type === 'image';\r\n}\r\n\r\nexport function isVideoElement(element: SlideElement): element is VideoElement {\r\n  return element.type === 'video';\r\n}\r\n\r\nexport function isAudioElement(element: SlideElement): element is AudioElement {\r\n  return element.type === 'audio';\r\n}\r\n\r\nexport function isMathElement(element: SlideElement): element is MathElement {\r\n  return element.type === 'math';\r\n}\r\n\r\nexport function isTableElement(element: SlideElement): element is TableElement {\r\n  return element.type === 'table';\r\n}\r\n\r\nexport function isChartElement(element: SlideElement): element is ChartElement {\r\n  return element.type === 'chart';\r\n}\r\n\r\nexport function isGroupElement(element: SlideElement): element is GroupElement {\r\n  return element.type === 'group';\r\n}\r\n\r\nexport function isDiagramElement(element: SlideElement): element is DiagramElement {\r\n  return element.type === 'diagram';\r\n}\r\n\r\n// Utility types for function parameters\r\nexport type NodeKey = 'p:sp' | 'p:cxnSp' | 'p:pic' | 'p:graphicFrame' | 'p:grpSp' | 'mc:AlternateContent';\r\n\r\nexport interface ProcessNodeParams {\r\n  nodeKey: NodeKey;\r\n  nodeValue: XmlNode;\r\n  nodes: XmlNode;\r\n  warpObj: ProcessingContext;\r\n  source: ProcessingSource;\r\n}"]}
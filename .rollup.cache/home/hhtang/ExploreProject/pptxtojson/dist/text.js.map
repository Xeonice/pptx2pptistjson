{"version":3,"file":"text.js","sourceRoot":"","sources":["../src/text.ts"],"names":[],"mappings":"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","sourcesContent":["import { getHorizontalAlign } from './align';\r\nimport { getTextByPathList } from './utils';\r\nimport {\r\n  getFontType,\r\n  getFontColor,\r\n  getFontSize,\r\n  getFontBold,\r\n  getFontItalic,\r\n  getFontDecoration,\r\n} from './fontStyle';\r\nimport type { XmlNode, ProcessingContext } from './types';\r\n\r\nexport function genTextBody(\r\n  textBodyNode: XmlNode | undefined, \r\n  spNode: XmlNode, \r\n  _slideLayoutSpNode?: XmlNode | null, \r\n  type?: string, \r\n  warpObj?: ProcessingContext\r\n): string {\r\n  if (!textBodyNode || !warpObj) return '';\r\n\r\n  let text = '';\r\n  const pFontStyle = getTextByPathList(spNode, ['p:style', 'a:fontRef']);\r\n  const pNode = textBodyNode['a:p'];\r\n  const pNodes = Array.isArray(pNode) ? pNode : [pNode];\r\n\r\n  for (const pNode of pNodes) {\r\n    let rNode = pNode['a:r'];\r\n    let fldNode = pNode['a:fld'];\r\n    let brNode = pNode['a:br'];\r\n    \r\n    if (rNode) {\r\n      rNode = Array.isArray(rNode) ? rNode : [rNode];\r\n\r\n      if (fldNode) {\r\n        fldNode = Array.isArray(fldNode) ? fldNode : [fldNode];\r\n        rNode = rNode.concat(fldNode);\r\n      }\r\n      \r\n      if (brNode) {\r\n        brNode = Array.isArray(brNode) ? brNode : [brNode];\r\n        brNode.forEach((item: any) => item.type = 'br');\r\n        \r\n        if (brNode.length > 1) brNode.shift();\r\n        rNode = rNode.concat(brNode);\r\n        rNode.sort((a: any, b: any) => {\r\n          if (!a.attrs || !b.attrs) return 0;\r\n          return a.attrs.order - b.attrs.order;\r\n        });\r\n      }\r\n\r\n      const pPrNode = pNode['a:pPr'];\r\n      const align = getHorizontalAlign(pNode, pNode, type, warpObj);\r\n      const isRtl = getTextByPathList(pPrNode, ['attrs', 'rtl']) === '1';\r\n\r\n      text += `<p style=\"text-align: ${align}; direction: ${isRtl ? 'rtl' : 'ltr'};\">`;\r\n\r\n      for (const rNodeItem of rNode) {\r\n        if (rNodeItem.type === 'br') {\r\n          text += '<br>';\r\n          continue;\r\n        }\r\n\r\n        const tNode = rNodeItem['a:t'];\r\n        if (!tNode) continue;\r\n\r\n        const fontFamily = getFontType(rNodeItem, type, warpObj);\r\n        const fontSize = getFontSize(rNodeItem, textBodyNode, 1);\r\n        const fontColor = getFontColor(rNodeItem, pNode, textBodyNode, pFontStyle, 1, warpObj);\r\n        const fontBold = getFontBold(rNodeItem, textBodyNode, 1);\r\n        const fontItalic = getFontItalic(rNodeItem, textBodyNode, 1);\r\n        const textDecoration = getFontDecoration(rNodeItem);\r\n\r\n        let styles = '';\r\n        if (fontFamily) styles += `font-family: ${fontFamily};`;\r\n        if (fontSize) styles += `font-size: ${fontSize}pt;`;\r\n        if (fontColor) styles += `color: ${fontColor};`;\r\n        if (fontBold) styles += 'font-weight: bold;';\r\n        if (fontItalic) styles += 'font-style: italic;';\r\n        if (textDecoration !== 'none') styles += `text-decoration: ${textDecoration};`;\r\n\r\n        text += styles ? `<span style=\"${styles}\">${tNode}</span>` : tNode;\r\n      }\r\n\r\n      text += '</p>';\r\n    } else {\r\n      // Empty paragraph\r\n      text += '<p></p>';\r\n    }\r\n  }\r\n\r\n  return text;\r\n}"]}
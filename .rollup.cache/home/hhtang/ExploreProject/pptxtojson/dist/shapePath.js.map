{"version":3,"file":"shapePath.js","sourceRoot":"","sources":["../src/shapePath.ts"],"names":[],"mappings":"AAEA,MAAM,UAAU,YAAY,CAAC,QAAgB,EAAE,KAAa,EAAE,MAAc,EAAE,KAAe;IAC3F,8BAA8B;IAC9B,QAAQ,QAAQ,EAAE,CAAC;QACjB,KAAK,MAAM;YACT,OAAO,WAAW,KAAK,QAAQ,KAAK,IAAI,MAAM,QAAQ,MAAM,IAAI,CAAC;QACnE,KAAK,SAAS;YACZ,OAAO,KAAK,KAAK,GAAC,CAAC,QAAQ,KAAK,GAAC,CAAC,IAAI,MAAM,GAAC,CAAC,UAAU,KAAK,GAAC,CAAC,IAAI,MAAM,MAAM,KAAK,GAAC,CAAC,IAAI,MAAM,GAAC,CAAC,UAAU,KAAK,GAAC,CAAC,MAAM,CAAC;QAC5H,KAAK,UAAU;YACb,OAAO,KAAK,KAAK,GAAC,CAAC,QAAQ,KAAK,IAAI,MAAM,QAAQ,MAAM,IAAI,CAAC;QAC/D,KAAK,SAAS;YACZ,OAAO,KAAK,KAAK,GAAC,CAAC,QAAQ,KAAK,IAAI,MAAM,GAAC,CAAC,MAAM,KAAK,GAAC,CAAC,IAAI,MAAM,QAAQ,MAAM,GAAC,CAAC,IAAI,CAAC;QAC1F,KAAK,UAAU;YACb,OAAO,KAAK,KAAK,GAAC,CAAC,QAAQ,KAAK,IAAI,MAAM,GAAC,GAAG,MAAM,KAAK,GAAC,GAAG,IAAI,MAAM,MAAM,KAAK,GAAC,GAAG,IAAI,MAAM,QAAQ,MAAM,GAAC,GAAG,IAAI,CAAC;QACzH,KAAK,SAAS;YACZ,OAAO,KAAK,KAAK,GAAC,IAAI,QAAQ,KAAK,GAAC,IAAI,QAAQ,KAAK,IAAI,MAAM,GAAC,CAAC,MAAM,KAAK,GAAC,IAAI,IAAI,MAAM,MAAM,KAAK,GAAC,IAAI,IAAI,MAAM,QAAQ,MAAM,GAAC,CAAC,IAAI,CAAC;QAC5I,KAAK,OAAO;YACV,MAAM,EAAE,GAAG,KAAK,GAAG,CAAC,CAAC;YACrB,MAAM,EAAE,GAAG,MAAM,GAAG,CAAC,CAAC;YACtB,MAAM,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;YACrC,MAAM,WAAW,GAAG,WAAW,GAAG,GAAG,CAAC;YACtC,IAAI,QAAQ,GAAG,EAAE,CAAC;YAClB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;gBAC5B,MAAM,KAAK,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;gBAChC,MAAM,MAAM,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,WAAW,CAAC;gBACvD,MAAM,CAAC,GAAG,EAAE,GAAG,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,GAAG,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;gBACtD,MAAM,CAAC,GAAG,EAAE,GAAG,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,GAAG,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;gBACtD,QAAQ,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;YACnD,CAAC;YACD,OAAO,QAAQ,GAAG,IAAI,CAAC;QACzB;YACE,OAAO,WAAW,KAAK,QAAQ,KAAK,IAAI,MAAM,QAAQ,MAAM,IAAI,CAAC;IACrE,CAAC;AACH,CAAC","sourcesContent":["import type { XmlNode } from './types';\r\n\r\nexport function getShapePath(shapType: string, width: number, height: number, _node?: XmlNode): string {\r\n  // Basic shape path generation\r\n  switch (shapType) {\r\n    case 'rect':\r\n      return `M 0 0 L ${width} 0 L ${width} ${height} L 0 ${height} Z`;\r\n    case 'ellipse':\r\n      return `M ${width/2} 0 A ${width/2} ${height/2} 0 1 1 ${width/2} ${height} A ${width/2} ${height/2} 0 1 1 ${width/2} 0 Z`;\r\n    case 'triangle':\r\n      return `M ${width/2} 0 L ${width} ${height} L 0 ${height} Z`;\r\n    case 'diamond':\r\n      return `M ${width/2} 0 L ${width} ${height/2} L ${width/2} ${height} L 0 ${height/2} Z`;\r\n    case 'pentagon':\r\n      return `M ${width/2} 0 L ${width} ${height*0.4} L ${width*0.8} ${height} L ${width*0.2} ${height} L 0 ${height*0.4} Z`;\r\n    case 'hexagon':\r\n      return `M ${width*0.25} 0 L ${width*0.75} 0 L ${width} ${height/2} L ${width*0.75} ${height} L ${width*0.25} ${height} L 0 ${height/2} Z`;\r\n    case 'star5':\r\n      const cx = width / 2;\r\n      const cy = height / 2;\r\n      const outerRadius = Math.min(cx, cy);\r\n      const innerRadius = outerRadius * 0.4;\r\n      let starPath = '';\r\n      for (let i = 0; i < 10; i++) {\r\n        const angle = (i * Math.PI) / 5;\r\n        const radius = i % 2 === 0 ? outerRadius : innerRadius;\r\n        const x = cx + radius * Math.cos(angle - Math.PI / 2);\r\n        const y = cy + radius * Math.sin(angle - Math.PI / 2);\r\n        starPath += (i === 0 ? 'M' : 'L') + ` ${x} ${y}`;\r\n      }\r\n      return starPath + ' Z';\r\n    default:\r\n      return `M 0 0 L ${width} 0 L ${width} ${height} L 0 ${height} Z`;\r\n  }\r\n}"]}
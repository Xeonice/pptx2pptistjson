{"version":3,"file":"fontStyle.js","sourceRoot":"","sources":["../src/fontStyle.ts"],"names":[],"mappings":"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","sourcesContent":["import { getTextByPathList } from './utils';\r\nimport { getShadow } from './shadow';\r\nimport { getFillType, getSolidFill } from './fill';\r\nimport type { XmlNode, ProcessingContext } from './types';\r\n\r\nexport function getFontType(node: XmlNode, type: string | undefined, warpObj: ProcessingContext): string {\r\n  let typeface = getTextByPathList(node, ['a:rPr', 'a:latin', 'attrs', 'typeface']);\r\n\r\n  if (!typeface) {\r\n    const fontSchemeNode = getTextByPathList(warpObj.themeContent, ['a:theme', 'a:themeElements', 'a:fontScheme']);\r\n\r\n    if (type === 'title' || type === 'subTitle' || type === 'ctrTitle') {\r\n      typeface = getTextByPathList(fontSchemeNode, ['a:majorFont', 'a:latin', 'attrs', 'typeface']);\r\n    } else if (type === 'body') {\r\n      typeface = getTextByPathList(fontSchemeNode, ['a:minorFont', 'a:latin', 'attrs', 'typeface']);\r\n    } else {\r\n      typeface = getTextByPathList(fontSchemeNode, ['a:minorFont', 'a:latin', 'attrs', 'typeface']);\r\n    }\r\n  }\r\n\r\n  return typeface || '';\r\n}\r\n\r\nexport function getFontColor(\r\n  node: XmlNode, \r\n  pNode: XmlNode, \r\n  lstStyle: XmlNode, \r\n  pFontStyle: XmlNode, \r\n  lvl: number, \r\n  warpObj: ProcessingContext\r\n): string {\r\n  const rPrNode = getTextByPathList(node, ['a:rPr']);\r\n  let filTyp: string;\r\n  let color = '';\r\n  \r\n  if (rPrNode) {\r\n    filTyp = getFillType(rPrNode);\r\n    if (filTyp === 'SOLID_FILL') {\r\n      const solidFillNode = rPrNode['a:solidFill'];\r\n      color = getSolidFill(solidFillNode, undefined, undefined, warpObj);\r\n    }\r\n  }\r\n  \r\n  if (!color && getTextByPathList(lstStyle, ['a:lvl' + lvl + 'pPr', 'a:defRPr'])) {\r\n    const lstStyledefRPr = getTextByPathList(lstStyle, ['a:lvl' + lvl + 'pPr', 'a:defRPr']);\r\n    filTyp = getFillType(lstStyledefRPr);\r\n    if (filTyp === 'SOLID_FILL') {\r\n      const solidFillNode = lstStyledefRPr['a:solidFill'];\r\n      color = getSolidFill(solidFillNode, undefined, undefined, warpObj);\r\n    }\r\n  }\r\n  \r\n  if (!color) {\r\n    const sPstyle = getTextByPathList(pNode, ['p:style', 'a:fontRef']);\r\n    if (sPstyle) color = getSolidFill(sPstyle, undefined, undefined, warpObj);\r\n    if (!color && pFontStyle) color = getSolidFill(pFontStyle, undefined, undefined, warpObj);\r\n  }\r\n  \r\n  return color || '';\r\n}\r\n\r\nexport function getFontSize(node: XmlNode, lstStyle: XmlNode, lvl: number): number {\r\n  let fontSize = getTextByPathList(node, ['a:rPr', 'attrs', 'sz']);\r\n  \r\n  if (!fontSize && lstStyle) {\r\n    fontSize = getTextByPathList(lstStyle, ['a:lvl' + lvl + 'pPr', 'a:defRPr', 'attrs', 'sz']);\r\n  }\r\n  \r\n  return fontSize ? parseInt(fontSize) / 100 : 18;\r\n}\r\n\r\nexport function getFontBold(node: XmlNode, lstStyle: XmlNode, lvl: number): boolean {\r\n  let bold = getTextByPathList(node, ['a:rPr', 'attrs', 'b']);\r\n  \r\n  if (!bold && lstStyle) {\r\n    bold = getTextByPathList(lstStyle, ['a:lvl' + lvl + 'pPr', 'a:defRPr', 'attrs', 'b']);\r\n  }\r\n  \r\n  return bold === '1';\r\n}\r\n\r\nexport function getFontItalic(node: XmlNode, lstStyle: XmlNode, lvl: number): boolean {\r\n  let italic = getTextByPathList(node, ['a:rPr', 'attrs', 'i']);\r\n  \r\n  if (!italic && lstStyle) {\r\n    italic = getTextByPathList(lstStyle, ['a:lvl' + lvl + 'pPr', 'a:defRPr', 'attrs', 'i']);\r\n  }\r\n  \r\n  return italic === '1';\r\n}\r\n\r\nexport function getFontDecoration(node: XmlNode): string {\r\n  const u = getTextByPathList(node, ['a:rPr', 'attrs', 'u']);\r\n  const strike = getTextByPathList(node, ['a:rPr', 'attrs', 'strike']);\r\n  \r\n  if (u === 'sng') return 'underline';\r\n  if (strike === 'sngStrike') return 'line-through';\r\n  \r\n  return 'none';\r\n}\r\n\r\nexport function getFontDecorationLine(node: XmlNode): string {\r\n  return getFontDecoration(node);\r\n}\r\n\r\nexport function getFontSpace(node: XmlNode): number {\r\n  const spacing = getTextByPathList(node, ['a:rPr', 'attrs', 'spc']);\r\n  return spacing ? parseInt(spacing) / 100 : 0;\r\n}\r\n\r\nexport function getFontSubscript(node: XmlNode): boolean {\r\n  const baseline = getTextByPathList(node, ['a:rPr', 'attrs', 'baseline']);\r\n  return baseline ? parseInt(baseline) < 0 : false;\r\n}\r\n\r\nexport function getFontShadow(node: XmlNode, warpObj: ProcessingContext): string {\r\n  const effectLst = getTextByPathList(node, ['a:rPr', 'a:effectLst']);\r\n  if (effectLst) {\r\n    const outerShdw = effectLst['a:outerShdw'];\r\n    if (outerShdw) {\r\n      const shadow = getShadow(outerShdw, warpObj);\r\n      return `${shadow.h}pt ${shadow.v}pt ${shadow.blur}pt ${shadow.color}`;\r\n    }\r\n  }\r\n  return '';\r\n}"]}
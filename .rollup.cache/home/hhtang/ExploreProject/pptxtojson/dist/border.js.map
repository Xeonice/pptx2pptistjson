{"version":3,"file":"border.js","sourceRoot":"","sources":["../src/border.ts"],"names":[],"mappings":"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","sourcesContent":["import { getSchemeColorFromTheme } from './schemeColor';\r\nimport { getTextByPathList } from './utils';\r\nimport type { XmlNode, ProcessingContext, BorderType } from './types';\r\n\r\ninterface BorderResult {\r\n  borderColor: string;\r\n  borderWidth: number;\r\n  borderType: BorderType;\r\n  strokeDasharray: string;\r\n}\r\n\r\nexport function getBorder(\r\n  node: XmlNode, \r\n  elType?: string, \r\n  warpObj?: ProcessingContext\r\n): BorderResult {\r\n  let lineNode = getTextByPathList(node, ['p:spPr', 'a:ln']);\r\n  \r\n  if (!lineNode && warpObj) {\r\n    const lnRefNode = getTextByPathList(node, ['p:style', 'a:lnRef']);\r\n    if (lnRefNode) {\r\n      const lnIdx = getTextByPathList(lnRefNode, ['attrs', 'idx']);\r\n      const themeLines = warpObj.themeContent?.['a:theme']?.['a:themeElements']?.['a:fmtScheme']?.['a:lnStyleLst']?.['a:ln'];\r\n      if (themeLines && Array.isArray(themeLines) && lnIdx) {\r\n        lineNode = themeLines[Number(lnIdx) - 1];\r\n      }\r\n    }\r\n  }\r\n  \r\n  if (!lineNode) {\r\n    lineNode = node;\r\n  }\r\n\r\n  const isNoFill = getTextByPathList(lineNode, ['a:noFill']);\r\n\r\n  let borderWidth = isNoFill ? 0 : (parseInt(getTextByPathList(lineNode, ['attrs', 'w'])) / 12700);\r\n  if (isNaN(borderWidth)) {\r\n    if (lineNode) {\r\n      borderWidth = 0;\r\n    } else if (elType !== 'obj') {\r\n      borderWidth = 0;\r\n    } else {\r\n      borderWidth = 1;\r\n    }\r\n  }\r\n\r\n  let borderColor = getTextByPathList(lineNode, ['a:solidFill', 'a:srgbClr', 'attrs', 'val']);\r\n  if (!borderColor && warpObj) {\r\n    const schemeClrNode = getTextByPathList(lineNode, ['a:solidFill', 'a:schemeClr']);\r\n    const schemeClr = 'a:' + getTextByPathList(schemeClrNode, ['attrs', 'val']);\r\n    borderColor = getSchemeColorFromTheme(schemeClr, warpObj);\r\n  }\r\n\r\n  if (borderColor) {\r\n    borderColor = '#' + borderColor;\r\n  } else {\r\n    borderColor = 'rgba(0,0,0,0)';\r\n  }\r\n\r\n  const strokeType = getTextByPathList(lineNode, ['a:prstDash', 'attrs', 'val']);\r\n  let borderType: BorderType = 'solid';\r\n  let strokeDasharray = '0';\r\n\r\n  if (strokeType) {\r\n    switch (strokeType) {\r\n      case 'solid':\r\n        borderType = 'solid';\r\n        strokeDasharray = '0';\r\n        break;\r\n      case 'dash':\r\n        borderType = 'dashed';\r\n        strokeDasharray = '5';\r\n        break;\r\n      case 'dashDot':\r\n        borderType = 'dashed';\r\n        strokeDasharray = '5,5,1,5';\r\n        break;\r\n      case 'dot':\r\n        borderType = 'dotted';\r\n        strokeDasharray = '1,5';\r\n        break;\r\n      case 'lgDash':\r\n        borderType = 'dashed';\r\n        strokeDasharray = '10,5';\r\n        break;\r\n      case 'lgDashDot':\r\n        borderType = 'dashed';\r\n        strokeDasharray = '10,5,1,5';\r\n        break;\r\n      case 'lgDashDotDot':\r\n        borderType = 'dashed';\r\n        strokeDasharray = '10,5,1,5,1,5';\r\n        break;\r\n      case 'sysDash':\r\n        borderType = 'dashed';\r\n        strokeDasharray = '5,2';\r\n        break;\r\n      case 'sysDashDot':\r\n        borderType = 'dashed';\r\n        strokeDasharray = '5,2,1,2';\r\n        break;\r\n      case 'sysDashDotDot':\r\n        borderType = 'dashed';\r\n        strokeDasharray = '5,2,1,2,1,2';\r\n        break;\r\n      case 'sysDot':\r\n        borderType = 'dotted';\r\n        strokeDasharray = '2,2';\r\n        break;\r\n      default:\r\n        borderType = 'solid';\r\n        strokeDasharray = '0';\r\n    }\r\n  }\r\n\r\n  return {\r\n    borderColor,\r\n    borderWidth,\r\n    borderType,\r\n    strokeDasharray,\r\n  };\r\n}"]}
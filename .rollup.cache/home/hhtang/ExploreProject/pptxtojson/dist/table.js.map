{"version":3,"file":"table.js","sourceRoot":"","sources":["../src/table.ts"],"names":[],"mappings":"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","sourcesContent":["import { getBorder } from './border';\r\nimport { getSolidFill } from './fill';\r\nimport type { XmlNode, ProcessingContext } from './types';\r\n\r\nexport function getTableBorders(tblBorderStyl: XmlNode, warpObj: ProcessingContext): any {\r\n  return getBorder(tblBorderStyl, undefined, warpObj);\r\n}\r\n\r\nexport function getTableCellParams(\r\n  tcNode: XmlNode, \r\n  thisTblStyle: XmlNode, \r\n  a_source: string, \r\n  warpObj: ProcessingContext\r\n): any {\r\n  const tcPr = tcNode['a:tcPr'];\r\n  let rowSpan: number | undefined;\r\n  let colSpan: number | undefined;\r\n  let vMerge: boolean | undefined;\r\n  let hMerge: boolean | undefined;\r\n  let borders: any;\r\n  let fillColor: string | undefined;\r\n  let fontColor: string | undefined;\r\n  let fontBold: boolean | undefined;\r\n\r\n  if (tcPr) {\r\n    // Row and column span\r\n    if (tcPr.attrs?.rowSpan) rowSpan = parseInt(tcPr.attrs.rowSpan);\r\n    if (tcPr.attrs?.gridSpan) colSpan = parseInt(tcPr.attrs.gridSpan);\r\n    if (tcPr.attrs?.vMerge) vMerge = tcPr.attrs.vMerge === '1';\r\n    if (tcPr.attrs?.hMerge) hMerge = tcPr.attrs.hMerge === '1';\r\n\r\n    // Cell borders\r\n    const tcBorders = tcPr['a:tcBdr'];\r\n    if (tcBorders) {\r\n      borders = getTableBorders(tcBorders, warpObj);\r\n    }\r\n\r\n    // Cell fill\r\n    const solidFill = tcPr['a:solidFill'];\r\n    if (solidFill) {\r\n      fillColor = getSolidFill(solidFill, undefined, undefined, warpObj);\r\n    }\r\n  }\r\n\r\n  // Get style from table style if available\r\n  if (thisTblStyle && a_source) {\r\n    const styleNode = thisTblStyle[a_source];\r\n    if (styleNode) {\r\n      const tcStyle = styleNode['a:tcStyle'];\r\n      if (tcStyle) {\r\n        if (!fillColor && tcStyle['a:fill']) {\r\n          fillColor = getSolidFill(tcStyle['a:fill']['a:solidFill'], undefined, undefined, warpObj);\r\n        }\r\n        if (!borders && tcStyle['a:tcBdr']) {\r\n          borders = getTableBorders(tcStyle['a:tcBdr'], warpObj);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return {\r\n    rowSpan,\r\n    colSpan,\r\n    vMerge,\r\n    hMerge,\r\n    borders,\r\n    fillColor,\r\n    fontColor,\r\n    fontBold,\r\n  };\r\n}\r\n\r\nexport function getTableRowParams(\r\n  trNodes: XmlNode[], \r\n  rowIndex: number, \r\n  tblStylAttrObj: any, \r\n  thisTblStyle: XmlNode, \r\n  warpObj: ProcessingContext\r\n): any {\r\n  let fillColor: string | undefined;\r\n  let fontColor: string | undefined;\r\n  let fontBold: boolean | undefined;\r\n\r\n  // Check for banded rows\r\n  if (tblStylAttrObj.isBandRowAttr === 1 && thisTblStyle) {\r\n    const isEvenRow = rowIndex % 2 === 0;\r\n    const bandStyle = isEvenRow ? thisTblStyle['a:band1H'] : thisTblStyle['a:band2H'];\r\n    \r\n    if (bandStyle) {\r\n      const tcStyle = bandStyle['a:tcStyle'];\r\n      if (tcStyle) {\r\n        if (tcStyle['a:fill']) {\r\n          fillColor = getSolidFill(tcStyle['a:fill']['a:solidFill'], undefined, undefined, warpObj);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Check for first/last row styling\r\n  if (rowIndex === 0 && tblStylAttrObj.isFrstRowAttr === 1 && thisTblStyle) {\r\n    const firstRowStyle = thisTblStyle['a:firstRow'];\r\n    if (firstRowStyle) {\r\n      const tcStyle = firstRowStyle['a:tcStyle'];\r\n      if (tcStyle) {\r\n        if (tcStyle['a:fill']) {\r\n          fillColor = getSolidFill(tcStyle['a:fill']['a:solidFill'], undefined, undefined, warpObj);\r\n        }\r\n        fontBold = true;\r\n      }\r\n    }\r\n  }\r\n\r\n  if (rowIndex === trNodes.length - 1 && tblStylAttrObj.isLstRowAttr === 1 && thisTblStyle) {\r\n    const lastRowStyle = thisTblStyle['a:lastRow'];\r\n    if (lastRowStyle) {\r\n      const tcStyle = lastRowStyle['a:tcStyle'];\r\n      if (tcStyle) {\r\n        if (tcStyle['a:fill']) {\r\n          fillColor = getSolidFill(tcStyle['a:fill']['a:solidFill'], undefined, undefined, warpObj);\r\n        }\r\n        fontBold = true;\r\n      }\r\n    }\r\n  }\r\n\r\n  return {\r\n    fillColor,\r\n    fontColor,\r\n    fontBold,\r\n  };\r\n}"]}